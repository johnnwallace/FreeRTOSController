
nucleo-f401re-controller.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a1ec  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000430  0800a390  0800a390  0001a390  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a7c0  0800a7c0  00020080  2**0
                  CONTENTS
  4 .ARM          00000008  0800a7c0  0800a7c0  0001a7c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a7c8  0800a7c8  00020080  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a7c8  0800a7c8  0001a7c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a7cc  0800a7cc  0001a7cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000080  20000000  0800a7d0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004ad0  20000080  0800a850  00020080  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20004b50  0800a850  00024b50  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020080  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001c1ab  00000000  00000000  000200b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003a88  00000000  00000000  0003c25b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000018e0  00000000  00000000  0003fce8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000017a0  00000000  00000000  000415c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000575d  00000000  00000000  00042d68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001b5d7  00000000  00000000  000484c5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009d71f  00000000  00000000  00063a9c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001011bb  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000076ac  00000000  00000000  0010120c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000080 	.word	0x20000080
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800a374 	.word	0x0800a374

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000084 	.word	0x20000084
 80001dc:	0800a374 	.word	0x0800a374

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_uldivmod>:
 8000bb8:	b953      	cbnz	r3, 8000bd0 <__aeabi_uldivmod+0x18>
 8000bba:	b94a      	cbnz	r2, 8000bd0 <__aeabi_uldivmod+0x18>
 8000bbc:	2900      	cmp	r1, #0
 8000bbe:	bf08      	it	eq
 8000bc0:	2800      	cmpeq	r0, #0
 8000bc2:	bf1c      	itt	ne
 8000bc4:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000bc8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000bcc:	f000 b974 	b.w	8000eb8 <__aeabi_idiv0>
 8000bd0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bd4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bd8:	f000 f806 	bl	8000be8 <__udivmoddi4>
 8000bdc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000be0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000be4:	b004      	add	sp, #16
 8000be6:	4770      	bx	lr

08000be8 <__udivmoddi4>:
 8000be8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bec:	9d08      	ldr	r5, [sp, #32]
 8000bee:	4604      	mov	r4, r0
 8000bf0:	468e      	mov	lr, r1
 8000bf2:	2b00      	cmp	r3, #0
 8000bf4:	d14d      	bne.n	8000c92 <__udivmoddi4+0xaa>
 8000bf6:	428a      	cmp	r2, r1
 8000bf8:	4694      	mov	ip, r2
 8000bfa:	d969      	bls.n	8000cd0 <__udivmoddi4+0xe8>
 8000bfc:	fab2 f282 	clz	r2, r2
 8000c00:	b152      	cbz	r2, 8000c18 <__udivmoddi4+0x30>
 8000c02:	fa01 f302 	lsl.w	r3, r1, r2
 8000c06:	f1c2 0120 	rsb	r1, r2, #32
 8000c0a:	fa20 f101 	lsr.w	r1, r0, r1
 8000c0e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c12:	ea41 0e03 	orr.w	lr, r1, r3
 8000c16:	4094      	lsls	r4, r2
 8000c18:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000c1c:	0c21      	lsrs	r1, r4, #16
 8000c1e:	fbbe f6f8 	udiv	r6, lr, r8
 8000c22:	fa1f f78c 	uxth.w	r7, ip
 8000c26:	fb08 e316 	mls	r3, r8, r6, lr
 8000c2a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000c2e:	fb06 f107 	mul.w	r1, r6, r7
 8000c32:	4299      	cmp	r1, r3
 8000c34:	d90a      	bls.n	8000c4c <__udivmoddi4+0x64>
 8000c36:	eb1c 0303 	adds.w	r3, ip, r3
 8000c3a:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000c3e:	f080 811f 	bcs.w	8000e80 <__udivmoddi4+0x298>
 8000c42:	4299      	cmp	r1, r3
 8000c44:	f240 811c 	bls.w	8000e80 <__udivmoddi4+0x298>
 8000c48:	3e02      	subs	r6, #2
 8000c4a:	4463      	add	r3, ip
 8000c4c:	1a5b      	subs	r3, r3, r1
 8000c4e:	b2a4      	uxth	r4, r4
 8000c50:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c54:	fb08 3310 	mls	r3, r8, r0, r3
 8000c58:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c5c:	fb00 f707 	mul.w	r7, r0, r7
 8000c60:	42a7      	cmp	r7, r4
 8000c62:	d90a      	bls.n	8000c7a <__udivmoddi4+0x92>
 8000c64:	eb1c 0404 	adds.w	r4, ip, r4
 8000c68:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000c6c:	f080 810a 	bcs.w	8000e84 <__udivmoddi4+0x29c>
 8000c70:	42a7      	cmp	r7, r4
 8000c72:	f240 8107 	bls.w	8000e84 <__udivmoddi4+0x29c>
 8000c76:	4464      	add	r4, ip
 8000c78:	3802      	subs	r0, #2
 8000c7a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c7e:	1be4      	subs	r4, r4, r7
 8000c80:	2600      	movs	r6, #0
 8000c82:	b11d      	cbz	r5, 8000c8c <__udivmoddi4+0xa4>
 8000c84:	40d4      	lsrs	r4, r2
 8000c86:	2300      	movs	r3, #0
 8000c88:	e9c5 4300 	strd	r4, r3, [r5]
 8000c8c:	4631      	mov	r1, r6
 8000c8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c92:	428b      	cmp	r3, r1
 8000c94:	d909      	bls.n	8000caa <__udivmoddi4+0xc2>
 8000c96:	2d00      	cmp	r5, #0
 8000c98:	f000 80ef 	beq.w	8000e7a <__udivmoddi4+0x292>
 8000c9c:	2600      	movs	r6, #0
 8000c9e:	e9c5 0100 	strd	r0, r1, [r5]
 8000ca2:	4630      	mov	r0, r6
 8000ca4:	4631      	mov	r1, r6
 8000ca6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000caa:	fab3 f683 	clz	r6, r3
 8000cae:	2e00      	cmp	r6, #0
 8000cb0:	d14a      	bne.n	8000d48 <__udivmoddi4+0x160>
 8000cb2:	428b      	cmp	r3, r1
 8000cb4:	d302      	bcc.n	8000cbc <__udivmoddi4+0xd4>
 8000cb6:	4282      	cmp	r2, r0
 8000cb8:	f200 80f9 	bhi.w	8000eae <__udivmoddi4+0x2c6>
 8000cbc:	1a84      	subs	r4, r0, r2
 8000cbe:	eb61 0303 	sbc.w	r3, r1, r3
 8000cc2:	2001      	movs	r0, #1
 8000cc4:	469e      	mov	lr, r3
 8000cc6:	2d00      	cmp	r5, #0
 8000cc8:	d0e0      	beq.n	8000c8c <__udivmoddi4+0xa4>
 8000cca:	e9c5 4e00 	strd	r4, lr, [r5]
 8000cce:	e7dd      	b.n	8000c8c <__udivmoddi4+0xa4>
 8000cd0:	b902      	cbnz	r2, 8000cd4 <__udivmoddi4+0xec>
 8000cd2:	deff      	udf	#255	; 0xff
 8000cd4:	fab2 f282 	clz	r2, r2
 8000cd8:	2a00      	cmp	r2, #0
 8000cda:	f040 8092 	bne.w	8000e02 <__udivmoddi4+0x21a>
 8000cde:	eba1 010c 	sub.w	r1, r1, ip
 8000ce2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ce6:	fa1f fe8c 	uxth.w	lr, ip
 8000cea:	2601      	movs	r6, #1
 8000cec:	0c20      	lsrs	r0, r4, #16
 8000cee:	fbb1 f3f7 	udiv	r3, r1, r7
 8000cf2:	fb07 1113 	mls	r1, r7, r3, r1
 8000cf6:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000cfa:	fb0e f003 	mul.w	r0, lr, r3
 8000cfe:	4288      	cmp	r0, r1
 8000d00:	d908      	bls.n	8000d14 <__udivmoddi4+0x12c>
 8000d02:	eb1c 0101 	adds.w	r1, ip, r1
 8000d06:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000d0a:	d202      	bcs.n	8000d12 <__udivmoddi4+0x12a>
 8000d0c:	4288      	cmp	r0, r1
 8000d0e:	f200 80cb 	bhi.w	8000ea8 <__udivmoddi4+0x2c0>
 8000d12:	4643      	mov	r3, r8
 8000d14:	1a09      	subs	r1, r1, r0
 8000d16:	b2a4      	uxth	r4, r4
 8000d18:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d1c:	fb07 1110 	mls	r1, r7, r0, r1
 8000d20:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000d24:	fb0e fe00 	mul.w	lr, lr, r0
 8000d28:	45a6      	cmp	lr, r4
 8000d2a:	d908      	bls.n	8000d3e <__udivmoddi4+0x156>
 8000d2c:	eb1c 0404 	adds.w	r4, ip, r4
 8000d30:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000d34:	d202      	bcs.n	8000d3c <__udivmoddi4+0x154>
 8000d36:	45a6      	cmp	lr, r4
 8000d38:	f200 80bb 	bhi.w	8000eb2 <__udivmoddi4+0x2ca>
 8000d3c:	4608      	mov	r0, r1
 8000d3e:	eba4 040e 	sub.w	r4, r4, lr
 8000d42:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000d46:	e79c      	b.n	8000c82 <__udivmoddi4+0x9a>
 8000d48:	f1c6 0720 	rsb	r7, r6, #32
 8000d4c:	40b3      	lsls	r3, r6
 8000d4e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d52:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d56:	fa20 f407 	lsr.w	r4, r0, r7
 8000d5a:	fa01 f306 	lsl.w	r3, r1, r6
 8000d5e:	431c      	orrs	r4, r3
 8000d60:	40f9      	lsrs	r1, r7
 8000d62:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d66:	fa00 f306 	lsl.w	r3, r0, r6
 8000d6a:	fbb1 f8f9 	udiv	r8, r1, r9
 8000d6e:	0c20      	lsrs	r0, r4, #16
 8000d70:	fa1f fe8c 	uxth.w	lr, ip
 8000d74:	fb09 1118 	mls	r1, r9, r8, r1
 8000d78:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d7c:	fb08 f00e 	mul.w	r0, r8, lr
 8000d80:	4288      	cmp	r0, r1
 8000d82:	fa02 f206 	lsl.w	r2, r2, r6
 8000d86:	d90b      	bls.n	8000da0 <__udivmoddi4+0x1b8>
 8000d88:	eb1c 0101 	adds.w	r1, ip, r1
 8000d8c:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000d90:	f080 8088 	bcs.w	8000ea4 <__udivmoddi4+0x2bc>
 8000d94:	4288      	cmp	r0, r1
 8000d96:	f240 8085 	bls.w	8000ea4 <__udivmoddi4+0x2bc>
 8000d9a:	f1a8 0802 	sub.w	r8, r8, #2
 8000d9e:	4461      	add	r1, ip
 8000da0:	1a09      	subs	r1, r1, r0
 8000da2:	b2a4      	uxth	r4, r4
 8000da4:	fbb1 f0f9 	udiv	r0, r1, r9
 8000da8:	fb09 1110 	mls	r1, r9, r0, r1
 8000dac:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000db0:	fb00 fe0e 	mul.w	lr, r0, lr
 8000db4:	458e      	cmp	lr, r1
 8000db6:	d908      	bls.n	8000dca <__udivmoddi4+0x1e2>
 8000db8:	eb1c 0101 	adds.w	r1, ip, r1
 8000dbc:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000dc0:	d26c      	bcs.n	8000e9c <__udivmoddi4+0x2b4>
 8000dc2:	458e      	cmp	lr, r1
 8000dc4:	d96a      	bls.n	8000e9c <__udivmoddi4+0x2b4>
 8000dc6:	3802      	subs	r0, #2
 8000dc8:	4461      	add	r1, ip
 8000dca:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000dce:	fba0 9402 	umull	r9, r4, r0, r2
 8000dd2:	eba1 010e 	sub.w	r1, r1, lr
 8000dd6:	42a1      	cmp	r1, r4
 8000dd8:	46c8      	mov	r8, r9
 8000dda:	46a6      	mov	lr, r4
 8000ddc:	d356      	bcc.n	8000e8c <__udivmoddi4+0x2a4>
 8000dde:	d053      	beq.n	8000e88 <__udivmoddi4+0x2a0>
 8000de0:	b15d      	cbz	r5, 8000dfa <__udivmoddi4+0x212>
 8000de2:	ebb3 0208 	subs.w	r2, r3, r8
 8000de6:	eb61 010e 	sbc.w	r1, r1, lr
 8000dea:	fa01 f707 	lsl.w	r7, r1, r7
 8000dee:	fa22 f306 	lsr.w	r3, r2, r6
 8000df2:	40f1      	lsrs	r1, r6
 8000df4:	431f      	orrs	r7, r3
 8000df6:	e9c5 7100 	strd	r7, r1, [r5]
 8000dfa:	2600      	movs	r6, #0
 8000dfc:	4631      	mov	r1, r6
 8000dfe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e02:	f1c2 0320 	rsb	r3, r2, #32
 8000e06:	40d8      	lsrs	r0, r3
 8000e08:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e0c:	fa21 f303 	lsr.w	r3, r1, r3
 8000e10:	4091      	lsls	r1, r2
 8000e12:	4301      	orrs	r1, r0
 8000e14:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e18:	fa1f fe8c 	uxth.w	lr, ip
 8000e1c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000e20:	fb07 3610 	mls	r6, r7, r0, r3
 8000e24:	0c0b      	lsrs	r3, r1, #16
 8000e26:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000e2a:	fb00 f60e 	mul.w	r6, r0, lr
 8000e2e:	429e      	cmp	r6, r3
 8000e30:	fa04 f402 	lsl.w	r4, r4, r2
 8000e34:	d908      	bls.n	8000e48 <__udivmoddi4+0x260>
 8000e36:	eb1c 0303 	adds.w	r3, ip, r3
 8000e3a:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000e3e:	d22f      	bcs.n	8000ea0 <__udivmoddi4+0x2b8>
 8000e40:	429e      	cmp	r6, r3
 8000e42:	d92d      	bls.n	8000ea0 <__udivmoddi4+0x2b8>
 8000e44:	3802      	subs	r0, #2
 8000e46:	4463      	add	r3, ip
 8000e48:	1b9b      	subs	r3, r3, r6
 8000e4a:	b289      	uxth	r1, r1
 8000e4c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000e50:	fb07 3316 	mls	r3, r7, r6, r3
 8000e54:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e58:	fb06 f30e 	mul.w	r3, r6, lr
 8000e5c:	428b      	cmp	r3, r1
 8000e5e:	d908      	bls.n	8000e72 <__udivmoddi4+0x28a>
 8000e60:	eb1c 0101 	adds.w	r1, ip, r1
 8000e64:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000e68:	d216      	bcs.n	8000e98 <__udivmoddi4+0x2b0>
 8000e6a:	428b      	cmp	r3, r1
 8000e6c:	d914      	bls.n	8000e98 <__udivmoddi4+0x2b0>
 8000e6e:	3e02      	subs	r6, #2
 8000e70:	4461      	add	r1, ip
 8000e72:	1ac9      	subs	r1, r1, r3
 8000e74:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000e78:	e738      	b.n	8000cec <__udivmoddi4+0x104>
 8000e7a:	462e      	mov	r6, r5
 8000e7c:	4628      	mov	r0, r5
 8000e7e:	e705      	b.n	8000c8c <__udivmoddi4+0xa4>
 8000e80:	4606      	mov	r6, r0
 8000e82:	e6e3      	b.n	8000c4c <__udivmoddi4+0x64>
 8000e84:	4618      	mov	r0, r3
 8000e86:	e6f8      	b.n	8000c7a <__udivmoddi4+0x92>
 8000e88:	454b      	cmp	r3, r9
 8000e8a:	d2a9      	bcs.n	8000de0 <__udivmoddi4+0x1f8>
 8000e8c:	ebb9 0802 	subs.w	r8, r9, r2
 8000e90:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000e94:	3801      	subs	r0, #1
 8000e96:	e7a3      	b.n	8000de0 <__udivmoddi4+0x1f8>
 8000e98:	4646      	mov	r6, r8
 8000e9a:	e7ea      	b.n	8000e72 <__udivmoddi4+0x28a>
 8000e9c:	4620      	mov	r0, r4
 8000e9e:	e794      	b.n	8000dca <__udivmoddi4+0x1e2>
 8000ea0:	4640      	mov	r0, r8
 8000ea2:	e7d1      	b.n	8000e48 <__udivmoddi4+0x260>
 8000ea4:	46d0      	mov	r8, sl
 8000ea6:	e77b      	b.n	8000da0 <__udivmoddi4+0x1b8>
 8000ea8:	3b02      	subs	r3, #2
 8000eaa:	4461      	add	r1, ip
 8000eac:	e732      	b.n	8000d14 <__udivmoddi4+0x12c>
 8000eae:	4630      	mov	r0, r6
 8000eb0:	e709      	b.n	8000cc6 <__udivmoddi4+0xde>
 8000eb2:	4464      	add	r4, ip
 8000eb4:	3802      	subs	r0, #2
 8000eb6:	e742      	b.n	8000d3e <__udivmoddi4+0x156>

08000eb8 <__aeabi_idiv0>:
 8000eb8:	4770      	bx	lr
 8000eba:	bf00      	nop

08000ebc <bno055_assignI2C>:

#include "../BNO055/bno055.h"

I2C_HandleTypeDef *_bno055_i2c_port;

void bno055_assignI2C(I2C_HandleTypeDef *hi2c_device) {
 8000ebc:	b480      	push	{r7}
 8000ebe:	b083      	sub	sp, #12
 8000ec0:	af00      	add	r7, sp, #0
 8000ec2:	6078      	str	r0, [r7, #4]
  _bno055_i2c_port = hi2c_device;
 8000ec4:	4a04      	ldr	r2, [pc, #16]	; (8000ed8 <bno055_assignI2C+0x1c>)
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	6013      	str	r3, [r2, #0]
}
 8000eca:	bf00      	nop
 8000ecc:	370c      	adds	r7, #12
 8000ece:	46bd      	mov	sp, r7
 8000ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed4:	4770      	bx	lr
 8000ed6:	bf00      	nop
 8000ed8:	2000009c 	.word	0x2000009c

08000edc <bno055_delay>:

void bno055_delay(int time) {
 8000edc:	b580      	push	{r7, lr}
 8000ede:	b082      	sub	sp, #8
 8000ee0:	af00      	add	r7, sp, #0
 8000ee2:	6078      	str	r0, [r7, #4]
#ifdef FREERTOS_ENABLED
  osDelay(time);
#else
  HAL_Delay(time);
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	4618      	mov	r0, r3
 8000ee8:	f001 faa2 	bl	8002430 <HAL_Delay>
#endif
}
 8000eec:	bf00      	nop
 8000eee:	3708      	adds	r7, #8
 8000ef0:	46bd      	mov	sp, r7
 8000ef2:	bd80      	pop	{r7, pc}

08000ef4 <bno055_writeData>:

void bno055_writeData(uint8_t reg, uint8_t data) {
 8000ef4:	b580      	push	{r7, lr}
 8000ef6:	b088      	sub	sp, #32
 8000ef8:	af02      	add	r7, sp, #8
 8000efa:	4603      	mov	r3, r0
 8000efc:	460a      	mov	r2, r1
 8000efe:	71fb      	strb	r3, [r7, #7]
 8000f00:	4613      	mov	r3, r2
 8000f02:	71bb      	strb	r3, [r7, #6]
  uint8_t txdata[2] = {reg, data};
 8000f04:	79fb      	ldrb	r3, [r7, #7]
 8000f06:	733b      	strb	r3, [r7, #12]
 8000f08:	79bb      	ldrb	r3, [r7, #6]
 8000f0a:	737b      	strb	r3, [r7, #13]
  uint8_t status;
  status = HAL_I2C_Master_Transmit(_bno055_i2c_port, BNO055_I2C_ADDR << 1,
 8000f0c:	4b5a      	ldr	r3, [pc, #360]	; (8001078 <bno055_writeData+0x184>)
 8000f0e:	6818      	ldr	r0, [r3, #0]
 8000f10:	f107 020c 	add.w	r2, r7, #12
 8000f14:	230a      	movs	r3, #10
 8000f16:	9300      	str	r3, [sp, #0]
 8000f18:	2302      	movs	r3, #2
 8000f1a:	2150      	movs	r1, #80	; 0x50
 8000f1c:	f001 fe8a 	bl	8002c34 <HAL_I2C_Master_Transmit>
 8000f20:	4603      	mov	r3, r0
 8000f22:	75fb      	strb	r3, [r7, #23]
                                   txdata, sizeof(txdata), 10);
  if (status == HAL_OK) {
 8000f24:	7dfb      	ldrb	r3, [r7, #23]
 8000f26:	2b00      	cmp	r3, #0
 8000f28:	f000 80a0 	beq.w	800106c <bno055_writeData+0x178>
    return;
  }

  if (status == HAL_ERROR) {
 8000f2c:	7dfb      	ldrb	r3, [r7, #23]
 8000f2e:	2b01      	cmp	r3, #1
 8000f30:	d103      	bne.n	8000f3a <bno055_writeData+0x46>
    printf("HAL_I2C_Master_Transmit HAL_ERROR\r\n");
 8000f32:	4852      	ldr	r0, [pc, #328]	; (800107c <bno055_writeData+0x188>)
 8000f34:	f007 fee0 	bl	8008cf8 <puts>
 8000f38:	e012      	b.n	8000f60 <bno055_writeData+0x6c>
  } else if (status == HAL_TIMEOUT) {
 8000f3a:	7dfb      	ldrb	r3, [r7, #23]
 8000f3c:	2b03      	cmp	r3, #3
 8000f3e:	d103      	bne.n	8000f48 <bno055_writeData+0x54>
    printf("HAL_I2C_Master_Transmit HAL_TIMEOUT\r\n");
 8000f40:	484f      	ldr	r0, [pc, #316]	; (8001080 <bno055_writeData+0x18c>)
 8000f42:	f007 fed9 	bl	8008cf8 <puts>
 8000f46:	e00b      	b.n	8000f60 <bno055_writeData+0x6c>
  } else if (status == HAL_BUSY) {
 8000f48:	7dfb      	ldrb	r3, [r7, #23]
 8000f4a:	2b02      	cmp	r3, #2
 8000f4c:	d103      	bne.n	8000f56 <bno055_writeData+0x62>
    printf("HAL_I2C_Master_Transmit HAL_BUSY\r\n");
 8000f4e:	484d      	ldr	r0, [pc, #308]	; (8001084 <bno055_writeData+0x190>)
 8000f50:	f007 fed2 	bl	8008cf8 <puts>
 8000f54:	e004      	b.n	8000f60 <bno055_writeData+0x6c>
  } else {
    printf("Unknown status data %d", status);
 8000f56:	7dfb      	ldrb	r3, [r7, #23]
 8000f58:	4619      	mov	r1, r3
 8000f5a:	484b      	ldr	r0, [pc, #300]	; (8001088 <bno055_writeData+0x194>)
 8000f5c:	f007 fe46 	bl	8008bec <iprintf>
  }

  uint32_t error = HAL_I2C_GetError(_bno055_i2c_port);
 8000f60:	4b45      	ldr	r3, [pc, #276]	; (8001078 <bno055_writeData+0x184>)
 8000f62:	681b      	ldr	r3, [r3, #0]
 8000f64:	4618      	mov	r0, r3
 8000f66:	f002 f997 	bl	8003298 <HAL_I2C_GetError>
 8000f6a:	6138      	str	r0, [r7, #16]
  if (error == HAL_I2C_ERROR_NONE) {
 8000f6c:	693b      	ldr	r3, [r7, #16]
 8000f6e:	2b00      	cmp	r3, #0
 8000f70:	d07e      	beq.n	8001070 <bno055_writeData+0x17c>
    return;
  } else if (error == HAL_I2C_ERROR_BERR) {
 8000f72:	693b      	ldr	r3, [r7, #16]
 8000f74:	2b01      	cmp	r3, #1
 8000f76:	d103      	bne.n	8000f80 <bno055_writeData+0x8c>
    printf("HAL_I2C_ERROR_BERR\r\n");
 8000f78:	4844      	ldr	r0, [pc, #272]	; (800108c <bno055_writeData+0x198>)
 8000f7a:	f007 febd 	bl	8008cf8 <puts>
 8000f7e:	e021      	b.n	8000fc4 <bno055_writeData+0xd0>
  } else if (error == HAL_I2C_ERROR_ARLO) {
 8000f80:	693b      	ldr	r3, [r7, #16]
 8000f82:	2b02      	cmp	r3, #2
 8000f84:	d103      	bne.n	8000f8e <bno055_writeData+0x9a>
    printf("HAL_I2C_ERROR_ARLO\r\n");
 8000f86:	4842      	ldr	r0, [pc, #264]	; (8001090 <bno055_writeData+0x19c>)
 8000f88:	f007 feb6 	bl	8008cf8 <puts>
 8000f8c:	e01a      	b.n	8000fc4 <bno055_writeData+0xd0>
  } else if (error == HAL_I2C_ERROR_AF) {
 8000f8e:	693b      	ldr	r3, [r7, #16]
 8000f90:	2b04      	cmp	r3, #4
 8000f92:	d103      	bne.n	8000f9c <bno055_writeData+0xa8>
    printf("HAL_I2C_ERROR_AF\r\n");
 8000f94:	483f      	ldr	r0, [pc, #252]	; (8001094 <bno055_writeData+0x1a0>)
 8000f96:	f007 feaf 	bl	8008cf8 <puts>
 8000f9a:	e013      	b.n	8000fc4 <bno055_writeData+0xd0>
  } else if (error == HAL_I2C_ERROR_OVR) {
 8000f9c:	693b      	ldr	r3, [r7, #16]
 8000f9e:	2b08      	cmp	r3, #8
 8000fa0:	d103      	bne.n	8000faa <bno055_writeData+0xb6>
    printf("HAL_I2C_ERROR_OVR\r\n");
 8000fa2:	483d      	ldr	r0, [pc, #244]	; (8001098 <bno055_writeData+0x1a4>)
 8000fa4:	f007 fea8 	bl	8008cf8 <puts>
 8000fa8:	e00c      	b.n	8000fc4 <bno055_writeData+0xd0>
  } else if (error == HAL_I2C_ERROR_DMA) {
 8000faa:	693b      	ldr	r3, [r7, #16]
 8000fac:	2b10      	cmp	r3, #16
 8000fae:	d103      	bne.n	8000fb8 <bno055_writeData+0xc4>
    printf("HAL_I2C_ERROR_DMA\r\n");
 8000fb0:	483a      	ldr	r0, [pc, #232]	; (800109c <bno055_writeData+0x1a8>)
 8000fb2:	f007 fea1 	bl	8008cf8 <puts>
 8000fb6:	e005      	b.n	8000fc4 <bno055_writeData+0xd0>
  } else if (error == HAL_I2C_ERROR_TIMEOUT) {
 8000fb8:	693b      	ldr	r3, [r7, #16]
 8000fba:	2b20      	cmp	r3, #32
 8000fbc:	d102      	bne.n	8000fc4 <bno055_writeData+0xd0>
    printf("HAL_I2C_ERROR_TIMEOUT\r\n");
 8000fbe:	4838      	ldr	r0, [pc, #224]	; (80010a0 <bno055_writeData+0x1ac>)
 8000fc0:	f007 fe9a 	bl	8008cf8 <puts>
  }

  HAL_I2C_StateTypeDef state = HAL_I2C_GetState(_bno055_i2c_port);
 8000fc4:	4b2c      	ldr	r3, [pc, #176]	; (8001078 <bno055_writeData+0x184>)
 8000fc6:	681b      	ldr	r3, [r3, #0]
 8000fc8:	4618      	mov	r0, r3
 8000fca:	f002 f957 	bl	800327c <HAL_I2C_GetState>
 8000fce:	4603      	mov	r3, r0
 8000fd0:	73fb      	strb	r3, [r7, #15]
  if (state == HAL_I2C_STATE_RESET) {
 8000fd2:	7bfb      	ldrb	r3, [r7, #15]
 8000fd4:	2b00      	cmp	r3, #0
 8000fd6:	d103      	bne.n	8000fe0 <bno055_writeData+0xec>
    printf("HAL_I2C_STATE_RESET\r\n");
 8000fd8:	4832      	ldr	r0, [pc, #200]	; (80010a4 <bno055_writeData+0x1b0>)
 8000fda:	f007 fe8d 	bl	8008cf8 <puts>
 8000fde:	e048      	b.n	8001072 <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_READY) {
 8000fe0:	7bfb      	ldrb	r3, [r7, #15]
 8000fe2:	2b20      	cmp	r3, #32
 8000fe4:	d103      	bne.n	8000fee <bno055_writeData+0xfa>
    printf("HAL_I2C_STATE_RESET\r\n");
 8000fe6:	482f      	ldr	r0, [pc, #188]	; (80010a4 <bno055_writeData+0x1b0>)
 8000fe8:	f007 fe86 	bl	8008cf8 <puts>
 8000fec:	e041      	b.n	8001072 <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_BUSY) {
 8000fee:	7bfb      	ldrb	r3, [r7, #15]
 8000ff0:	2b24      	cmp	r3, #36	; 0x24
 8000ff2:	d103      	bne.n	8000ffc <bno055_writeData+0x108>
    printf("HAL_I2C_STATE_BUSY\r\n");
 8000ff4:	482c      	ldr	r0, [pc, #176]	; (80010a8 <bno055_writeData+0x1b4>)
 8000ff6:	f007 fe7f 	bl	8008cf8 <puts>
 8000ffa:	e03a      	b.n	8001072 <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_BUSY_TX) {
 8000ffc:	7bfb      	ldrb	r3, [r7, #15]
 8000ffe:	2b21      	cmp	r3, #33	; 0x21
 8001000:	d103      	bne.n	800100a <bno055_writeData+0x116>
    printf("HAL_I2C_STATE_BUSY_TX\r\n");
 8001002:	482a      	ldr	r0, [pc, #168]	; (80010ac <bno055_writeData+0x1b8>)
 8001004:	f007 fe78 	bl	8008cf8 <puts>
 8001008:	e033      	b.n	8001072 <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_BUSY_RX) {
 800100a:	7bfb      	ldrb	r3, [r7, #15]
 800100c:	2b22      	cmp	r3, #34	; 0x22
 800100e:	d103      	bne.n	8001018 <bno055_writeData+0x124>
    printf("HAL_I2C_STATE_BUSY_RX\r\n");
 8001010:	4827      	ldr	r0, [pc, #156]	; (80010b0 <bno055_writeData+0x1bc>)
 8001012:	f007 fe71 	bl	8008cf8 <puts>
 8001016:	e02c      	b.n	8001072 <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_LISTEN) {
 8001018:	7bfb      	ldrb	r3, [r7, #15]
 800101a:	2b28      	cmp	r3, #40	; 0x28
 800101c:	d103      	bne.n	8001026 <bno055_writeData+0x132>
    printf("HAL_I2C_STATE_LISTEN\r\n");
 800101e:	4825      	ldr	r0, [pc, #148]	; (80010b4 <bno055_writeData+0x1c0>)
 8001020:	f007 fe6a 	bl	8008cf8 <puts>
 8001024:	e025      	b.n	8001072 <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_BUSY_TX_LISTEN) {
 8001026:	7bfb      	ldrb	r3, [r7, #15]
 8001028:	2b29      	cmp	r3, #41	; 0x29
 800102a:	d103      	bne.n	8001034 <bno055_writeData+0x140>
    printf("HAL_I2C_STATE_BUSY_TX_LISTEN\r\n");
 800102c:	4822      	ldr	r0, [pc, #136]	; (80010b8 <bno055_writeData+0x1c4>)
 800102e:	f007 fe63 	bl	8008cf8 <puts>
 8001032:	e01e      	b.n	8001072 <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_BUSY_RX_LISTEN) {
 8001034:	7bfb      	ldrb	r3, [r7, #15]
 8001036:	2b2a      	cmp	r3, #42	; 0x2a
 8001038:	d103      	bne.n	8001042 <bno055_writeData+0x14e>
    printf("HAL_I2C_STATE_BUSY_RX_LISTEN\r\n");
 800103a:	4820      	ldr	r0, [pc, #128]	; (80010bc <bno055_writeData+0x1c8>)
 800103c:	f007 fe5c 	bl	8008cf8 <puts>
 8001040:	e017      	b.n	8001072 <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_ABORT) {
 8001042:	7bfb      	ldrb	r3, [r7, #15]
 8001044:	2b60      	cmp	r3, #96	; 0x60
 8001046:	d103      	bne.n	8001050 <bno055_writeData+0x15c>
    printf("HAL_I2C_STATE_ABORT\r\n");
 8001048:	481d      	ldr	r0, [pc, #116]	; (80010c0 <bno055_writeData+0x1cc>)
 800104a:	f007 fe55 	bl	8008cf8 <puts>
 800104e:	e010      	b.n	8001072 <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_TIMEOUT) {
 8001050:	7bfb      	ldrb	r3, [r7, #15]
 8001052:	2ba0      	cmp	r3, #160	; 0xa0
 8001054:	d103      	bne.n	800105e <bno055_writeData+0x16a>
    printf("HAL_I2C_STATE_TIMEOUT\r\n");
 8001056:	481b      	ldr	r0, [pc, #108]	; (80010c4 <bno055_writeData+0x1d0>)
 8001058:	f007 fe4e 	bl	8008cf8 <puts>
 800105c:	e009      	b.n	8001072 <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_ERROR) {
 800105e:	7bfb      	ldrb	r3, [r7, #15]
 8001060:	2be0      	cmp	r3, #224	; 0xe0
 8001062:	d106      	bne.n	8001072 <bno055_writeData+0x17e>
    printf("HAL_I2C_STATE_ERROR\r\n");
 8001064:	4818      	ldr	r0, [pc, #96]	; (80010c8 <bno055_writeData+0x1d4>)
 8001066:	f007 fe47 	bl	8008cf8 <puts>
 800106a:	e002      	b.n	8001072 <bno055_writeData+0x17e>
    return;
 800106c:	bf00      	nop
 800106e:	e000      	b.n	8001072 <bno055_writeData+0x17e>
    return;
 8001070:	bf00      	nop
  }
  // while (HAL_I2C_GetState(_bno055_i2c_port) != HAL_I2C_STATE_READY) {}
  // return;
}
 8001072:	3718      	adds	r7, #24
 8001074:	46bd      	mov	sp, r7
 8001076:	bd80      	pop	{r7, pc}
 8001078:	2000009c 	.word	0x2000009c
 800107c:	0800a390 	.word	0x0800a390
 8001080:	0800a3b4 	.word	0x0800a3b4
 8001084:	0800a3dc 	.word	0x0800a3dc
 8001088:	0800a400 	.word	0x0800a400
 800108c:	0800a418 	.word	0x0800a418
 8001090:	0800a42c 	.word	0x0800a42c
 8001094:	0800a440 	.word	0x0800a440
 8001098:	0800a454 	.word	0x0800a454
 800109c:	0800a468 	.word	0x0800a468
 80010a0:	0800a47c 	.word	0x0800a47c
 80010a4:	0800a494 	.word	0x0800a494
 80010a8:	0800a4ac 	.word	0x0800a4ac
 80010ac:	0800a4c0 	.word	0x0800a4c0
 80010b0:	0800a4d8 	.word	0x0800a4d8
 80010b4:	0800a4f0 	.word	0x0800a4f0
 80010b8:	0800a508 	.word	0x0800a508
 80010bc:	0800a528 	.word	0x0800a528
 80010c0:	0800a548 	.word	0x0800a548
 80010c4:	0800a560 	.word	0x0800a560
 80010c8:	0800a578 	.word	0x0800a578

080010cc <bno055_readData>:

void bno055_readData(uint8_t reg, uint8_t *data, uint8_t len) {
 80010cc:	b580      	push	{r7, lr}
 80010ce:	b084      	sub	sp, #16
 80010d0:	af02      	add	r7, sp, #8
 80010d2:	4603      	mov	r3, r0
 80010d4:	6039      	str	r1, [r7, #0]
 80010d6:	71fb      	strb	r3, [r7, #7]
 80010d8:	4613      	mov	r3, r2
 80010da:	71bb      	strb	r3, [r7, #6]
  HAL_I2C_Master_Transmit(_bno055_i2c_port, BNO055_I2C_ADDR << 1, &reg, 1,
 80010dc:	4b0b      	ldr	r3, [pc, #44]	; (800110c <bno055_readData+0x40>)
 80010de:	6818      	ldr	r0, [r3, #0]
 80010e0:	1dfa      	adds	r2, r7, #7
 80010e2:	2364      	movs	r3, #100	; 0x64
 80010e4:	9300      	str	r3, [sp, #0]
 80010e6:	2301      	movs	r3, #1
 80010e8:	2150      	movs	r1, #80	; 0x50
 80010ea:	f001 fda3 	bl	8002c34 <HAL_I2C_Master_Transmit>
                          100);
  HAL_I2C_Master_Receive(_bno055_i2c_port, BNO055_I2C_ADDR << 1, data, len,
 80010ee:	4b07      	ldr	r3, [pc, #28]	; (800110c <bno055_readData+0x40>)
 80010f0:	6818      	ldr	r0, [r3, #0]
 80010f2:	79bb      	ldrb	r3, [r7, #6]
 80010f4:	b29b      	uxth	r3, r3
 80010f6:	2264      	movs	r2, #100	; 0x64
 80010f8:	9200      	str	r2, [sp, #0]
 80010fa:	683a      	ldr	r2, [r7, #0]
 80010fc:	2150      	movs	r1, #80	; 0x50
 80010fe:	f001 fe97 	bl	8002e30 <HAL_I2C_Master_Receive>
                         100);
  // HAL_I2C_Mem_Read(_bno055_i2c_port, BNO055_I2C_ADDR_LO<<1, reg,
  // I2C_MEMADD_SIZE_8BIT, data, len, 100);
}
 8001102:	bf00      	nop
 8001104:	3708      	adds	r7, #8
 8001106:	46bd      	mov	sp, r7
 8001108:	bd80      	pop	{r7, pc}
 800110a:	bf00      	nop
 800110c:	2000009c 	.word	0x2000009c

08001110 <tvec_toString>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
static void tvec_toString(char* out, tVec_t tv) {
 8001110:	b082      	sub	sp, #8
 8001112:	b5b0      	push	{r4, r5, r7, lr}
 8001114:	b08e      	sub	sp, #56	; 0x38
 8001116:	af06      	add	r7, sp, #24
 8001118:	6078      	str	r0, [r7, #4]
 800111a:	f107 0130 	add.w	r1, r7, #48	; 0x30
 800111e:	e881 000c 	stmia.w	r1, {r2, r3}
	int xInt1 = floor(tv.vec.x);
 8001122:	ed97 7b0e 	vldr	d7, [r7, #56]	; 0x38
 8001126:	eeb0 0a47 	vmov.f32	s0, s14
 800112a:	eef0 0a67 	vmov.f32	s1, s15
 800112e:	f008 ff2f 	bl	8009f90 <floor>
 8001132:	ec53 2b10 	vmov	r2, r3, d0
 8001136:	4610      	mov	r0, r2
 8001138:	4619      	mov	r1, r3
 800113a:	f7ff fd15 	bl	8000b68 <__aeabi_d2iz>
 800113e:	4603      	mov	r3, r0
 8001140:	61fb      	str	r3, [r7, #28]
	int xInt2 = trunc((tv.vec.x - xInt1) * 100);
 8001142:	e9d7 450e 	ldrd	r4, r5, [r7, #56]	; 0x38
 8001146:	69f8      	ldr	r0, [r7, #28]
 8001148:	f7ff f9f4 	bl	8000534 <__aeabi_i2d>
 800114c:	4602      	mov	r2, r0
 800114e:	460b      	mov	r3, r1
 8001150:	4620      	mov	r0, r4
 8001152:	4629      	mov	r1, r5
 8001154:	f7ff f8a0 	bl	8000298 <__aeabi_dsub>
 8001158:	4602      	mov	r2, r0
 800115a:	460b      	mov	r3, r1
 800115c:	4610      	mov	r0, r2
 800115e:	4619      	mov	r1, r3
 8001160:	f04f 0200 	mov.w	r2, #0
 8001164:	4b4b      	ldr	r3, [pc, #300]	; (8001294 <tvec_toString+0x184>)
 8001166:	f7ff fa4f 	bl	8000608 <__aeabi_dmul>
 800116a:	4602      	mov	r2, r0
 800116c:	460b      	mov	r3, r1
 800116e:	ec43 2b17 	vmov	d7, r2, r3
 8001172:	eeb0 0a47 	vmov.f32	s0, s14
 8001176:	eef0 0a67 	vmov.f32	s1, s15
 800117a:	f008 ff89 	bl	800a090 <trunc>
 800117e:	ec53 2b10 	vmov	r2, r3, d0
 8001182:	4610      	mov	r0, r2
 8001184:	4619      	mov	r1, r3
 8001186:	f7ff fcef 	bl	8000b68 <__aeabi_d2iz>
 800118a:	4603      	mov	r3, r0
 800118c:	61bb      	str	r3, [r7, #24]

	int yInt1 = floor(tv.vec.y);
 800118e:	ed97 7b10 	vldr	d7, [r7, #64]	; 0x40
 8001192:	eeb0 0a47 	vmov.f32	s0, s14
 8001196:	eef0 0a67 	vmov.f32	s1, s15
 800119a:	f008 fef9 	bl	8009f90 <floor>
 800119e:	ec53 2b10 	vmov	r2, r3, d0
 80011a2:	4610      	mov	r0, r2
 80011a4:	4619      	mov	r1, r3
 80011a6:	f7ff fcdf 	bl	8000b68 <__aeabi_d2iz>
 80011aa:	4603      	mov	r3, r0
 80011ac:	617b      	str	r3, [r7, #20]
	int yInt2 = trunc((tv.vec.y - yInt1) * 100);
 80011ae:	e9d7 4510 	ldrd	r4, r5, [r7, #64]	; 0x40
 80011b2:	6978      	ldr	r0, [r7, #20]
 80011b4:	f7ff f9be 	bl	8000534 <__aeabi_i2d>
 80011b8:	4602      	mov	r2, r0
 80011ba:	460b      	mov	r3, r1
 80011bc:	4620      	mov	r0, r4
 80011be:	4629      	mov	r1, r5
 80011c0:	f7ff f86a 	bl	8000298 <__aeabi_dsub>
 80011c4:	4602      	mov	r2, r0
 80011c6:	460b      	mov	r3, r1
 80011c8:	4610      	mov	r0, r2
 80011ca:	4619      	mov	r1, r3
 80011cc:	f04f 0200 	mov.w	r2, #0
 80011d0:	4b30      	ldr	r3, [pc, #192]	; (8001294 <tvec_toString+0x184>)
 80011d2:	f7ff fa19 	bl	8000608 <__aeabi_dmul>
 80011d6:	4602      	mov	r2, r0
 80011d8:	460b      	mov	r3, r1
 80011da:	ec43 2b17 	vmov	d7, r2, r3
 80011de:	eeb0 0a47 	vmov.f32	s0, s14
 80011e2:	eef0 0a67 	vmov.f32	s1, s15
 80011e6:	f008 ff53 	bl	800a090 <trunc>
 80011ea:	ec53 2b10 	vmov	r2, r3, d0
 80011ee:	4610      	mov	r0, r2
 80011f0:	4619      	mov	r1, r3
 80011f2:	f7ff fcb9 	bl	8000b68 <__aeabi_d2iz>
 80011f6:	4603      	mov	r3, r0
 80011f8:	613b      	str	r3, [r7, #16]

	int zInt1 = floor(tv.vec.z);
 80011fa:	ed97 7b12 	vldr	d7, [r7, #72]	; 0x48
 80011fe:	eeb0 0a47 	vmov.f32	s0, s14
 8001202:	eef0 0a67 	vmov.f32	s1, s15
 8001206:	f008 fec3 	bl	8009f90 <floor>
 800120a:	ec53 2b10 	vmov	r2, r3, d0
 800120e:	4610      	mov	r0, r2
 8001210:	4619      	mov	r1, r3
 8001212:	f7ff fca9 	bl	8000b68 <__aeabi_d2iz>
 8001216:	4603      	mov	r3, r0
 8001218:	60fb      	str	r3, [r7, #12]
	int zInt2 = trunc((tv.vec.z - zInt1) * 100);
 800121a:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	; 0x48
 800121e:	68f8      	ldr	r0, [r7, #12]
 8001220:	f7ff f988 	bl	8000534 <__aeabi_i2d>
 8001224:	4602      	mov	r2, r0
 8001226:	460b      	mov	r3, r1
 8001228:	4620      	mov	r0, r4
 800122a:	4629      	mov	r1, r5
 800122c:	f7ff f834 	bl	8000298 <__aeabi_dsub>
 8001230:	4602      	mov	r2, r0
 8001232:	460b      	mov	r3, r1
 8001234:	4610      	mov	r0, r2
 8001236:	4619      	mov	r1, r3
 8001238:	f04f 0200 	mov.w	r2, #0
 800123c:	4b15      	ldr	r3, [pc, #84]	; (8001294 <tvec_toString+0x184>)
 800123e:	f7ff f9e3 	bl	8000608 <__aeabi_dmul>
 8001242:	4602      	mov	r2, r0
 8001244:	460b      	mov	r3, r1
 8001246:	ec43 2b17 	vmov	d7, r2, r3
 800124a:	eeb0 0a47 	vmov.f32	s0, s14
 800124e:	eef0 0a67 	vmov.f32	s1, s15
 8001252:	f008 ff1d 	bl	800a090 <trunc>
 8001256:	ec53 2b10 	vmov	r2, r3, d0
 800125a:	4610      	mov	r0, r2
 800125c:	4619      	mov	r1, r3
 800125e:	f7ff fc83 	bl	8000b68 <__aeabi_d2iz>
 8001262:	4603      	mov	r3, r0
 8001264:	60bb      	str	r3, [r7, #8]

	sprintf(out, "%lu: Yaw: %d.%02d, Roll: %d.%02d, Pitch: %d.%02d\r\n",
 8001266:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8001268:	68bb      	ldr	r3, [r7, #8]
 800126a:	9304      	str	r3, [sp, #16]
 800126c:	68fb      	ldr	r3, [r7, #12]
 800126e:	9303      	str	r3, [sp, #12]
 8001270:	693b      	ldr	r3, [r7, #16]
 8001272:	9302      	str	r3, [sp, #8]
 8001274:	697b      	ldr	r3, [r7, #20]
 8001276:	9301      	str	r3, [sp, #4]
 8001278:	69bb      	ldr	r3, [r7, #24]
 800127a:	9300      	str	r3, [sp, #0]
 800127c:	69fb      	ldr	r3, [r7, #28]
 800127e:	4906      	ldr	r1, [pc, #24]	; (8001298 <tvec_toString+0x188>)
 8001280:	6878      	ldr	r0, [r7, #4]
 8001282:	f007 fd41 	bl	8008d08 <siprintf>
            tv.t, xInt1, xInt2, yInt1, yInt2, zInt1, zInt2);
}
 8001286:	bf00      	nop
 8001288:	3720      	adds	r7, #32
 800128a:	46bd      	mov	sp, r7
 800128c:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 8001290:	b002      	add	sp, #8
 8001292:	4770      	bx	lr
 8001294:	40590000 	.word	0x40590000
 8001298:	0800a5dc 	.word	0x0800a5dc

0800129c <_write>:

int _write(int file, char *ptr, int len)
{
 800129c:	b580      	push	{r7, lr}
 800129e:	b084      	sub	sp, #16
 80012a0:	af00      	add	r7, sp, #0
 80012a2:	60f8      	str	r0, [r7, #12]
 80012a4:	60b9      	str	r1, [r7, #8]
 80012a6:	607a      	str	r2, [r7, #4]
	HAL_UART_Transmit(&huart2, (uint8_t*)ptr, len, HAL_MAX_DELAY);
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	b29a      	uxth	r2, r3
 80012ac:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80012b0:	68b9      	ldr	r1, [r7, #8]
 80012b2:	4804      	ldr	r0, [pc, #16]	; (80012c4 <_write+0x28>)
 80012b4:	f003 fac1 	bl	800483a <HAL_UART_Transmit>
	return len;
 80012b8:	687b      	ldr	r3, [r7, #4]
}
 80012ba:	4618      	mov	r0, r3
 80012bc:	3710      	adds	r7, #16
 80012be:	46bd      	mov	sp, r7
 80012c0:	bd80      	pop	{r7, pc}
 80012c2:	bf00      	nop
 80012c4:	200000f4 	.word	0x200000f4

080012c8 <dSign>:

  return ch;
}

double dSign(double x)
{
 80012c8:	b580      	push	{r7, lr}
 80012ca:	b082      	sub	sp, #8
 80012cc:	af00      	add	r7, sp, #0
 80012ce:	ed87 0b00 	vstr	d0, [r7]
	if (x > 0) return 1.0;
 80012d2:	f04f 0200 	mov.w	r2, #0
 80012d6:	f04f 0300 	mov.w	r3, #0
 80012da:	e9d7 0100 	ldrd	r0, r1, [r7]
 80012de:	f7ff fc23 	bl	8000b28 <__aeabi_dcmpgt>
 80012e2:	4603      	mov	r3, r0
 80012e4:	2b00      	cmp	r3, #0
 80012e6:	d003      	beq.n	80012f0 <dSign+0x28>
 80012e8:	f04f 0200 	mov.w	r2, #0
 80012ec:	4b0e      	ldr	r3, [pc, #56]	; (8001328 <dSign+0x60>)
 80012ee:	e012      	b.n	8001316 <dSign+0x4e>
	if (x < 0) return -1.0;
 80012f0:	f04f 0200 	mov.w	r2, #0
 80012f4:	f04f 0300 	mov.w	r3, #0
 80012f8:	e9d7 0100 	ldrd	r0, r1, [r7]
 80012fc:	f7ff fbf6 	bl	8000aec <__aeabi_dcmplt>
 8001300:	4603      	mov	r3, r0
 8001302:	2b00      	cmp	r3, #0
 8001304:	d003      	beq.n	800130e <dSign+0x46>
 8001306:	f04f 0200 	mov.w	r2, #0
 800130a:	4b08      	ldr	r3, [pc, #32]	; (800132c <dSign+0x64>)
 800130c:	e003      	b.n	8001316 <dSign+0x4e>
	return 0.0;
 800130e:	f04f 0200 	mov.w	r2, #0
 8001312:	f04f 0300 	mov.w	r3, #0
}
 8001316:	ec43 2b17 	vmov	d7, r2, r3
 800131a:	eeb0 0a47 	vmov.f32	s0, s14
 800131e:	eef0 0a67 	vmov.f32	s1, s15
 8001322:	3708      	adds	r7, #8
 8001324:	46bd      	mov	sp, r7
 8001326:	bd80      	pop	{r7, pc}
 8001328:	3ff00000 	.word	0x3ff00000
 800132c:	bff00000 	.word	0xbff00000

08001330 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001330:	b580      	push	{r7, lr}
 8001332:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001334:	f001 f83a 	bl	80023ac <HAL_Init>

  /* USER CODE BEGIN Init */
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001338:	f000 f85c 	bl	80013f4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800133c:	f000 f91c 	bl	8001578 <MX_GPIO_Init>
  MX_I2C1_Init();
 8001340:	f000 f8c2 	bl	80014c8 <MX_I2C1_Init>
  MX_USART2_UART_Init();
 8001344:	f000 f8ee 	bl	8001524 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  bno055_assignI2C(&hi2c1);
 8001348:	481a      	ldr	r0, [pc, #104]	; (80013b4 <main+0x84>)
 800134a:	f7ff fdb7 	bl	8000ebc <bno055_assignI2C>
  bno055_setup();
 800134e:	f000 fe7d 	bl	800204c <bno055_setup>
  bno055_setOperationModeNDOF();
 8001352:	f000 fe67 	bl	8002024 <bno055_setOperationModeNDOF>
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8001356:	f003 fe29 	bl	8004fac <osKernelInitialize>
  /* Create the mutex(es) */
  /* creation of globalPos */
  globalPosHandle = osMutexNew(&globalPos_attributes);
 800135a:	4817      	ldr	r0, [pc, #92]	; (80013b8 <main+0x88>)
 800135c:	f004 f838 	bl	80053d0 <osMutexNew>
 8001360:	4603      	mov	r3, r0
 8001362:	4a16      	ldr	r2, [pc, #88]	; (80013bc <main+0x8c>)
 8001364:	6013      	str	r3, [r2, #0]

  /* creation of motorCommand */
  motorCommandHandle = osMutexNew(&motorCommand_attributes);
 8001366:	4816      	ldr	r0, [pc, #88]	; (80013c0 <main+0x90>)
 8001368:	f004 f832 	bl	80053d0 <osMutexNew>
 800136c:	4603      	mov	r3, r0
 800136e:	4a15      	ldr	r2, [pc, #84]	; (80013c4 <main+0x94>)
 8001370:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8001372:	4a15      	ldr	r2, [pc, #84]	; (80013c8 <main+0x98>)
 8001374:	2100      	movs	r1, #0
 8001376:	4815      	ldr	r0, [pc, #84]	; (80013cc <main+0x9c>)
 8001378:	f003 fe62 	bl	8005040 <osThreadNew>
 800137c:	4603      	mov	r3, r0
 800137e:	4a14      	ldr	r2, [pc, #80]	; (80013d0 <main+0xa0>)
 8001380:	6013      	str	r3, [r2, #0]

  /* creation of readIMU */
  readIMUHandle = osThreadNew(ReadIMU, NULL, &readIMU_attributes);
 8001382:	4a14      	ldr	r2, [pc, #80]	; (80013d4 <main+0xa4>)
 8001384:	2100      	movs	r1, #0
 8001386:	4814      	ldr	r0, [pc, #80]	; (80013d8 <main+0xa8>)
 8001388:	f003 fe5a 	bl	8005040 <osThreadNew>
 800138c:	4603      	mov	r3, r0
 800138e:	4a13      	ldr	r2, [pc, #76]	; (80013dc <main+0xac>)
 8001390:	6013      	str	r3, [r2, #0]

  /* creation of evaluatePID */
  evaluatePIDHandle = osThreadNew(EvaluatePID, NULL, &evaluatePID_attributes);
 8001392:	4a13      	ldr	r2, [pc, #76]	; (80013e0 <main+0xb0>)
 8001394:	2100      	movs	r1, #0
 8001396:	4813      	ldr	r0, [pc, #76]	; (80013e4 <main+0xb4>)
 8001398:	f003 fe52 	bl	8005040 <osThreadNew>
 800139c:	4603      	mov	r3, r0
 800139e:	4a12      	ldr	r2, [pc, #72]	; (80013e8 <main+0xb8>)
 80013a0:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* creation of newOrientation */
  newOrientationHandle = osEventFlagsNew(&newOrientation_attributes);
 80013a2:	4812      	ldr	r0, [pc, #72]	; (80013ec <main+0xbc>)
 80013a4:	f003 fef9 	bl	800519a <osEventFlagsNew>
 80013a8:	4603      	mov	r3, r0
 80013aa:	4a11      	ldr	r2, [pc, #68]	; (80013f0 <main+0xc0>)
 80013ac:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 80013ae:	f003 fe21 	bl	8004ff4 <osKernelStart>
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80013b2:	e7fe      	b.n	80013b2 <main+0x82>
 80013b4:	200000a0 	.word	0x200000a0
 80013b8:	0800a6d0 	.word	0x0800a6d0
 80013bc:	20000144 	.word	0x20000144
 80013c0:	0800a6e0 	.word	0x0800a6e0
 80013c4:	20000148 	.word	0x20000148
 80013c8:	0800a664 	.word	0x0800a664
 80013cc:	08001655 	.word	0x08001655
 80013d0:	20000138 	.word	0x20000138
 80013d4:	0800a688 	.word	0x0800a688
 80013d8:	08001711 	.word	0x08001711
 80013dc:	2000013c 	.word	0x2000013c
 80013e0:	0800a6ac 	.word	0x0800a6ac
 80013e4:	080017c9 	.word	0x080017c9
 80013e8:	20000140 	.word	0x20000140
 80013ec:	0800a6f0 	.word	0x0800a6f0
 80013f0:	2000014c 	.word	0x2000014c

080013f4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80013f4:	b580      	push	{r7, lr}
 80013f6:	b094      	sub	sp, #80	; 0x50
 80013f8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80013fa:	f107 0320 	add.w	r3, r7, #32
 80013fe:	2230      	movs	r2, #48	; 0x30
 8001400:	2100      	movs	r1, #0
 8001402:	4618      	mov	r0, r3
 8001404:	f007 fbea 	bl	8008bdc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001408:	f107 030c 	add.w	r3, r7, #12
 800140c:	2200      	movs	r2, #0
 800140e:	601a      	str	r2, [r3, #0]
 8001410:	605a      	str	r2, [r3, #4]
 8001412:	609a      	str	r2, [r3, #8]
 8001414:	60da      	str	r2, [r3, #12]
 8001416:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001418:	2300      	movs	r3, #0
 800141a:	60bb      	str	r3, [r7, #8]
 800141c:	4b28      	ldr	r3, [pc, #160]	; (80014c0 <SystemClock_Config+0xcc>)
 800141e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001420:	4a27      	ldr	r2, [pc, #156]	; (80014c0 <SystemClock_Config+0xcc>)
 8001422:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001426:	6413      	str	r3, [r2, #64]	; 0x40
 8001428:	4b25      	ldr	r3, [pc, #148]	; (80014c0 <SystemClock_Config+0xcc>)
 800142a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800142c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001430:	60bb      	str	r3, [r7, #8]
 8001432:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8001434:	2300      	movs	r3, #0
 8001436:	607b      	str	r3, [r7, #4]
 8001438:	4b22      	ldr	r3, [pc, #136]	; (80014c4 <SystemClock_Config+0xd0>)
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001440:	4a20      	ldr	r2, [pc, #128]	; (80014c4 <SystemClock_Config+0xd0>)
 8001442:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001446:	6013      	str	r3, [r2, #0]
 8001448:	4b1e      	ldr	r3, [pc, #120]	; (80014c4 <SystemClock_Config+0xd0>)
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001450:	607b      	str	r3, [r7, #4]
 8001452:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001454:	2302      	movs	r3, #2
 8001456:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001458:	2301      	movs	r3, #1
 800145a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800145c:	2310      	movs	r3, #16
 800145e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001460:	2302      	movs	r3, #2
 8001462:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001464:	2300      	movs	r3, #0
 8001466:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001468:	2308      	movs	r3, #8
 800146a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 64;
 800146c:	2340      	movs	r3, #64	; 0x40
 800146e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001470:	2302      	movs	r3, #2
 8001472:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8001474:	2307      	movs	r3, #7
 8001476:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001478:	f107 0320 	add.w	r3, r7, #32
 800147c:	4618      	mov	r0, r3
 800147e:	f002 fa45 	bl	800390c <HAL_RCC_OscConfig>
 8001482:	4603      	mov	r3, r0
 8001484:	2b00      	cmp	r3, #0
 8001486:	d001      	beq.n	800148c <SystemClock_Config+0x98>
  {
    Error_Handler();
 8001488:	f000 fb88 	bl	8001b9c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800148c:	230f      	movs	r3, #15
 800148e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001490:	2302      	movs	r3, #2
 8001492:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001494:	2300      	movs	r3, #0
 8001496:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001498:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800149c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800149e:	2300      	movs	r3, #0
 80014a0:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80014a2:	f107 030c 	add.w	r3, r7, #12
 80014a6:	2102      	movs	r1, #2
 80014a8:	4618      	mov	r0, r3
 80014aa:	f002 fca7 	bl	8003dfc <HAL_RCC_ClockConfig>
 80014ae:	4603      	mov	r3, r0
 80014b0:	2b00      	cmp	r3, #0
 80014b2:	d001      	beq.n	80014b8 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 80014b4:	f000 fb72 	bl	8001b9c <Error_Handler>
  }
}
 80014b8:	bf00      	nop
 80014ba:	3750      	adds	r7, #80	; 0x50
 80014bc:	46bd      	mov	sp, r7
 80014be:	bd80      	pop	{r7, pc}
 80014c0:	40023800 	.word	0x40023800
 80014c4:	40007000 	.word	0x40007000

080014c8 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80014c8:	b580      	push	{r7, lr}
 80014ca:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80014cc:	4b12      	ldr	r3, [pc, #72]	; (8001518 <MX_I2C1_Init+0x50>)
 80014ce:	4a13      	ldr	r2, [pc, #76]	; (800151c <MX_I2C1_Init+0x54>)
 80014d0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80014d2:	4b11      	ldr	r3, [pc, #68]	; (8001518 <MX_I2C1_Init+0x50>)
 80014d4:	4a12      	ldr	r2, [pc, #72]	; (8001520 <MX_I2C1_Init+0x58>)
 80014d6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80014d8:	4b0f      	ldr	r3, [pc, #60]	; (8001518 <MX_I2C1_Init+0x50>)
 80014da:	2200      	movs	r2, #0
 80014dc:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80014de:	4b0e      	ldr	r3, [pc, #56]	; (8001518 <MX_I2C1_Init+0x50>)
 80014e0:	2200      	movs	r2, #0
 80014e2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80014e4:	4b0c      	ldr	r3, [pc, #48]	; (8001518 <MX_I2C1_Init+0x50>)
 80014e6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80014ea:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80014ec:	4b0a      	ldr	r3, [pc, #40]	; (8001518 <MX_I2C1_Init+0x50>)
 80014ee:	2200      	movs	r2, #0
 80014f0:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80014f2:	4b09      	ldr	r3, [pc, #36]	; (8001518 <MX_I2C1_Init+0x50>)
 80014f4:	2200      	movs	r2, #0
 80014f6:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80014f8:	4b07      	ldr	r3, [pc, #28]	; (8001518 <MX_I2C1_Init+0x50>)
 80014fa:	2200      	movs	r2, #0
 80014fc:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80014fe:	4b06      	ldr	r3, [pc, #24]	; (8001518 <MX_I2C1_Init+0x50>)
 8001500:	2200      	movs	r2, #0
 8001502:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001504:	4804      	ldr	r0, [pc, #16]	; (8001518 <MX_I2C1_Init+0x50>)
 8001506:	f001 fa51 	bl	80029ac <HAL_I2C_Init>
 800150a:	4603      	mov	r3, r0
 800150c:	2b00      	cmp	r3, #0
 800150e:	d001      	beq.n	8001514 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001510:	f000 fb44 	bl	8001b9c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001514:	bf00      	nop
 8001516:	bd80      	pop	{r7, pc}
 8001518:	200000a0 	.word	0x200000a0
 800151c:	40005400 	.word	0x40005400
 8001520:	000186a0 	.word	0x000186a0

08001524 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001524:	b580      	push	{r7, lr}
 8001526:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001528:	4b11      	ldr	r3, [pc, #68]	; (8001570 <MX_USART2_UART_Init+0x4c>)
 800152a:	4a12      	ldr	r2, [pc, #72]	; (8001574 <MX_USART2_UART_Init+0x50>)
 800152c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800152e:	4b10      	ldr	r3, [pc, #64]	; (8001570 <MX_USART2_UART_Init+0x4c>)
 8001530:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001534:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001536:	4b0e      	ldr	r3, [pc, #56]	; (8001570 <MX_USART2_UART_Init+0x4c>)
 8001538:	2200      	movs	r2, #0
 800153a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800153c:	4b0c      	ldr	r3, [pc, #48]	; (8001570 <MX_USART2_UART_Init+0x4c>)
 800153e:	2200      	movs	r2, #0
 8001540:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001542:	4b0b      	ldr	r3, [pc, #44]	; (8001570 <MX_USART2_UART_Init+0x4c>)
 8001544:	2200      	movs	r2, #0
 8001546:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001548:	4b09      	ldr	r3, [pc, #36]	; (8001570 <MX_USART2_UART_Init+0x4c>)
 800154a:	220c      	movs	r2, #12
 800154c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800154e:	4b08      	ldr	r3, [pc, #32]	; (8001570 <MX_USART2_UART_Init+0x4c>)
 8001550:	2200      	movs	r2, #0
 8001552:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001554:	4b06      	ldr	r3, [pc, #24]	; (8001570 <MX_USART2_UART_Init+0x4c>)
 8001556:	2200      	movs	r2, #0
 8001558:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800155a:	4805      	ldr	r0, [pc, #20]	; (8001570 <MX_USART2_UART_Init+0x4c>)
 800155c:	f003 f920 	bl	80047a0 <HAL_UART_Init>
 8001560:	4603      	mov	r3, r0
 8001562:	2b00      	cmp	r3, #0
 8001564:	d001      	beq.n	800156a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001566:	f000 fb19 	bl	8001b9c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800156a:	bf00      	nop
 800156c:	bd80      	pop	{r7, pc}
 800156e:	bf00      	nop
 8001570:	200000f4 	.word	0x200000f4
 8001574:	40004400 	.word	0x40004400

08001578 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001578:	b580      	push	{r7, lr}
 800157a:	b08a      	sub	sp, #40	; 0x28
 800157c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800157e:	f107 0314 	add.w	r3, r7, #20
 8001582:	2200      	movs	r2, #0
 8001584:	601a      	str	r2, [r3, #0]
 8001586:	605a      	str	r2, [r3, #4]
 8001588:	609a      	str	r2, [r3, #8]
 800158a:	60da      	str	r2, [r3, #12]
 800158c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800158e:	2300      	movs	r3, #0
 8001590:	613b      	str	r3, [r7, #16]
 8001592:	4b2d      	ldr	r3, [pc, #180]	; (8001648 <MX_GPIO_Init+0xd0>)
 8001594:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001596:	4a2c      	ldr	r2, [pc, #176]	; (8001648 <MX_GPIO_Init+0xd0>)
 8001598:	f043 0304 	orr.w	r3, r3, #4
 800159c:	6313      	str	r3, [r2, #48]	; 0x30
 800159e:	4b2a      	ldr	r3, [pc, #168]	; (8001648 <MX_GPIO_Init+0xd0>)
 80015a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015a2:	f003 0304 	and.w	r3, r3, #4
 80015a6:	613b      	str	r3, [r7, #16]
 80015a8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80015aa:	2300      	movs	r3, #0
 80015ac:	60fb      	str	r3, [r7, #12]
 80015ae:	4b26      	ldr	r3, [pc, #152]	; (8001648 <MX_GPIO_Init+0xd0>)
 80015b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015b2:	4a25      	ldr	r2, [pc, #148]	; (8001648 <MX_GPIO_Init+0xd0>)
 80015b4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80015b8:	6313      	str	r3, [r2, #48]	; 0x30
 80015ba:	4b23      	ldr	r3, [pc, #140]	; (8001648 <MX_GPIO_Init+0xd0>)
 80015bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80015c2:	60fb      	str	r3, [r7, #12]
 80015c4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80015c6:	2300      	movs	r3, #0
 80015c8:	60bb      	str	r3, [r7, #8]
 80015ca:	4b1f      	ldr	r3, [pc, #124]	; (8001648 <MX_GPIO_Init+0xd0>)
 80015cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015ce:	4a1e      	ldr	r2, [pc, #120]	; (8001648 <MX_GPIO_Init+0xd0>)
 80015d0:	f043 0301 	orr.w	r3, r3, #1
 80015d4:	6313      	str	r3, [r2, #48]	; 0x30
 80015d6:	4b1c      	ldr	r3, [pc, #112]	; (8001648 <MX_GPIO_Init+0xd0>)
 80015d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015da:	f003 0301 	and.w	r3, r3, #1
 80015de:	60bb      	str	r3, [r7, #8]
 80015e0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80015e2:	2300      	movs	r3, #0
 80015e4:	607b      	str	r3, [r7, #4]
 80015e6:	4b18      	ldr	r3, [pc, #96]	; (8001648 <MX_GPIO_Init+0xd0>)
 80015e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015ea:	4a17      	ldr	r2, [pc, #92]	; (8001648 <MX_GPIO_Init+0xd0>)
 80015ec:	f043 0302 	orr.w	r3, r3, #2
 80015f0:	6313      	str	r3, [r2, #48]	; 0x30
 80015f2:	4b15      	ldr	r3, [pc, #84]	; (8001648 <MX_GPIO_Init+0xd0>)
 80015f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015f6:	f003 0302 	and.w	r3, r3, #2
 80015fa:	607b      	str	r3, [r7, #4]
 80015fc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80015fe:	2200      	movs	r2, #0
 8001600:	2120      	movs	r1, #32
 8001602:	4812      	ldr	r0, [pc, #72]	; (800164c <MX_GPIO_Init+0xd4>)
 8001604:	f001 f99e 	bl	8002944 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001608:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800160c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800160e:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8001612:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001614:	2300      	movs	r3, #0
 8001616:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001618:	f107 0314 	add.w	r3, r7, #20
 800161c:	4619      	mov	r1, r3
 800161e:	480c      	ldr	r0, [pc, #48]	; (8001650 <MX_GPIO_Init+0xd8>)
 8001620:	f001 f80c 	bl	800263c <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8001624:	2320      	movs	r3, #32
 8001626:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001628:	2301      	movs	r3, #1
 800162a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800162c:	2300      	movs	r3, #0
 800162e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001630:	2300      	movs	r3, #0
 8001632:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8001634:	f107 0314 	add.w	r3, r7, #20
 8001638:	4619      	mov	r1, r3
 800163a:	4804      	ldr	r0, [pc, #16]	; (800164c <MX_GPIO_Init+0xd4>)
 800163c:	f000 fffe 	bl	800263c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001640:	bf00      	nop
 8001642:	3728      	adds	r7, #40	; 0x28
 8001644:	46bd      	mov	sp, r7
 8001646:	bd80      	pop	{r7, pc}
 8001648:	40023800 	.word	0x40023800
 800164c:	40020000 	.word	0x40020000
 8001650:	40020800 	.word	0x40020800

08001654 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8001654:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001656:	b0bd      	sub	sp, #244	; 0xf4
 8001658:	af08      	add	r7, sp, #32
 800165a:	6078      	str	r0, [r7, #4]
  char orientation[100];
  char motorCommand[100];
  /* Infinite loop */
  for(;;)
  {
    HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 800165c:	2120      	movs	r1, #32
 800165e:	4826      	ldr	r0, [pc, #152]	; (80016f8 <StartDefaultTask+0xa4>)
 8001660:	f001 f989 	bl	8002976 <HAL_GPIO_TogglePin>

    osMutexAcquire(globalPosHandle, 200);
 8001664:	4b25      	ldr	r3, [pc, #148]	; (80016fc <StartDefaultTask+0xa8>)
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	21c8      	movs	r1, #200	; 0xc8
 800166a:	4618      	mov	r0, r3
 800166c:	f003 ff36 	bl	80054dc <osMutexAcquire>
    tvec_toString(orientation, tvPos);
 8001670:	4e23      	ldr	r6, [pc, #140]	; (8001700 <StartDefaultTask+0xac>)
 8001672:	f107 0c6c 	add.w	ip, r7, #108	; 0x6c
 8001676:	466d      	mov	r5, sp
 8001678:	f106 0408 	add.w	r4, r6, #8
 800167c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800167e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001680:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8001684:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8001688:	e896 000c 	ldmia.w	r6, {r2, r3}
 800168c:	4660      	mov	r0, ip
 800168e:	f7ff fd3f 	bl	8001110 <tvec_toString>
    osMutexRelease(globalPosHandle);
 8001692:	4b1a      	ldr	r3, [pc, #104]	; (80016fc <StartDefaultTask+0xa8>)
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	4618      	mov	r0, r3
 8001698:	f003 ff6b 	bl	8005572 <osMutexRelease>

    osMutexAcquire(motorCommandHandle, 200);
 800169c:	4b19      	ldr	r3, [pc, #100]	; (8001704 <StartDefaultTask+0xb0>)
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	21c8      	movs	r1, #200	; 0xc8
 80016a2:	4618      	mov	r0, r3
 80016a4:	f003 ff1a 	bl	80054dc <osMutexAcquire>
    tvec_toString(motorCommand, tvMotorCommand);
 80016a8:	4e17      	ldr	r6, [pc, #92]	; (8001708 <StartDefaultTask+0xb4>)
 80016aa:	f107 0c08 	add.w	ip, r7, #8
 80016ae:	466d      	mov	r5, sp
 80016b0:	f106 0408 	add.w	r4, r6, #8
 80016b4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80016b6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80016b8:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80016bc:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 80016c0:	e896 000c 	ldmia.w	r6, {r2, r3}
 80016c4:	4660      	mov	r0, ip
 80016c6:	f7ff fd23 	bl	8001110 <tvec_toString>
    osMutexRelease(motorCommandHandle);
 80016ca:	4b0e      	ldr	r3, [pc, #56]	; (8001704 <StartDefaultTask+0xb0>)
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	4618      	mov	r0, r3
 80016d0:	f003 ff4f 	bl	8005572 <osMutexRelease>
    
    HAL_UART_Transmit(&huart2, (uint8_t*)motorCommand, sizeof(uint8_t)*strlen(motorCommand), HAL_MAX_DELAY);
 80016d4:	f107 0308 	add.w	r3, r7, #8
 80016d8:	4618      	mov	r0, r3
 80016da:	f7fe fd81 	bl	80001e0 <strlen>
 80016de:	4603      	mov	r3, r0
 80016e0:	b29a      	uxth	r2, r3
 80016e2:	f107 0108 	add.w	r1, r7, #8
 80016e6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80016ea:	4808      	ldr	r0, [pc, #32]	; (800170c <StartDefaultTask+0xb8>)
 80016ec:	f003 f8a5 	bl	800483a <HAL_UART_Transmit>
    
    osDelay(200);
 80016f0:	20c8      	movs	r0, #200	; 0xc8
 80016f2:	f003 fd37 	bl	8005164 <osDelay>
    HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 80016f6:	e7b1      	b.n	800165c <StartDefaultTask+0x8>
 80016f8:	40020000 	.word	0x40020000
 80016fc:	20000144 	.word	0x20000144
 8001700:	20000150 	.word	0x20000150
 8001704:	20000148 	.word	0x20000148
 8001708:	20000178 	.word	0x20000178
 800170c:	200000f4 	.word	0x200000f4

08001710 <ReadIMU>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_ReadIMU */
void ReadIMU(void *argument)
{
 8001710:	b590      	push	{r4, r7, lr}
 8001712:	b083      	sub	sp, #12
 8001714:	af00      	add	r7, sp, #0
 8001716:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN ReadIMU */

  /* Infinite loop */
  for(;;)
  {
    osMutexAcquire(globalPosHandle, 0);
 8001718:	4b26      	ldr	r3, [pc, #152]	; (80017b4 <ReadIMU+0xa4>)
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	2100      	movs	r1, #0
 800171e:	4618      	mov	r0, r3
 8001720:	f003 fedc 	bl	80054dc <osMutexAcquire>
    tvPos.vec = bno055_getVectorEuler();
 8001724:	4c24      	ldr	r4, [pc, #144]	; (80017b8 <ReadIMU+0xa8>)
 8001726:	f000 fdfd 	bl	8002324 <bno055_getVectorEuler>
 800172a:	eeb0 4a40 	vmov.f32	s8, s0
 800172e:	eef0 4a60 	vmov.f32	s9, s1
 8001732:	eeb0 5a41 	vmov.f32	s10, s2
 8001736:	eef0 5a61 	vmov.f32	s11, s3
 800173a:	eeb0 6a42 	vmov.f32	s12, s4
 800173e:	eef0 6a62 	vmov.f32	s13, s5
 8001742:	eeb0 7a43 	vmov.f32	s14, s6
 8001746:	eef0 7a63 	vmov.f32	s15, s7
 800174a:	ed84 4b00 	vstr	d4, [r4]
 800174e:	ed84 5b02 	vstr	d5, [r4, #8]
 8001752:	ed84 6b04 	vstr	d6, [r4, #16]
 8001756:	ed84 7b06 	vstr	d7, [r4, #24]

    /* set yaw to between -180 and 180 */
    if (tvPos.vec.x > 180) tvPos.vec.x = tvPos.vec.x - 360;
 800175a:	4b17      	ldr	r3, [pc, #92]	; (80017b8 <ReadIMU+0xa8>)
 800175c:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8001760:	f04f 0200 	mov.w	r2, #0
 8001764:	4b15      	ldr	r3, [pc, #84]	; (80017bc <ReadIMU+0xac>)
 8001766:	f7ff f9df 	bl	8000b28 <__aeabi_dcmpgt>
 800176a:	4603      	mov	r3, r0
 800176c:	2b00      	cmp	r3, #0
 800176e:	d00c      	beq.n	800178a <ReadIMU+0x7a>
 8001770:	4b11      	ldr	r3, [pc, #68]	; (80017b8 <ReadIMU+0xa8>)
 8001772:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8001776:	f04f 0200 	mov.w	r2, #0
 800177a:	4b11      	ldr	r3, [pc, #68]	; (80017c0 <ReadIMU+0xb0>)
 800177c:	f7fe fd8c 	bl	8000298 <__aeabi_dsub>
 8001780:	4602      	mov	r2, r0
 8001782:	460b      	mov	r3, r1
 8001784:	490c      	ldr	r1, [pc, #48]	; (80017b8 <ReadIMU+0xa8>)
 8001786:	e9c1 2302 	strd	r2, r3, [r1, #8]

    tvPos.t = HAL_GetTick();
 800178a:	f000 fe45 	bl	8002418 <HAL_GetTick>
 800178e:	4603      	mov	r3, r0
 8001790:	4a09      	ldr	r2, [pc, #36]	; (80017b8 <ReadIMU+0xa8>)
 8001792:	6213      	str	r3, [r2, #32]
    osMutexRelease(globalPosHandle);
 8001794:	4b07      	ldr	r3, [pc, #28]	; (80017b4 <ReadIMU+0xa4>)
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	4618      	mov	r0, r3
 800179a:	f003 feea 	bl	8005572 <osMutexRelease>

    osEventFlagsSet(newOrientationHandle, 1);
 800179e:	4b09      	ldr	r3, [pc, #36]	; (80017c4 <ReadIMU+0xb4>)
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	2101      	movs	r1, #1
 80017a4:	4618      	mov	r0, r3
 80017a6:	f003 fd37 	bl	8005218 <osEventFlagsSet>

    osDelay(20);
 80017aa:	2014      	movs	r0, #20
 80017ac:	f003 fcda 	bl	8005164 <osDelay>
    osMutexAcquire(globalPosHandle, 0);
 80017b0:	e7b2      	b.n	8001718 <ReadIMU+0x8>
 80017b2:	bf00      	nop
 80017b4:	20000144 	.word	0x20000144
 80017b8:	20000150 	.word	0x20000150
 80017bc:	40668000 	.word	0x40668000
 80017c0:	40768000 	.word	0x40768000
 80017c4:	2000014c 	.word	0x2000014c

080017c8 <EvaluatePID>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_EvaluatePID */
void EvaluatePID(void *argument)
{
 80017c8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80017cc:	b0ba      	sub	sp, #232	; 0xe8
 80017ce:	af00      	add	r7, sp, #0
 80017d0:	60f8      	str	r0, [r7, #12]
  /* USER CODE BEGIN EvaluatePID */
  bno055_vector_t vCumulative = {0.0, 0.0, 0.0, 0.0};
 80017d2:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 80017d6:	2220      	movs	r2, #32
 80017d8:	2100      	movs	r1, #0
 80017da:	4618      	mov	r0, r3
 80017dc:	f007 f9fe 	bl	8008bdc <memset>
  bno055_vector_t vDerivative = {0.0, 0.0, 0.0, 0.0};
 80017e0:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 80017e4:	2220      	movs	r2, #32
 80017e6:	2100      	movs	r1, #0
 80017e8:	4618      	mov	r0, r3
 80017ea:	f007 f9f7 	bl	8008bdc <memset>

  /* Infinite loop */
  for(;;)
  {
    /* wait for a new orientation reading*/
    osEventFlagsWait(newOrientationHandle, 1, osFlagsWaitAll, osWaitForever);
 80017ee:	4bc4      	ldr	r3, [pc, #784]	; (8001b00 <EvaluatePID+0x338>)
 80017f0:	6818      	ldr	r0, [r3, #0]
 80017f2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80017f6:	2201      	movs	r2, #1
 80017f8:	2101      	movs	r1, #1
 80017fa:	f003 fd83 	bl	8005304 <osEventFlagsWait>
    osEventFlagsClear(newOrientationHandle, 1);
 80017fe:	4bc0      	ldr	r3, [pc, #768]	; (8001b00 <EvaluatePID+0x338>)
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	2101      	movs	r1, #1
 8001804:	4618      	mov	r0, r3
 8001806:	f003 fd4b 	bl	80052a0 <osEventFlagsClear>

    tvLastError = tvError;
 800180a:	f107 0450 	add.w	r4, r7, #80	; 0x50
 800180e:	f107 0578 	add.w	r5, r7, #120	; 0x78
 8001812:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001814:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001816:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001818:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800181a:	e895 0003 	ldmia.w	r5, {r0, r1}
 800181e:	e884 0003 	stmia.w	r4, {r0, r1}

    /* calculate error vector from current orientation */
    osMutexAcquire(globalPosHandle, 0);
 8001822:	4bb8      	ldr	r3, [pc, #736]	; (8001b04 <EvaluatePID+0x33c>)
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	2100      	movs	r1, #0
 8001828:	4618      	mov	r0, r3
 800182a:	f003 fe57 	bl	80054dc <osMutexAcquire>
    tvError.t = tvPos.t;
 800182e:	4bb6      	ldr	r3, [pc, #728]	; (8001b08 <EvaluatePID+0x340>)
 8001830:	6a1b      	ldr	r3, [r3, #32]
 8001832:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    tvError.vec.x = vPosSetpoint.x - tvPos.vec.x;
 8001836:	f04f 0000 	mov.w	r0, #0
 800183a:	f04f 0100 	mov.w	r1, #0
 800183e:	4bb2      	ldr	r3, [pc, #712]	; (8001b08 <EvaluatePID+0x340>)
 8001840:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8001844:	f7fe fd28 	bl	8000298 <__aeabi_dsub>
 8001848:	4602      	mov	r2, r0
 800184a:	460b      	mov	r3, r1
 800184c:	e9c7 2320 	strd	r2, r3, [r7, #128]	; 0x80

    tvError.vec.y = vPosSetpoint.y - tvPos.vec.y;
 8001850:	f04f 0000 	mov.w	r0, #0
 8001854:	f04f 0100 	mov.w	r1, #0
 8001858:	4bab      	ldr	r3, [pc, #684]	; (8001b08 <EvaluatePID+0x340>)
 800185a:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800185e:	f7fe fd1b 	bl	8000298 <__aeabi_dsub>
 8001862:	4602      	mov	r2, r0
 8001864:	460b      	mov	r3, r1
 8001866:	e9c7 2322 	strd	r2, r3, [r7, #136]	; 0x88
    tvError.vec.z = vPosSetpoint.z - tvPos.vec.z;
 800186a:	f04f 0000 	mov.w	r0, #0
 800186e:	f04f 0100 	mov.w	r1, #0
 8001872:	4ba5      	ldr	r3, [pc, #660]	; (8001b08 <EvaluatePID+0x340>)
 8001874:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8001878:	f7fe fd0e 	bl	8000298 <__aeabi_dsub>
 800187c:	4602      	mov	r2, r0
 800187e:	460b      	mov	r3, r1
 8001880:	e9c7 2324 	strd	r2, r3, [r7, #144]	; 0x90
    osMutexRelease(globalPosHandle);
 8001884:	4b9f      	ldr	r3, [pc, #636]	; (8001b04 <EvaluatePID+0x33c>)
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	4618      	mov	r0, r3
 800188a:	f003 fe72 	bl	8005572 <osMutexRelease>

    vError = tvError.vec;
 800188e:	f107 0430 	add.w	r4, r7, #48	; 0x30
 8001892:	f107 0578 	add.w	r5, r7, #120	; 0x78
 8001896:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001898:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800189a:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800189e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    vLastError = tvLastError.vec;
 80018a2:	f107 0410 	add.w	r4, r7, #16
 80018a6:	f107 0550 	add.w	r5, r7, #80	; 0x50
 80018aa:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80018ac:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80018ae:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80018b2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    dt = (tvError.t - tvLastError.t) / 1000.0;
 80018b6:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 80018ba:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80018bc:	1ad3      	subs	r3, r2, r3
 80018be:	4618      	mov	r0, r3
 80018c0:	f7fe fe28 	bl	8000514 <__aeabi_ui2d>
 80018c4:	f04f 0200 	mov.w	r2, #0
 80018c8:	4b90      	ldr	r3, [pc, #576]	; (8001b0c <EvaluatePID+0x344>)
 80018ca:	f7fe ffc7 	bl	800085c <__aeabi_ddiv>
 80018ce:	4602      	mov	r2, r0
 80018d0:	460b      	mov	r3, r1
 80018d2:	e9c7 2338 	strd	r2, r3, [r7, #224]	; 0xe0

    /* set cumulative error vector */
    vCumulative.x +=  vError.x;
 80018d6:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80018da:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80018de:	f7fe fcdd 	bl	800029c <__adddf3>
 80018e2:	4602      	mov	r2, r0
 80018e4:	460b      	mov	r3, r1
 80018e6:	e9c7 2332 	strd	r2, r3, [r7, #200]	; 0xc8
    vCumulative.y +=  vError.y;
 80018ea:	e9d7 0134 	ldrd	r0, r1, [r7, #208]	; 0xd0
 80018ee:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80018f2:	f7fe fcd3 	bl	800029c <__adddf3>
 80018f6:	4602      	mov	r2, r0
 80018f8:	460b      	mov	r3, r1
 80018fa:	e9c7 2334 	strd	r2, r3, [r7, #208]	; 0xd0
    vCumulative.z +=  vError.z;
 80018fe:	e9d7 0136 	ldrd	r0, r1, [r7, #216]	; 0xd8
 8001902:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8001906:	f7fe fcc9 	bl	800029c <__adddf3>
 800190a:	4602      	mov	r2, r0
 800190c:	460b      	mov	r3, r1
 800190e:	e9c7 2336 	strd	r2, r3, [r7, #216]	; 0xd8

    /* set derivative error vector */
    vDerivative.x = dSign(fmod(fabs(vError.x - vLastError.x),180)) / dt;
 8001912:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8001916:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800191a:	f7fe fcbd 	bl	8000298 <__aeabi_dsub>
 800191e:	4602      	mov	r2, r0
 8001920:	460b      	mov	r3, r1
 8001922:	603a      	str	r2, [r7, #0]
 8001924:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001928:	607b      	str	r3, [r7, #4]
 800192a:	ed9f 1b71 	vldr	d1, [pc, #452]	; 8001af0 <EvaluatePID+0x328>
 800192e:	ed97 0b00 	vldr	d0, [r7]
 8001932:	f008 fbdf 	bl	800a0f4 <fmod>
 8001936:	eeb0 7a40 	vmov.f32	s14, s0
 800193a:	eef0 7a60 	vmov.f32	s15, s1
 800193e:	eeb0 0a47 	vmov.f32	s0, s14
 8001942:	eef0 0a67 	vmov.f32	s1, s15
 8001946:	f7ff fcbf 	bl	80012c8 <dSign>
 800194a:	ec51 0b10 	vmov	r0, r1, d0
 800194e:	e9d7 2338 	ldrd	r2, r3, [r7, #224]	; 0xe0
 8001952:	f7fe ff83 	bl	800085c <__aeabi_ddiv>
 8001956:	4602      	mov	r2, r0
 8001958:	460b      	mov	r3, r1
 800195a:	e9c7 232a 	strd	r2, r3, [r7, #168]	; 0xa8
    vDerivative.y = dSign(fmod(fabs(vError.y - vLastError.y),180)) / dt;
 800195e:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8001962:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001966:	f7fe fc97 	bl	8000298 <__aeabi_dsub>
 800196a:	4602      	mov	r2, r0
 800196c:	460b      	mov	r3, r1
 800196e:	4692      	mov	sl, r2
 8001970:	f023 4b00 	bic.w	fp, r3, #2147483648	; 0x80000000
 8001974:	ed9f 1b5e 	vldr	d1, [pc, #376]	; 8001af0 <EvaluatePID+0x328>
 8001978:	ec4b ab10 	vmov	d0, sl, fp
 800197c:	f008 fbba 	bl	800a0f4 <fmod>
 8001980:	eeb0 7a40 	vmov.f32	s14, s0
 8001984:	eef0 7a60 	vmov.f32	s15, s1
 8001988:	eeb0 0a47 	vmov.f32	s0, s14
 800198c:	eef0 0a67 	vmov.f32	s1, s15
 8001990:	f7ff fc9a 	bl	80012c8 <dSign>
 8001994:	ec51 0b10 	vmov	r0, r1, d0
 8001998:	e9d7 2338 	ldrd	r2, r3, [r7, #224]	; 0xe0
 800199c:	f7fe ff5e 	bl	800085c <__aeabi_ddiv>
 80019a0:	4602      	mov	r2, r0
 80019a2:	460b      	mov	r3, r1
 80019a4:	e9c7 232c 	strd	r2, r3, [r7, #176]	; 0xb0
    vDerivative.z = dSign(fmod(fabs(vError.z - vLastError.z),180)) / dt;
 80019a8:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 80019ac:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80019b0:	f7fe fc72 	bl	8000298 <__aeabi_dsub>
 80019b4:	4602      	mov	r2, r0
 80019b6:	460b      	mov	r3, r1
 80019b8:	4690      	mov	r8, r2
 80019ba:	f023 4900 	bic.w	r9, r3, #2147483648	; 0x80000000
 80019be:	ed9f 1b4c 	vldr	d1, [pc, #304]	; 8001af0 <EvaluatePID+0x328>
 80019c2:	ec49 8b10 	vmov	d0, r8, r9
 80019c6:	f008 fb95 	bl	800a0f4 <fmod>
 80019ca:	eeb0 7a40 	vmov.f32	s14, s0
 80019ce:	eef0 7a60 	vmov.f32	s15, s1
 80019d2:	eeb0 0a47 	vmov.f32	s0, s14
 80019d6:	eef0 0a67 	vmov.f32	s1, s15
 80019da:	f7ff fc75 	bl	80012c8 <dSign>
 80019de:	ec51 0b10 	vmov	r0, r1, d0
 80019e2:	e9d7 2338 	ldrd	r2, r3, [r7, #224]	; 0xe0
 80019e6:	f7fe ff39 	bl	800085c <__aeabi_ddiv>
 80019ea:	4602      	mov	r2, r0
 80019ec:	460b      	mov	r3, r1
 80019ee:	e9c7 232e 	strd	r2, r3, [r7, #184]	; 0xb8

    /* set desired rate vector */
    osMutexAcquire(motorCommandHandle, 0);
 80019f2:	4b47      	ldr	r3, [pc, #284]	; (8001b10 <EvaluatePID+0x348>)
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	2100      	movs	r1, #0
 80019f8:	4618      	mov	r0, r3
 80019fa:	f003 fd6f 	bl	80054dc <osMutexAcquire>

    tvMotorCommand.t = HAL_GetTick() - tvError.t;
 80019fe:	f000 fd0b 	bl	8002418 <HAL_GetTick>
 8001a02:	4602      	mov	r2, r0
 8001a04:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8001a08:	1ad3      	subs	r3, r2, r3
 8001a0a:	4a42      	ldr	r2, [pc, #264]	; (8001b14 <EvaluatePID+0x34c>)
 8001a0c:	6213      	str	r3, [r2, #32]

    tvMotorCommand.vec.x = daGains[0] * vError.x
 8001a0e:	f04f 0000 	mov.w	r0, #0
 8001a12:	4941      	ldr	r1, [pc, #260]	; (8001b18 <EvaluatePID+0x350>)
 8001a14:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8001a18:	f7fe fdf6 	bl	8000608 <__aeabi_dmul>
 8001a1c:	4602      	mov	r2, r0
 8001a1e:	460b      	mov	r3, r1
 8001a20:	4614      	mov	r4, r2
 8001a22:	461d      	mov	r5, r3
                         + daGains[1] * vCumulative.x
 8001a24:	a134      	add	r1, pc, #208	; (adr r1, 8001af8 <EvaluatePID+0x330>)
 8001a26:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001a2a:	e9d7 2332 	ldrd	r2, r3, [r7, #200]	; 0xc8
 8001a2e:	f7fe fdeb 	bl	8000608 <__aeabi_dmul>
 8001a32:	4602      	mov	r2, r0
 8001a34:	460b      	mov	r3, r1
 8001a36:	4620      	mov	r0, r4
 8001a38:	4629      	mov	r1, r5
 8001a3a:	f7fe fc2f 	bl	800029c <__adddf3>
 8001a3e:	4602      	mov	r2, r0
 8001a40:	460b      	mov	r3, r1
 8001a42:	4614      	mov	r4, r2
 8001a44:	461d      	mov	r5, r3
                         + daGains[2] * vDerivative.x;
 8001a46:	a12c      	add	r1, pc, #176	; (adr r1, 8001af8 <EvaluatePID+0x330>)
 8001a48:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001a4c:	e9d7 232a 	ldrd	r2, r3, [r7, #168]	; 0xa8
 8001a50:	f7fe fdda 	bl	8000608 <__aeabi_dmul>
 8001a54:	4602      	mov	r2, r0
 8001a56:	460b      	mov	r3, r1
 8001a58:	4620      	mov	r0, r4
 8001a5a:	4629      	mov	r1, r5
 8001a5c:	f7fe fc1e 	bl	800029c <__adddf3>
 8001a60:	4602      	mov	r2, r0
 8001a62:	460b      	mov	r3, r1
    tvMotorCommand.vec.x = daGains[0] * vError.x
 8001a64:	492b      	ldr	r1, [pc, #172]	; (8001b14 <EvaluatePID+0x34c>)
 8001a66:	e9c1 2302 	strd	r2, r3, [r1, #8]

    tvMotorCommand.vec.y = daGains[0] * vError.y
 8001a6a:	f04f 0000 	mov.w	r0, #0
 8001a6e:	492a      	ldr	r1, [pc, #168]	; (8001b18 <EvaluatePID+0x350>)
 8001a70:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8001a74:	f7fe fdc8 	bl	8000608 <__aeabi_dmul>
 8001a78:	4602      	mov	r2, r0
 8001a7a:	460b      	mov	r3, r1
 8001a7c:	4614      	mov	r4, r2
 8001a7e:	461d      	mov	r5, r3
                         + daGains[1] * vCumulative.y
 8001a80:	a11d      	add	r1, pc, #116	; (adr r1, 8001af8 <EvaluatePID+0x330>)
 8001a82:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001a86:	e9d7 2334 	ldrd	r2, r3, [r7, #208]	; 0xd0
 8001a8a:	f7fe fdbd 	bl	8000608 <__aeabi_dmul>
 8001a8e:	4602      	mov	r2, r0
 8001a90:	460b      	mov	r3, r1
 8001a92:	4620      	mov	r0, r4
 8001a94:	4629      	mov	r1, r5
 8001a96:	f7fe fc01 	bl	800029c <__adddf3>
 8001a9a:	4602      	mov	r2, r0
 8001a9c:	460b      	mov	r3, r1
 8001a9e:	4614      	mov	r4, r2
 8001aa0:	461d      	mov	r5, r3
                         + daGains[2] * vDerivative.y;
 8001aa2:	a115      	add	r1, pc, #84	; (adr r1, 8001af8 <EvaluatePID+0x330>)
 8001aa4:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001aa8:	e9d7 232c 	ldrd	r2, r3, [r7, #176]	; 0xb0
 8001aac:	f7fe fdac 	bl	8000608 <__aeabi_dmul>
 8001ab0:	4602      	mov	r2, r0
 8001ab2:	460b      	mov	r3, r1
 8001ab4:	4620      	mov	r0, r4
 8001ab6:	4629      	mov	r1, r5
 8001ab8:	f7fe fbf0 	bl	800029c <__adddf3>
 8001abc:	4602      	mov	r2, r0
 8001abe:	460b      	mov	r3, r1
    tvMotorCommand.vec.y = daGains[0] * vError.y
 8001ac0:	4914      	ldr	r1, [pc, #80]	; (8001b14 <EvaluatePID+0x34c>)
 8001ac2:	e9c1 2304 	strd	r2, r3, [r1, #16]

    tvMotorCommand.vec.z = daGains[0] * vError.z
 8001ac6:	f04f 0000 	mov.w	r0, #0
 8001aca:	4913      	ldr	r1, [pc, #76]	; (8001b18 <EvaluatePID+0x350>)
 8001acc:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8001ad0:	f7fe fd9a 	bl	8000608 <__aeabi_dmul>
 8001ad4:	4602      	mov	r2, r0
 8001ad6:	460b      	mov	r3, r1
 8001ad8:	4614      	mov	r4, r2
 8001ada:	461d      	mov	r5, r3
                         + daGains[1] * vCumulative.z
 8001adc:	a106      	add	r1, pc, #24	; (adr r1, 8001af8 <EvaluatePID+0x330>)
 8001ade:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001ae2:	e9d7 2336 	ldrd	r2, r3, [r7, #216]	; 0xd8
 8001ae6:	f7fe fd8f 	bl	8000608 <__aeabi_dmul>
 8001aea:	4602      	mov	r2, r0
 8001aec:	e016      	b.n	8001b1c <EvaluatePID+0x354>
 8001aee:	bf00      	nop
 8001af0:	00000000 	.word	0x00000000
 8001af4:	40668000 	.word	0x40668000
 8001af8:	9999999a 	.word	0x9999999a
 8001afc:	3fb99999 	.word	0x3fb99999
 8001b00:	2000014c 	.word	0x2000014c
 8001b04:	20000144 	.word	0x20000144
 8001b08:	20000150 	.word	0x20000150
 8001b0c:	408f4000 	.word	0x408f4000
 8001b10:	20000148 	.word	0x20000148
 8001b14:	20000178 	.word	0x20000178
 8001b18:	3ff00000 	.word	0x3ff00000
 8001b1c:	460b      	mov	r3, r1
 8001b1e:	4620      	mov	r0, r4
 8001b20:	4629      	mov	r1, r5
 8001b22:	f7fe fbbb 	bl	800029c <__adddf3>
 8001b26:	4602      	mov	r2, r0
 8001b28:	460b      	mov	r3, r1
 8001b2a:	4614      	mov	r4, r2
 8001b2c:	461d      	mov	r5, r3
                         + daGains[2] * vDerivative.z;
 8001b2e:	a110      	add	r1, pc, #64	; (adr r1, 8001b70 <EvaluatePID+0x3a8>)
 8001b30:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001b34:	e9d7 232e 	ldrd	r2, r3, [r7, #184]	; 0xb8
 8001b38:	f7fe fd66 	bl	8000608 <__aeabi_dmul>
 8001b3c:	4602      	mov	r2, r0
 8001b3e:	460b      	mov	r3, r1
 8001b40:	4620      	mov	r0, r4
 8001b42:	4629      	mov	r1, r5
 8001b44:	f7fe fbaa 	bl	800029c <__adddf3>
 8001b48:	4602      	mov	r2, r0
 8001b4a:	460b      	mov	r3, r1
    tvMotorCommand.vec.z = daGains[0] * vError.z
 8001b4c:	4906      	ldr	r1, [pc, #24]	; (8001b68 <EvaluatePID+0x3a0>)
 8001b4e:	e9c1 2306 	strd	r2, r3, [r1, #24]

    osMutexRelease(motorCommandHandle);
 8001b52:	4b06      	ldr	r3, [pc, #24]	; (8001b6c <EvaluatePID+0x3a4>)
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	4618      	mov	r0, r3
 8001b58:	f003 fd0b 	bl	8005572 <osMutexRelease>

    osDelay(20);
 8001b5c:	2014      	movs	r0, #20
 8001b5e:	f003 fb01 	bl	8005164 <osDelay>
    osEventFlagsWait(newOrientationHandle, 1, osFlagsWaitAll, osWaitForever);
 8001b62:	e644      	b.n	80017ee <EvaluatePID+0x26>
 8001b64:	f3af 8000 	nop.w
 8001b68:	20000178 	.word	0x20000178
 8001b6c:	20000148 	.word	0x20000148
 8001b70:	9999999a 	.word	0x9999999a
 8001b74:	3fb99999 	.word	0x3fb99999

08001b78 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001b78:	b580      	push	{r7, lr}
 8001b7a:	b082      	sub	sp, #8
 8001b7c:	af00      	add	r7, sp, #0
 8001b7e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM10) {
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	4a04      	ldr	r2, [pc, #16]	; (8001b98 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001b86:	4293      	cmp	r3, r2
 8001b88:	d101      	bne.n	8001b8e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001b8a:	f000 fc31 	bl	80023f0 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001b8e:	bf00      	nop
 8001b90:	3708      	adds	r7, #8
 8001b92:	46bd      	mov	sp, r7
 8001b94:	bd80      	pop	{r7, pc}
 8001b96:	bf00      	nop
 8001b98:	40014400 	.word	0x40014400

08001b9c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001b9c:	b480      	push	{r7}
 8001b9e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001ba0:	b672      	cpsid	i
}
 8001ba2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001ba4:	e7fe      	b.n	8001ba4 <Error_Handler+0x8>
	...

08001ba8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001ba8:	b580      	push	{r7, lr}
 8001baa:	b082      	sub	sp, #8
 8001bac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001bae:	2300      	movs	r3, #0
 8001bb0:	607b      	str	r3, [r7, #4]
 8001bb2:	4b12      	ldr	r3, [pc, #72]	; (8001bfc <HAL_MspInit+0x54>)
 8001bb4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bb6:	4a11      	ldr	r2, [pc, #68]	; (8001bfc <HAL_MspInit+0x54>)
 8001bb8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001bbc:	6453      	str	r3, [r2, #68]	; 0x44
 8001bbe:	4b0f      	ldr	r3, [pc, #60]	; (8001bfc <HAL_MspInit+0x54>)
 8001bc0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bc2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001bc6:	607b      	str	r3, [r7, #4]
 8001bc8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001bca:	2300      	movs	r3, #0
 8001bcc:	603b      	str	r3, [r7, #0]
 8001bce:	4b0b      	ldr	r3, [pc, #44]	; (8001bfc <HAL_MspInit+0x54>)
 8001bd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bd2:	4a0a      	ldr	r2, [pc, #40]	; (8001bfc <HAL_MspInit+0x54>)
 8001bd4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001bd8:	6413      	str	r3, [r2, #64]	; 0x40
 8001bda:	4b08      	ldr	r3, [pc, #32]	; (8001bfc <HAL_MspInit+0x54>)
 8001bdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bde:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001be2:	603b      	str	r3, [r7, #0]
 8001be4:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001be6:	2200      	movs	r2, #0
 8001be8:	210f      	movs	r1, #15
 8001bea:	f06f 0001 	mvn.w	r0, #1
 8001bee:	f000 fcfb 	bl	80025e8 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001bf2:	bf00      	nop
 8001bf4:	3708      	adds	r7, #8
 8001bf6:	46bd      	mov	sp, r7
 8001bf8:	bd80      	pop	{r7, pc}
 8001bfa:	bf00      	nop
 8001bfc:	40023800 	.word	0x40023800

08001c00 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001c00:	b580      	push	{r7, lr}
 8001c02:	b08a      	sub	sp, #40	; 0x28
 8001c04:	af00      	add	r7, sp, #0
 8001c06:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c08:	f107 0314 	add.w	r3, r7, #20
 8001c0c:	2200      	movs	r2, #0
 8001c0e:	601a      	str	r2, [r3, #0]
 8001c10:	605a      	str	r2, [r3, #4]
 8001c12:	609a      	str	r2, [r3, #8]
 8001c14:	60da      	str	r2, [r3, #12]
 8001c16:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	4a19      	ldr	r2, [pc, #100]	; (8001c84 <HAL_I2C_MspInit+0x84>)
 8001c1e:	4293      	cmp	r3, r2
 8001c20:	d12c      	bne.n	8001c7c <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c22:	2300      	movs	r3, #0
 8001c24:	613b      	str	r3, [r7, #16]
 8001c26:	4b18      	ldr	r3, [pc, #96]	; (8001c88 <HAL_I2C_MspInit+0x88>)
 8001c28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c2a:	4a17      	ldr	r2, [pc, #92]	; (8001c88 <HAL_I2C_MspInit+0x88>)
 8001c2c:	f043 0302 	orr.w	r3, r3, #2
 8001c30:	6313      	str	r3, [r2, #48]	; 0x30
 8001c32:	4b15      	ldr	r3, [pc, #84]	; (8001c88 <HAL_I2C_MspInit+0x88>)
 8001c34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c36:	f003 0302 	and.w	r3, r3, #2
 8001c3a:	613b      	str	r3, [r7, #16]
 8001c3c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001c3e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001c42:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001c44:	2312      	movs	r3, #18
 8001c46:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c48:	2300      	movs	r3, #0
 8001c4a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c4c:	2303      	movs	r3, #3
 8001c4e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001c50:	2304      	movs	r3, #4
 8001c52:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c54:	f107 0314 	add.w	r3, r7, #20
 8001c58:	4619      	mov	r1, r3
 8001c5a:	480c      	ldr	r0, [pc, #48]	; (8001c8c <HAL_I2C_MspInit+0x8c>)
 8001c5c:	f000 fcee 	bl	800263c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001c60:	2300      	movs	r3, #0
 8001c62:	60fb      	str	r3, [r7, #12]
 8001c64:	4b08      	ldr	r3, [pc, #32]	; (8001c88 <HAL_I2C_MspInit+0x88>)
 8001c66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c68:	4a07      	ldr	r2, [pc, #28]	; (8001c88 <HAL_I2C_MspInit+0x88>)
 8001c6a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001c6e:	6413      	str	r3, [r2, #64]	; 0x40
 8001c70:	4b05      	ldr	r3, [pc, #20]	; (8001c88 <HAL_I2C_MspInit+0x88>)
 8001c72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c74:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001c78:	60fb      	str	r3, [r7, #12]
 8001c7a:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001c7c:	bf00      	nop
 8001c7e:	3728      	adds	r7, #40	; 0x28
 8001c80:	46bd      	mov	sp, r7
 8001c82:	bd80      	pop	{r7, pc}
 8001c84:	40005400 	.word	0x40005400
 8001c88:	40023800 	.word	0x40023800
 8001c8c:	40020400 	.word	0x40020400

08001c90 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001c90:	b580      	push	{r7, lr}
 8001c92:	b08a      	sub	sp, #40	; 0x28
 8001c94:	af00      	add	r7, sp, #0
 8001c96:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c98:	f107 0314 	add.w	r3, r7, #20
 8001c9c:	2200      	movs	r2, #0
 8001c9e:	601a      	str	r2, [r3, #0]
 8001ca0:	605a      	str	r2, [r3, #4]
 8001ca2:	609a      	str	r2, [r3, #8]
 8001ca4:	60da      	str	r2, [r3, #12]
 8001ca6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	4a19      	ldr	r2, [pc, #100]	; (8001d14 <HAL_UART_MspInit+0x84>)
 8001cae:	4293      	cmp	r3, r2
 8001cb0:	d12b      	bne.n	8001d0a <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001cb2:	2300      	movs	r3, #0
 8001cb4:	613b      	str	r3, [r7, #16]
 8001cb6:	4b18      	ldr	r3, [pc, #96]	; (8001d18 <HAL_UART_MspInit+0x88>)
 8001cb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cba:	4a17      	ldr	r2, [pc, #92]	; (8001d18 <HAL_UART_MspInit+0x88>)
 8001cbc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001cc0:	6413      	str	r3, [r2, #64]	; 0x40
 8001cc2:	4b15      	ldr	r3, [pc, #84]	; (8001d18 <HAL_UART_MspInit+0x88>)
 8001cc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cc6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001cca:	613b      	str	r3, [r7, #16]
 8001ccc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001cce:	2300      	movs	r3, #0
 8001cd0:	60fb      	str	r3, [r7, #12]
 8001cd2:	4b11      	ldr	r3, [pc, #68]	; (8001d18 <HAL_UART_MspInit+0x88>)
 8001cd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cd6:	4a10      	ldr	r2, [pc, #64]	; (8001d18 <HAL_UART_MspInit+0x88>)
 8001cd8:	f043 0301 	orr.w	r3, r3, #1
 8001cdc:	6313      	str	r3, [r2, #48]	; 0x30
 8001cde:	4b0e      	ldr	r3, [pc, #56]	; (8001d18 <HAL_UART_MspInit+0x88>)
 8001ce0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ce2:	f003 0301 	and.w	r3, r3, #1
 8001ce6:	60fb      	str	r3, [r7, #12]
 8001ce8:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001cea:	230c      	movs	r3, #12
 8001cec:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cee:	2302      	movs	r3, #2
 8001cf0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cf2:	2300      	movs	r3, #0
 8001cf4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001cf6:	2300      	movs	r3, #0
 8001cf8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001cfa:	2307      	movs	r3, #7
 8001cfc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001cfe:	f107 0314 	add.w	r3, r7, #20
 8001d02:	4619      	mov	r1, r3
 8001d04:	4805      	ldr	r0, [pc, #20]	; (8001d1c <HAL_UART_MspInit+0x8c>)
 8001d06:	f000 fc99 	bl	800263c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001d0a:	bf00      	nop
 8001d0c:	3728      	adds	r7, #40	; 0x28
 8001d0e:	46bd      	mov	sp, r7
 8001d10:	bd80      	pop	{r7, pc}
 8001d12:	bf00      	nop
 8001d14:	40004400 	.word	0x40004400
 8001d18:	40023800 	.word	0x40023800
 8001d1c:	40020000 	.word	0x40020000

08001d20 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001d20:	b580      	push	{r7, lr}
 8001d22:	b08c      	sub	sp, #48	; 0x30
 8001d24:	af00      	add	r7, sp, #0
 8001d26:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 8001d28:	2300      	movs	r3, #0
 8001d2a:	62bb      	str	r3, [r7, #40]	; 0x28

  uint32_t              uwPrescalerValue = 0U;
 8001d2c:	2300      	movs	r3, #0
 8001d2e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM10 clock */
  __HAL_RCC_TIM10_CLK_ENABLE();
 8001d30:	2300      	movs	r3, #0
 8001d32:	60bb      	str	r3, [r7, #8]
 8001d34:	4b2e      	ldr	r3, [pc, #184]	; (8001df0 <HAL_InitTick+0xd0>)
 8001d36:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d38:	4a2d      	ldr	r2, [pc, #180]	; (8001df0 <HAL_InitTick+0xd0>)
 8001d3a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001d3e:	6453      	str	r3, [r2, #68]	; 0x44
 8001d40:	4b2b      	ldr	r3, [pc, #172]	; (8001df0 <HAL_InitTick+0xd0>)
 8001d42:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d44:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d48:	60bb      	str	r3, [r7, #8]
 8001d4a:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001d4c:	f107 020c 	add.w	r2, r7, #12
 8001d50:	f107 0310 	add.w	r3, r7, #16
 8001d54:	4611      	mov	r1, r2
 8001d56:	4618      	mov	r0, r3
 8001d58:	f002 fa70 	bl	800423c <HAL_RCC_GetClockConfig>

  /* Compute TIM10 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 8001d5c:	f002 fa5a 	bl	8004214 <HAL_RCC_GetPCLK2Freq>
 8001d60:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM10 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001d62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001d64:	4a23      	ldr	r2, [pc, #140]	; (8001df4 <HAL_InitTick+0xd4>)
 8001d66:	fba2 2303 	umull	r2, r3, r2, r3
 8001d6a:	0c9b      	lsrs	r3, r3, #18
 8001d6c:	3b01      	subs	r3, #1
 8001d6e:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM10 */
  htim10.Instance = TIM10;
 8001d70:	4b21      	ldr	r3, [pc, #132]	; (8001df8 <HAL_InitTick+0xd8>)
 8001d72:	4a22      	ldr	r2, [pc, #136]	; (8001dfc <HAL_InitTick+0xdc>)
 8001d74:	601a      	str	r2, [r3, #0]
  + Period = [(TIM10CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim10.Init.Period = (1000000U / 1000U) - 1U;
 8001d76:	4b20      	ldr	r3, [pc, #128]	; (8001df8 <HAL_InitTick+0xd8>)
 8001d78:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001d7c:	60da      	str	r2, [r3, #12]
  htim10.Init.Prescaler = uwPrescalerValue;
 8001d7e:	4a1e      	ldr	r2, [pc, #120]	; (8001df8 <HAL_InitTick+0xd8>)
 8001d80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d82:	6053      	str	r3, [r2, #4]
  htim10.Init.ClockDivision = 0;
 8001d84:	4b1c      	ldr	r3, [pc, #112]	; (8001df8 <HAL_InitTick+0xd8>)
 8001d86:	2200      	movs	r2, #0
 8001d88:	611a      	str	r2, [r3, #16]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001d8a:	4b1b      	ldr	r3, [pc, #108]	; (8001df8 <HAL_InitTick+0xd8>)
 8001d8c:	2200      	movs	r2, #0
 8001d8e:	609a      	str	r2, [r3, #8]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001d90:	4b19      	ldr	r3, [pc, #100]	; (8001df8 <HAL_InitTick+0xd8>)
 8001d92:	2200      	movs	r2, #0
 8001d94:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim10);
 8001d96:	4818      	ldr	r0, [pc, #96]	; (8001df8 <HAL_InitTick+0xd8>)
 8001d98:	f002 fa82 	bl	80042a0 <HAL_TIM_Base_Init>
 8001d9c:	4603      	mov	r3, r0
 8001d9e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 8001da2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	d11b      	bne.n	8001de2 <HAL_InitTick+0xc2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim10);
 8001daa:	4813      	ldr	r0, [pc, #76]	; (8001df8 <HAL_InitTick+0xd8>)
 8001dac:	f002 fad2 	bl	8004354 <HAL_TIM_Base_Start_IT>
 8001db0:	4603      	mov	r3, r0
 8001db2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 8001db6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	d111      	bne.n	8001de2 <HAL_InitTick+0xc2>
    {
    /* Enable the TIM10 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8001dbe:	2019      	movs	r0, #25
 8001dc0:	f000 fc2e 	bl	8002620 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	2b0f      	cmp	r3, #15
 8001dc8:	d808      	bhi.n	8001ddc <HAL_InitTick+0xbc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority, 0U);
 8001dca:	2200      	movs	r2, #0
 8001dcc:	6879      	ldr	r1, [r7, #4]
 8001dce:	2019      	movs	r0, #25
 8001dd0:	f000 fc0a 	bl	80025e8 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001dd4:	4a0a      	ldr	r2, [pc, #40]	; (8001e00 <HAL_InitTick+0xe0>)
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	6013      	str	r3, [r2, #0]
 8001dda:	e002      	b.n	8001de2 <HAL_InitTick+0xc2>
      }
      else
      {
        status = HAL_ERROR;
 8001ddc:	2301      	movs	r3, #1
 8001dde:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8001de2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8001de6:	4618      	mov	r0, r3
 8001de8:	3730      	adds	r7, #48	; 0x30
 8001dea:	46bd      	mov	sp, r7
 8001dec:	bd80      	pop	{r7, pc}
 8001dee:	bf00      	nop
 8001df0:	40023800 	.word	0x40023800
 8001df4:	431bde83 	.word	0x431bde83
 8001df8:	200001a0 	.word	0x200001a0
 8001dfc:	40014400 	.word	0x40014400
 8001e00:	20000010 	.word	0x20000010

08001e04 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001e04:	b480      	push	{r7}
 8001e06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001e08:	e7fe      	b.n	8001e08 <NMI_Handler+0x4>

08001e0a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001e0a:	b480      	push	{r7}
 8001e0c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001e0e:	e7fe      	b.n	8001e0e <HardFault_Handler+0x4>

08001e10 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001e10:	b480      	push	{r7}
 8001e12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001e14:	e7fe      	b.n	8001e14 <MemManage_Handler+0x4>

08001e16 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001e16:	b480      	push	{r7}
 8001e18:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001e1a:	e7fe      	b.n	8001e1a <BusFault_Handler+0x4>

08001e1c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001e1c:	b480      	push	{r7}
 8001e1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001e20:	e7fe      	b.n	8001e20 <UsageFault_Handler+0x4>

08001e22 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001e22:	b480      	push	{r7}
 8001e24:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001e26:	bf00      	nop
 8001e28:	46bd      	mov	sp, r7
 8001e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e2e:	4770      	bx	lr

08001e30 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8001e30:	b580      	push	{r7, lr}
 8001e32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim10);
 8001e34:	4802      	ldr	r0, [pc, #8]	; (8001e40 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8001e36:	f002 faef 	bl	8004418 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8001e3a:	bf00      	nop
 8001e3c:	bd80      	pop	{r7, pc}
 8001e3e:	bf00      	nop
 8001e40:	200001a0 	.word	0x200001a0

08001e44 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001e44:	b580      	push	{r7, lr}
 8001e46:	b086      	sub	sp, #24
 8001e48:	af00      	add	r7, sp, #0
 8001e4a:	60f8      	str	r0, [r7, #12]
 8001e4c:	60b9      	str	r1, [r7, #8]
 8001e4e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001e50:	2300      	movs	r3, #0
 8001e52:	617b      	str	r3, [r7, #20]
 8001e54:	e00a      	b.n	8001e6c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001e56:	f3af 8000 	nop.w
 8001e5a:	4601      	mov	r1, r0
 8001e5c:	68bb      	ldr	r3, [r7, #8]
 8001e5e:	1c5a      	adds	r2, r3, #1
 8001e60:	60ba      	str	r2, [r7, #8]
 8001e62:	b2ca      	uxtb	r2, r1
 8001e64:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001e66:	697b      	ldr	r3, [r7, #20]
 8001e68:	3301      	adds	r3, #1
 8001e6a:	617b      	str	r3, [r7, #20]
 8001e6c:	697a      	ldr	r2, [r7, #20]
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	429a      	cmp	r2, r3
 8001e72:	dbf0      	blt.n	8001e56 <_read+0x12>
  }

  return len;
 8001e74:	687b      	ldr	r3, [r7, #4]
}
 8001e76:	4618      	mov	r0, r3
 8001e78:	3718      	adds	r7, #24
 8001e7a:	46bd      	mov	sp, r7
 8001e7c:	bd80      	pop	{r7, pc}

08001e7e <_close>:
  }
  return len;
}

int _close(int file)
{
 8001e7e:	b480      	push	{r7}
 8001e80:	b083      	sub	sp, #12
 8001e82:	af00      	add	r7, sp, #0
 8001e84:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001e86:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8001e8a:	4618      	mov	r0, r3
 8001e8c:	370c      	adds	r7, #12
 8001e8e:	46bd      	mov	sp, r7
 8001e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e94:	4770      	bx	lr

08001e96 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001e96:	b480      	push	{r7}
 8001e98:	b083      	sub	sp, #12
 8001e9a:	af00      	add	r7, sp, #0
 8001e9c:	6078      	str	r0, [r7, #4]
 8001e9e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001ea0:	683b      	ldr	r3, [r7, #0]
 8001ea2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001ea6:	605a      	str	r2, [r3, #4]
  return 0;
 8001ea8:	2300      	movs	r3, #0
}
 8001eaa:	4618      	mov	r0, r3
 8001eac:	370c      	adds	r7, #12
 8001eae:	46bd      	mov	sp, r7
 8001eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eb4:	4770      	bx	lr

08001eb6 <_isatty>:

int _isatty(int file)
{
 8001eb6:	b480      	push	{r7}
 8001eb8:	b083      	sub	sp, #12
 8001eba:	af00      	add	r7, sp, #0
 8001ebc:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001ebe:	2301      	movs	r3, #1
}
 8001ec0:	4618      	mov	r0, r3
 8001ec2:	370c      	adds	r7, #12
 8001ec4:	46bd      	mov	sp, r7
 8001ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eca:	4770      	bx	lr

08001ecc <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001ecc:	b480      	push	{r7}
 8001ece:	b085      	sub	sp, #20
 8001ed0:	af00      	add	r7, sp, #0
 8001ed2:	60f8      	str	r0, [r7, #12]
 8001ed4:	60b9      	str	r1, [r7, #8]
 8001ed6:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001ed8:	2300      	movs	r3, #0
}
 8001eda:	4618      	mov	r0, r3
 8001edc:	3714      	adds	r7, #20
 8001ede:	46bd      	mov	sp, r7
 8001ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ee4:	4770      	bx	lr
	...

08001ee8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001ee8:	b580      	push	{r7, lr}
 8001eea:	b086      	sub	sp, #24
 8001eec:	af00      	add	r7, sp, #0
 8001eee:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001ef0:	4a14      	ldr	r2, [pc, #80]	; (8001f44 <_sbrk+0x5c>)
 8001ef2:	4b15      	ldr	r3, [pc, #84]	; (8001f48 <_sbrk+0x60>)
 8001ef4:	1ad3      	subs	r3, r2, r3
 8001ef6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001ef8:	697b      	ldr	r3, [r7, #20]
 8001efa:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001efc:	4b13      	ldr	r3, [pc, #76]	; (8001f4c <_sbrk+0x64>)
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	2b00      	cmp	r3, #0
 8001f02:	d102      	bne.n	8001f0a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001f04:	4b11      	ldr	r3, [pc, #68]	; (8001f4c <_sbrk+0x64>)
 8001f06:	4a12      	ldr	r2, [pc, #72]	; (8001f50 <_sbrk+0x68>)
 8001f08:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001f0a:	4b10      	ldr	r3, [pc, #64]	; (8001f4c <_sbrk+0x64>)
 8001f0c:	681a      	ldr	r2, [r3, #0]
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	4413      	add	r3, r2
 8001f12:	693a      	ldr	r2, [r7, #16]
 8001f14:	429a      	cmp	r2, r3
 8001f16:	d207      	bcs.n	8001f28 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001f18:	f006 fe28 	bl	8008b6c <__errno>
 8001f1c:	4603      	mov	r3, r0
 8001f1e:	220c      	movs	r2, #12
 8001f20:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001f22:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001f26:	e009      	b.n	8001f3c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001f28:	4b08      	ldr	r3, [pc, #32]	; (8001f4c <_sbrk+0x64>)
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001f2e:	4b07      	ldr	r3, [pc, #28]	; (8001f4c <_sbrk+0x64>)
 8001f30:	681a      	ldr	r2, [r3, #0]
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	4413      	add	r3, r2
 8001f36:	4a05      	ldr	r2, [pc, #20]	; (8001f4c <_sbrk+0x64>)
 8001f38:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001f3a:	68fb      	ldr	r3, [r7, #12]
}
 8001f3c:	4618      	mov	r0, r3
 8001f3e:	3718      	adds	r7, #24
 8001f40:	46bd      	mov	sp, r7
 8001f42:	bd80      	pop	{r7, pc}
 8001f44:	20018000 	.word	0x20018000
 8001f48:	00000400 	.word	0x00000400
 8001f4c:	200001e8 	.word	0x200001e8
 8001f50:	20004b50 	.word	0x20004b50

08001f54 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001f54:	b480      	push	{r7}
 8001f56:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001f58:	4b06      	ldr	r3, [pc, #24]	; (8001f74 <SystemInit+0x20>)
 8001f5a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001f5e:	4a05      	ldr	r2, [pc, #20]	; (8001f74 <SystemInit+0x20>)
 8001f60:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001f64:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001f68:	bf00      	nop
 8001f6a:	46bd      	mov	sp, r7
 8001f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f70:	4770      	bx	lr
 8001f72:	bf00      	nop
 8001f74:	e000ed00 	.word	0xe000ed00

08001f78 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001f78:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001fb0 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001f7c:	480d      	ldr	r0, [pc, #52]	; (8001fb4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001f7e:	490e      	ldr	r1, [pc, #56]	; (8001fb8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001f80:	4a0e      	ldr	r2, [pc, #56]	; (8001fbc <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001f82:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001f84:	e002      	b.n	8001f8c <LoopCopyDataInit>

08001f86 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001f86:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001f88:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001f8a:	3304      	adds	r3, #4

08001f8c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001f8c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001f8e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001f90:	d3f9      	bcc.n	8001f86 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001f92:	4a0b      	ldr	r2, [pc, #44]	; (8001fc0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001f94:	4c0b      	ldr	r4, [pc, #44]	; (8001fc4 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001f96:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001f98:	e001      	b.n	8001f9e <LoopFillZerobss>

08001f9a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001f9a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001f9c:	3204      	adds	r2, #4

08001f9e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001f9e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001fa0:	d3fb      	bcc.n	8001f9a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001fa2:	f7ff ffd7 	bl	8001f54 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001fa6:	f006 fde7 	bl	8008b78 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001faa:	f7ff f9c1 	bl	8001330 <main>
  bx  lr    
 8001fae:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001fb0:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001fb4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001fb8:	20000080 	.word	0x20000080
  ldr r2, =_sidata
 8001fbc:	0800a7d0 	.word	0x0800a7d0
  ldr r2, =_sbss
 8001fc0:	20000080 	.word	0x20000080
  ldr r4, =_ebss
 8001fc4:	20004b50 	.word	0x20004b50

08001fc8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001fc8:	e7fe      	b.n	8001fc8 <ADC_IRQHandler>

08001fca <bno055_setPage>:
uint16_t angularRateScale = 16;
uint16_t eulerScale = 16;
uint16_t magScale = 16;
uint16_t quaScale = (1<<14);    // 2^14

void bno055_setPage(uint8_t page) { bno055_writeData(BNO055_PAGE_ID, page); }
 8001fca:	b580      	push	{r7, lr}
 8001fcc:	b082      	sub	sp, #8
 8001fce:	af00      	add	r7, sp, #0
 8001fd0:	4603      	mov	r3, r0
 8001fd2:	71fb      	strb	r3, [r7, #7]
 8001fd4:	79fb      	ldrb	r3, [r7, #7]
 8001fd6:	4619      	mov	r1, r3
 8001fd8:	2007      	movs	r0, #7
 8001fda:	f7fe ff8b 	bl	8000ef4 <bno055_writeData>
 8001fde:	bf00      	nop
 8001fe0:	3708      	adds	r7, #8
 8001fe2:	46bd      	mov	sp, r7
 8001fe4:	bd80      	pop	{r7, pc}

08001fe6 <bno055_setOperationMode>:
  bno055_opmode_t mode;
  bno055_readData(BNO055_OPR_MODE, &mode, 1);
  return mode;
}

void bno055_setOperationMode(bno055_opmode_t mode) {
 8001fe6:	b580      	push	{r7, lr}
 8001fe8:	b082      	sub	sp, #8
 8001fea:	af00      	add	r7, sp, #0
 8001fec:	4603      	mov	r3, r0
 8001fee:	71fb      	strb	r3, [r7, #7]
  bno055_writeData(BNO055_OPR_MODE, mode);
 8001ff0:	79fb      	ldrb	r3, [r7, #7]
 8001ff2:	4619      	mov	r1, r3
 8001ff4:	203d      	movs	r0, #61	; 0x3d
 8001ff6:	f7fe ff7d 	bl	8000ef4 <bno055_writeData>
  if (mode == BNO055_OPERATION_MODE_CONFIG) {
 8001ffa:	79fb      	ldrb	r3, [r7, #7]
 8001ffc:	2b00      	cmp	r3, #0
 8001ffe:	d103      	bne.n	8002008 <bno055_setOperationMode+0x22>
    bno055_delay(19);
 8002000:	2013      	movs	r0, #19
 8002002:	f7fe ff6b 	bl	8000edc <bno055_delay>
  } else {
    bno055_delay(7);
  }
}
 8002006:	e002      	b.n	800200e <bno055_setOperationMode+0x28>
    bno055_delay(7);
 8002008:	2007      	movs	r0, #7
 800200a:	f7fe ff67 	bl	8000edc <bno055_delay>
}
 800200e:	bf00      	nop
 8002010:	3708      	adds	r7, #8
 8002012:	46bd      	mov	sp, r7
 8002014:	bd80      	pop	{r7, pc}

08002016 <bno055_setOperationModeConfig>:

void bno055_setOperationModeConfig() {
 8002016:	b580      	push	{r7, lr}
 8002018:	af00      	add	r7, sp, #0
  bno055_setOperationMode(BNO055_OPERATION_MODE_CONFIG);
 800201a:	2000      	movs	r0, #0
 800201c:	f7ff ffe3 	bl	8001fe6 <bno055_setOperationMode>
}
 8002020:	bf00      	nop
 8002022:	bd80      	pop	{r7, pc}

08002024 <bno055_setOperationModeNDOF>:

void bno055_setOperationModeNDOF() {
 8002024:	b580      	push	{r7, lr}
 8002026:	af00      	add	r7, sp, #0
  bno055_setOperationMode(BNO055_OPERATION_MODE_NDOF);
 8002028:	200c      	movs	r0, #12
 800202a:	f7ff ffdc 	bl	8001fe6 <bno055_setOperationMode>
}
 800202e:	bf00      	nop
 8002030:	bd80      	pop	{r7, pc}

08002032 <bno055_reset>:
}

void bno055_enableExternalCrystal() { bno055_setExternalCrystalUse(true); }
void bno055_disableExternalCrystal() { bno055_setExternalCrystalUse(false); }

void bno055_reset() {
 8002032:	b580      	push	{r7, lr}
 8002034:	af00      	add	r7, sp, #0
  bno055_writeData(BNO055_SYS_TRIGGER, 0x20);
 8002036:	2120      	movs	r1, #32
 8002038:	203f      	movs	r0, #63	; 0x3f
 800203a:	f7fe ff5b 	bl	8000ef4 <bno055_writeData>
  bno055_delay(700);
 800203e:	f44f 702f 	mov.w	r0, #700	; 0x2bc
 8002042:	f7fe ff4b 	bl	8000edc <bno055_delay>
}
 8002046:	bf00      	nop
 8002048:	bd80      	pop	{r7, pc}
	...

0800204c <bno055_setup>:
  uint8_t t;
  bno055_readData(BNO055_TEMP, &t, 1);
  return t;
}

void bno055_setup() {
 800204c:	b580      	push	{r7, lr}
 800204e:	b082      	sub	sp, #8
 8002050:	af00      	add	r7, sp, #0
  bno055_reset();
 8002052:	f7ff ffee 	bl	8002032 <bno055_reset>

  uint8_t id = 0;
 8002056:	2300      	movs	r3, #0
 8002058:	71fb      	strb	r3, [r7, #7]
  bno055_readData(BNO055_CHIP_ID, &id, 1);
 800205a:	1dfb      	adds	r3, r7, #7
 800205c:	2201      	movs	r2, #1
 800205e:	4619      	mov	r1, r3
 8002060:	2000      	movs	r0, #0
 8002062:	f7ff f833 	bl	80010cc <bno055_readData>
  if (id != BNO055_ID) {
 8002066:	79fb      	ldrb	r3, [r7, #7]
 8002068:	2ba0      	cmp	r3, #160	; 0xa0
 800206a:	d004      	beq.n	8002076 <bno055_setup+0x2a>
    printf("Can't find BNO055, id: 0x%02x. Please check your wiring.\r\n", id);
 800206c:	79fb      	ldrb	r3, [r7, #7]
 800206e:	4619      	mov	r1, r3
 8002070:	4809      	ldr	r0, [pc, #36]	; (8002098 <bno055_setup+0x4c>)
 8002072:	f006 fdbb 	bl	8008bec <iprintf>
  }
  bno055_setPage(0);
 8002076:	2000      	movs	r0, #0
 8002078:	f7ff ffa7 	bl	8001fca <bno055_setPage>
  bno055_writeData(BNO055_SYS_TRIGGER, 0x0);
 800207c:	2100      	movs	r1, #0
 800207e:	203f      	movs	r0, #63	; 0x3f
 8002080:	f7fe ff38 	bl	8000ef4 <bno055_writeData>

  // Select BNO055 config mode
  bno055_setOperationModeConfig();
 8002084:	f7ff ffc7 	bl	8002016 <bno055_setOperationModeConfig>
  bno055_delay(10);
 8002088:	200a      	movs	r0, #10
 800208a:	f7fe ff27 	bl	8000edc <bno055_delay>
}
 800208e:	bf00      	nop
 8002090:	3708      	adds	r7, #8
 8002092:	46bd      	mov	sp, r7
 8002094:	bd80      	pop	{r7, pc}
 8002096:	bf00      	nop
 8002098:	0800a610 	.word	0x0800a610

0800209c <bno055_getVector>:
  }

  bno055_setOperationMode(operationMode);
}

bno055_vector_t bno055_getVector(uint8_t vec) {
 800209c:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80020a0:	b09e      	sub	sp, #120	; 0x78
 80020a2:	af00      	add	r7, sp, #0
 80020a4:	4603      	mov	r3, r0
 80020a6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  bno055_setPage(0);
 80020aa:	2000      	movs	r0, #0
 80020ac:	f7ff ff8d 	bl	8001fca <bno055_setPage>
  uint8_t buffer[8];    // Quaternion need 8 bytes

  if (vec == BNO055_VECTOR_QUATERNION)
 80020b0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80020b4:	2b20      	cmp	r3, #32
 80020b6:	d108      	bne.n	80020ca <bno055_getVector+0x2e>
    bno055_readData(vec, buffer, 8);
 80020b8:	f107 0148 	add.w	r1, r7, #72	; 0x48
 80020bc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80020c0:	2208      	movs	r2, #8
 80020c2:	4618      	mov	r0, r3
 80020c4:	f7ff f802 	bl	80010cc <bno055_readData>
 80020c8:	e007      	b.n	80020da <bno055_getVector+0x3e>
  else
    bno055_readData(vec, buffer, 6);
 80020ca:	f107 0148 	add.w	r1, r7, #72	; 0x48
 80020ce:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80020d2:	2206      	movs	r2, #6
 80020d4:	4618      	mov	r0, r3
 80020d6:	f7fe fff9 	bl	80010cc <bno055_readData>

  double scale = 1;
 80020da:	f04f 0200 	mov.w	r2, #0
 80020de:	4b8b      	ldr	r3, [pc, #556]	; (800230c <bno055_getVector+0x270>)
 80020e0:	e9c7 231c 	strd	r2, r3, [r7, #112]	; 0x70

  if (vec == BNO055_VECTOR_MAGNETOMETER) {
 80020e4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80020e8:	2b0e      	cmp	r3, #14
 80020ea:	d109      	bne.n	8002100 <bno055_getVector+0x64>
    scale = magScale;
 80020ec:	4b88      	ldr	r3, [pc, #544]	; (8002310 <bno055_getVector+0x274>)
 80020ee:	881b      	ldrh	r3, [r3, #0]
 80020f0:	4618      	mov	r0, r3
 80020f2:	f7fe fa0f 	bl	8000514 <__aeabi_ui2d>
 80020f6:	4602      	mov	r2, r0
 80020f8:	460b      	mov	r3, r1
 80020fa:	e9c7 231c 	strd	r2, r3, [r7, #112]	; 0x70
 80020fe:	e03e      	b.n	800217e <bno055_getVector+0xe2>
  } else if (vec == BNO055_VECTOR_ACCELEROMETER ||
 8002100:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002104:	2b08      	cmp	r3, #8
 8002106:	d007      	beq.n	8002118 <bno055_getVector+0x7c>
 8002108:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800210c:	2b28      	cmp	r3, #40	; 0x28
 800210e:	d003      	beq.n	8002118 <bno055_getVector+0x7c>
           vec == BNO055_VECTOR_LINEARACCEL || vec == BNO055_VECTOR_GRAVITY) {
 8002110:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002114:	2b2e      	cmp	r3, #46	; 0x2e
 8002116:	d109      	bne.n	800212c <bno055_getVector+0x90>
    scale = accelScale;
 8002118:	4b7e      	ldr	r3, [pc, #504]	; (8002314 <bno055_getVector+0x278>)
 800211a:	881b      	ldrh	r3, [r3, #0]
 800211c:	4618      	mov	r0, r3
 800211e:	f7fe f9f9 	bl	8000514 <__aeabi_ui2d>
 8002122:	4602      	mov	r2, r0
 8002124:	460b      	mov	r3, r1
 8002126:	e9c7 231c 	strd	r2, r3, [r7, #112]	; 0x70
 800212a:	e028      	b.n	800217e <bno055_getVector+0xe2>
  } else if (vec == BNO055_VECTOR_GYROSCOPE) {
 800212c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002130:	2b14      	cmp	r3, #20
 8002132:	d109      	bne.n	8002148 <bno055_getVector+0xac>
    scale = angularRateScale;
 8002134:	4b78      	ldr	r3, [pc, #480]	; (8002318 <bno055_getVector+0x27c>)
 8002136:	881b      	ldrh	r3, [r3, #0]
 8002138:	4618      	mov	r0, r3
 800213a:	f7fe f9eb 	bl	8000514 <__aeabi_ui2d>
 800213e:	4602      	mov	r2, r0
 8002140:	460b      	mov	r3, r1
 8002142:	e9c7 231c 	strd	r2, r3, [r7, #112]	; 0x70
 8002146:	e01a      	b.n	800217e <bno055_getVector+0xe2>
  } else if (vec == BNO055_VECTOR_EULER) {
 8002148:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800214c:	2b1a      	cmp	r3, #26
 800214e:	d109      	bne.n	8002164 <bno055_getVector+0xc8>
    scale = eulerScale;
 8002150:	4b72      	ldr	r3, [pc, #456]	; (800231c <bno055_getVector+0x280>)
 8002152:	881b      	ldrh	r3, [r3, #0]
 8002154:	4618      	mov	r0, r3
 8002156:	f7fe f9dd 	bl	8000514 <__aeabi_ui2d>
 800215a:	4602      	mov	r2, r0
 800215c:	460b      	mov	r3, r1
 800215e:	e9c7 231c 	strd	r2, r3, [r7, #112]	; 0x70
 8002162:	e00c      	b.n	800217e <bno055_getVector+0xe2>
  } else if (vec == BNO055_VECTOR_QUATERNION) {
 8002164:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002168:	2b20      	cmp	r3, #32
 800216a:	d108      	bne.n	800217e <bno055_getVector+0xe2>
    scale = quaScale;
 800216c:	4b6c      	ldr	r3, [pc, #432]	; (8002320 <bno055_getVector+0x284>)
 800216e:	881b      	ldrh	r3, [r3, #0]
 8002170:	4618      	mov	r0, r3
 8002172:	f7fe f9cf 	bl	8000514 <__aeabi_ui2d>
 8002176:	4602      	mov	r2, r0
 8002178:	460b      	mov	r3, r1
 800217a:	e9c7 231c 	strd	r2, r3, [r7, #112]	; 0x70
  }

  bno055_vector_t xyz = {.w = 0, .x = 0, .y = 0, .z = 0};
 800217e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002182:	2220      	movs	r2, #32
 8002184:	2100      	movs	r1, #0
 8002186:	4618      	mov	r0, r3
 8002188:	f006 fd28 	bl	8008bdc <memset>
  if (vec == BNO055_VECTOR_QUATERNION) {
 800218c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002190:	2b20      	cmp	r3, #32
 8002192:	d150      	bne.n	8002236 <bno055_getVector+0x19a>
    xyz.w = (int16_t)((buffer[1] << 8) | buffer[0]) / scale;
 8002194:	f897 3049 	ldrb.w	r3, [r7, #73]	; 0x49
 8002198:	021b      	lsls	r3, r3, #8
 800219a:	b21a      	sxth	r2, r3
 800219c:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 80021a0:	b21b      	sxth	r3, r3
 80021a2:	4313      	orrs	r3, r2
 80021a4:	b21b      	sxth	r3, r3
 80021a6:	4618      	mov	r0, r3
 80021a8:	f7fe f9c4 	bl	8000534 <__aeabi_i2d>
 80021ac:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 80021b0:	f7fe fb54 	bl	800085c <__aeabi_ddiv>
 80021b4:	4602      	mov	r2, r0
 80021b6:	460b      	mov	r3, r1
 80021b8:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
    xyz.x = (int16_t)((buffer[3] << 8) | buffer[2]) / scale;
 80021bc:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 80021c0:	021b      	lsls	r3, r3, #8
 80021c2:	b21a      	sxth	r2, r3
 80021c4:	f897 304a 	ldrb.w	r3, [r7, #74]	; 0x4a
 80021c8:	b21b      	sxth	r3, r3
 80021ca:	4313      	orrs	r3, r2
 80021cc:	b21b      	sxth	r3, r3
 80021ce:	4618      	mov	r0, r3
 80021d0:	f7fe f9b0 	bl	8000534 <__aeabi_i2d>
 80021d4:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 80021d8:	f7fe fb40 	bl	800085c <__aeabi_ddiv>
 80021dc:	4602      	mov	r2, r0
 80021de:	460b      	mov	r3, r1
 80021e0:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
    xyz.y = (int16_t)((buffer[5] << 8) | buffer[4]) / scale;
 80021e4:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 80021e8:	021b      	lsls	r3, r3, #8
 80021ea:	b21a      	sxth	r2, r3
 80021ec:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 80021f0:	b21b      	sxth	r3, r3
 80021f2:	4313      	orrs	r3, r2
 80021f4:	b21b      	sxth	r3, r3
 80021f6:	4618      	mov	r0, r3
 80021f8:	f7fe f99c 	bl	8000534 <__aeabi_i2d>
 80021fc:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8002200:	f7fe fb2c 	bl	800085c <__aeabi_ddiv>
 8002204:	4602      	mov	r2, r0
 8002206:	460b      	mov	r3, r1
 8002208:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
    xyz.z = (int16_t)((buffer[7] << 8) | buffer[6]) / scale;
 800220c:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8002210:	021b      	lsls	r3, r3, #8
 8002212:	b21a      	sxth	r2, r3
 8002214:	f897 304e 	ldrb.w	r3, [r7, #78]	; 0x4e
 8002218:	b21b      	sxth	r3, r3
 800221a:	4313      	orrs	r3, r2
 800221c:	b21b      	sxth	r3, r3
 800221e:	4618      	mov	r0, r3
 8002220:	f7fe f988 	bl	8000534 <__aeabi_i2d>
 8002224:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8002228:	f7fe fb18 	bl	800085c <__aeabi_ddiv>
 800222c:	4602      	mov	r2, r0
 800222e:	460b      	mov	r3, r1
 8002230:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
 8002234:	e03b      	b.n	80022ae <bno055_getVector+0x212>
  } else {
    xyz.x = (int16_t)((buffer[1] << 8) | buffer[0]) / scale;
 8002236:	f897 3049 	ldrb.w	r3, [r7, #73]	; 0x49
 800223a:	021b      	lsls	r3, r3, #8
 800223c:	b21a      	sxth	r2, r3
 800223e:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 8002242:	b21b      	sxth	r3, r3
 8002244:	4313      	orrs	r3, r2
 8002246:	b21b      	sxth	r3, r3
 8002248:	4618      	mov	r0, r3
 800224a:	f7fe f973 	bl	8000534 <__aeabi_i2d>
 800224e:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8002252:	f7fe fb03 	bl	800085c <__aeabi_ddiv>
 8002256:	4602      	mov	r2, r0
 8002258:	460b      	mov	r3, r1
 800225a:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
    xyz.y = (int16_t)((buffer[3] << 8) | buffer[2]) / scale;
 800225e:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 8002262:	021b      	lsls	r3, r3, #8
 8002264:	b21a      	sxth	r2, r3
 8002266:	f897 304a 	ldrb.w	r3, [r7, #74]	; 0x4a
 800226a:	b21b      	sxth	r3, r3
 800226c:	4313      	orrs	r3, r2
 800226e:	b21b      	sxth	r3, r3
 8002270:	4618      	mov	r0, r3
 8002272:	f7fe f95f 	bl	8000534 <__aeabi_i2d>
 8002276:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 800227a:	f7fe faef 	bl	800085c <__aeabi_ddiv>
 800227e:	4602      	mov	r2, r0
 8002280:	460b      	mov	r3, r1
 8002282:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
    xyz.z = (int16_t)((buffer[5] << 8) | buffer[4]) / scale;
 8002286:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 800228a:	021b      	lsls	r3, r3, #8
 800228c:	b21a      	sxth	r2, r3
 800228e:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 8002292:	b21b      	sxth	r3, r3
 8002294:	4313      	orrs	r3, r2
 8002296:	b21b      	sxth	r3, r3
 8002298:	4618      	mov	r0, r3
 800229a:	f7fe f94b 	bl	8000534 <__aeabi_i2d>
 800229e:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 80022a2:	f7fe fadb 	bl	800085c <__aeabi_ddiv>
 80022a6:	4602      	mov	r2, r0
 80022a8:	460b      	mov	r3, r1
 80022aa:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
  }

  return xyz;
 80022ae:	f107 0450 	add.w	r4, r7, #80	; 0x50
 80022b2:	f107 0528 	add.w	r5, r7, #40	; 0x28
 80022b6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80022b8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80022ba:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80022be:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 80022c2:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 80022c6:	e9d7 4516 	ldrd	r4, r5, [r7, #88]	; 0x58
 80022ca:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 80022ce:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 80022d2:	ec49 8b14 	vmov	d4, r8, r9
 80022d6:	ec45 4b15 	vmov	d5, r4, r5
 80022da:	ec41 0b16 	vmov	d6, r0, r1
 80022de:	ec43 2b17 	vmov	d7, r2, r3
}
 80022e2:	eeb0 0a44 	vmov.f32	s0, s8
 80022e6:	eef0 0a64 	vmov.f32	s1, s9
 80022ea:	eeb0 1a45 	vmov.f32	s2, s10
 80022ee:	eef0 1a65 	vmov.f32	s3, s11
 80022f2:	eeb0 2a46 	vmov.f32	s4, s12
 80022f6:	eef0 2a66 	vmov.f32	s5, s13
 80022fa:	eeb0 3a47 	vmov.f32	s6, s14
 80022fe:	eef0 3a67 	vmov.f32	s7, s15
 8002302:	3778      	adds	r7, #120	; 0x78
 8002304:	46bd      	mov	sp, r7
 8002306:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800230a:	bf00      	nop
 800230c:	3ff00000 	.word	0x3ff00000
 8002310:	2000000a 	.word	0x2000000a
 8002314:	20000004 	.word	0x20000004
 8002318:	20000006 	.word	0x20000006
 800231c:	20000008 	.word	0x20000008
 8002320:	2000000c 	.word	0x2000000c

08002324 <bno055_getVectorEuler>:
  return bno055_getVector(BNO055_VECTOR_MAGNETOMETER);
}
bno055_vector_t bno055_getVectorGyroscope() {
  return bno055_getVector(BNO055_VECTOR_GYROSCOPE);
}
bno055_vector_t bno055_getVectorEuler() {
 8002324:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8002328:	b090      	sub	sp, #64	; 0x40
 800232a:	af00      	add	r7, sp, #0
  return bno055_getVector(BNO055_VECTOR_EULER);
 800232c:	201a      	movs	r0, #26
 800232e:	f7ff feb5 	bl	800209c <bno055_getVector>
 8002332:	eeb0 4a40 	vmov.f32	s8, s0
 8002336:	eef0 4a60 	vmov.f32	s9, s1
 800233a:	eeb0 5a41 	vmov.f32	s10, s2
 800233e:	eef0 5a61 	vmov.f32	s11, s3
 8002342:	eeb0 6a42 	vmov.f32	s12, s4
 8002346:	eef0 6a62 	vmov.f32	s13, s5
 800234a:	eeb0 7a43 	vmov.f32	s14, s6
 800234e:	eef0 7a63 	vmov.f32	s15, s7
 8002352:	ed87 4b08 	vstr	d4, [r7, #32]
 8002356:	ed87 5b0a 	vstr	d5, [r7, #40]	; 0x28
 800235a:	ed87 6b0c 	vstr	d6, [r7, #48]	; 0x30
 800235e:	ed87 7b0e 	vstr	d7, [r7, #56]	; 0x38
 8002362:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002366:	e9d7 450a 	ldrd	r4, r5, [r7, #40]	; 0x28
 800236a:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 800236e:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8002372:	ec49 8b14 	vmov	d4, r8, r9
 8002376:	ec45 4b15 	vmov	d5, r4, r5
 800237a:	ec41 0b16 	vmov	d6, r0, r1
 800237e:	ec43 2b17 	vmov	d7, r2, r3
}
 8002382:	eeb0 0a44 	vmov.f32	s0, s8
 8002386:	eef0 0a64 	vmov.f32	s1, s9
 800238a:	eeb0 1a45 	vmov.f32	s2, s10
 800238e:	eef0 1a65 	vmov.f32	s3, s11
 8002392:	eeb0 2a46 	vmov.f32	s4, s12
 8002396:	eef0 2a66 	vmov.f32	s5, s13
 800239a:	eeb0 3a47 	vmov.f32	s6, s14
 800239e:	eef0 3a67 	vmov.f32	s7, s15
 80023a2:	3740      	adds	r7, #64	; 0x40
 80023a4:	46bd      	mov	sp, r7
 80023a6:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
	...

080023ac <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80023ac:	b580      	push	{r7, lr}
 80023ae:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80023b0:	4b0e      	ldr	r3, [pc, #56]	; (80023ec <HAL_Init+0x40>)
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	4a0d      	ldr	r2, [pc, #52]	; (80023ec <HAL_Init+0x40>)
 80023b6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80023ba:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80023bc:	4b0b      	ldr	r3, [pc, #44]	; (80023ec <HAL_Init+0x40>)
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	4a0a      	ldr	r2, [pc, #40]	; (80023ec <HAL_Init+0x40>)
 80023c2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80023c6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80023c8:	4b08      	ldr	r3, [pc, #32]	; (80023ec <HAL_Init+0x40>)
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	4a07      	ldr	r2, [pc, #28]	; (80023ec <HAL_Init+0x40>)
 80023ce:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80023d2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80023d4:	2003      	movs	r0, #3
 80023d6:	f000 f8fc 	bl	80025d2 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80023da:	200f      	movs	r0, #15
 80023dc:	f7ff fca0 	bl	8001d20 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80023e0:	f7ff fbe2 	bl	8001ba8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80023e4:	2300      	movs	r3, #0
}
 80023e6:	4618      	mov	r0, r3
 80023e8:	bd80      	pop	{r7, pc}
 80023ea:	bf00      	nop
 80023ec:	40023c00 	.word	0x40023c00

080023f0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80023f0:	b480      	push	{r7}
 80023f2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80023f4:	4b06      	ldr	r3, [pc, #24]	; (8002410 <HAL_IncTick+0x20>)
 80023f6:	781b      	ldrb	r3, [r3, #0]
 80023f8:	461a      	mov	r2, r3
 80023fa:	4b06      	ldr	r3, [pc, #24]	; (8002414 <HAL_IncTick+0x24>)
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	4413      	add	r3, r2
 8002400:	4a04      	ldr	r2, [pc, #16]	; (8002414 <HAL_IncTick+0x24>)
 8002402:	6013      	str	r3, [r2, #0]
}
 8002404:	bf00      	nop
 8002406:	46bd      	mov	sp, r7
 8002408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800240c:	4770      	bx	lr
 800240e:	bf00      	nop
 8002410:	20000014 	.word	0x20000014
 8002414:	200001ec 	.word	0x200001ec

08002418 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002418:	b480      	push	{r7}
 800241a:	af00      	add	r7, sp, #0
  return uwTick;
 800241c:	4b03      	ldr	r3, [pc, #12]	; (800242c <HAL_GetTick+0x14>)
 800241e:	681b      	ldr	r3, [r3, #0]
}
 8002420:	4618      	mov	r0, r3
 8002422:	46bd      	mov	sp, r7
 8002424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002428:	4770      	bx	lr
 800242a:	bf00      	nop
 800242c:	200001ec 	.word	0x200001ec

08002430 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002430:	b580      	push	{r7, lr}
 8002432:	b084      	sub	sp, #16
 8002434:	af00      	add	r7, sp, #0
 8002436:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002438:	f7ff ffee 	bl	8002418 <HAL_GetTick>
 800243c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002442:	68fb      	ldr	r3, [r7, #12]
 8002444:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002448:	d005      	beq.n	8002456 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800244a:	4b0a      	ldr	r3, [pc, #40]	; (8002474 <HAL_Delay+0x44>)
 800244c:	781b      	ldrb	r3, [r3, #0]
 800244e:	461a      	mov	r2, r3
 8002450:	68fb      	ldr	r3, [r7, #12]
 8002452:	4413      	add	r3, r2
 8002454:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002456:	bf00      	nop
 8002458:	f7ff ffde 	bl	8002418 <HAL_GetTick>
 800245c:	4602      	mov	r2, r0
 800245e:	68bb      	ldr	r3, [r7, #8]
 8002460:	1ad3      	subs	r3, r2, r3
 8002462:	68fa      	ldr	r2, [r7, #12]
 8002464:	429a      	cmp	r2, r3
 8002466:	d8f7      	bhi.n	8002458 <HAL_Delay+0x28>
  {
  }
}
 8002468:	bf00      	nop
 800246a:	bf00      	nop
 800246c:	3710      	adds	r7, #16
 800246e:	46bd      	mov	sp, r7
 8002470:	bd80      	pop	{r7, pc}
 8002472:	bf00      	nop
 8002474:	20000014 	.word	0x20000014

08002478 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002478:	b480      	push	{r7}
 800247a:	b085      	sub	sp, #20
 800247c:	af00      	add	r7, sp, #0
 800247e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	f003 0307 	and.w	r3, r3, #7
 8002486:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002488:	4b0c      	ldr	r3, [pc, #48]	; (80024bc <__NVIC_SetPriorityGrouping+0x44>)
 800248a:	68db      	ldr	r3, [r3, #12]
 800248c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800248e:	68ba      	ldr	r2, [r7, #8]
 8002490:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002494:	4013      	ands	r3, r2
 8002496:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002498:	68fb      	ldr	r3, [r7, #12]
 800249a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800249c:	68bb      	ldr	r3, [r7, #8]
 800249e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80024a0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80024a4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80024a8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80024aa:	4a04      	ldr	r2, [pc, #16]	; (80024bc <__NVIC_SetPriorityGrouping+0x44>)
 80024ac:	68bb      	ldr	r3, [r7, #8]
 80024ae:	60d3      	str	r3, [r2, #12]
}
 80024b0:	bf00      	nop
 80024b2:	3714      	adds	r7, #20
 80024b4:	46bd      	mov	sp, r7
 80024b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ba:	4770      	bx	lr
 80024bc:	e000ed00 	.word	0xe000ed00

080024c0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80024c0:	b480      	push	{r7}
 80024c2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80024c4:	4b04      	ldr	r3, [pc, #16]	; (80024d8 <__NVIC_GetPriorityGrouping+0x18>)
 80024c6:	68db      	ldr	r3, [r3, #12]
 80024c8:	0a1b      	lsrs	r3, r3, #8
 80024ca:	f003 0307 	and.w	r3, r3, #7
}
 80024ce:	4618      	mov	r0, r3
 80024d0:	46bd      	mov	sp, r7
 80024d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024d6:	4770      	bx	lr
 80024d8:	e000ed00 	.word	0xe000ed00

080024dc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80024dc:	b480      	push	{r7}
 80024de:	b083      	sub	sp, #12
 80024e0:	af00      	add	r7, sp, #0
 80024e2:	4603      	mov	r3, r0
 80024e4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80024e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	db0b      	blt.n	8002506 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80024ee:	79fb      	ldrb	r3, [r7, #7]
 80024f0:	f003 021f 	and.w	r2, r3, #31
 80024f4:	4907      	ldr	r1, [pc, #28]	; (8002514 <__NVIC_EnableIRQ+0x38>)
 80024f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024fa:	095b      	lsrs	r3, r3, #5
 80024fc:	2001      	movs	r0, #1
 80024fe:	fa00 f202 	lsl.w	r2, r0, r2
 8002502:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002506:	bf00      	nop
 8002508:	370c      	adds	r7, #12
 800250a:	46bd      	mov	sp, r7
 800250c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002510:	4770      	bx	lr
 8002512:	bf00      	nop
 8002514:	e000e100 	.word	0xe000e100

08002518 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002518:	b480      	push	{r7}
 800251a:	b083      	sub	sp, #12
 800251c:	af00      	add	r7, sp, #0
 800251e:	4603      	mov	r3, r0
 8002520:	6039      	str	r1, [r7, #0]
 8002522:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002524:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002528:	2b00      	cmp	r3, #0
 800252a:	db0a      	blt.n	8002542 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800252c:	683b      	ldr	r3, [r7, #0]
 800252e:	b2da      	uxtb	r2, r3
 8002530:	490c      	ldr	r1, [pc, #48]	; (8002564 <__NVIC_SetPriority+0x4c>)
 8002532:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002536:	0112      	lsls	r2, r2, #4
 8002538:	b2d2      	uxtb	r2, r2
 800253a:	440b      	add	r3, r1
 800253c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002540:	e00a      	b.n	8002558 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002542:	683b      	ldr	r3, [r7, #0]
 8002544:	b2da      	uxtb	r2, r3
 8002546:	4908      	ldr	r1, [pc, #32]	; (8002568 <__NVIC_SetPriority+0x50>)
 8002548:	79fb      	ldrb	r3, [r7, #7]
 800254a:	f003 030f 	and.w	r3, r3, #15
 800254e:	3b04      	subs	r3, #4
 8002550:	0112      	lsls	r2, r2, #4
 8002552:	b2d2      	uxtb	r2, r2
 8002554:	440b      	add	r3, r1
 8002556:	761a      	strb	r2, [r3, #24]
}
 8002558:	bf00      	nop
 800255a:	370c      	adds	r7, #12
 800255c:	46bd      	mov	sp, r7
 800255e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002562:	4770      	bx	lr
 8002564:	e000e100 	.word	0xe000e100
 8002568:	e000ed00 	.word	0xe000ed00

0800256c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800256c:	b480      	push	{r7}
 800256e:	b089      	sub	sp, #36	; 0x24
 8002570:	af00      	add	r7, sp, #0
 8002572:	60f8      	str	r0, [r7, #12]
 8002574:	60b9      	str	r1, [r7, #8]
 8002576:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002578:	68fb      	ldr	r3, [r7, #12]
 800257a:	f003 0307 	and.w	r3, r3, #7
 800257e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002580:	69fb      	ldr	r3, [r7, #28]
 8002582:	f1c3 0307 	rsb	r3, r3, #7
 8002586:	2b04      	cmp	r3, #4
 8002588:	bf28      	it	cs
 800258a:	2304      	movcs	r3, #4
 800258c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800258e:	69fb      	ldr	r3, [r7, #28]
 8002590:	3304      	adds	r3, #4
 8002592:	2b06      	cmp	r3, #6
 8002594:	d902      	bls.n	800259c <NVIC_EncodePriority+0x30>
 8002596:	69fb      	ldr	r3, [r7, #28]
 8002598:	3b03      	subs	r3, #3
 800259a:	e000      	b.n	800259e <NVIC_EncodePriority+0x32>
 800259c:	2300      	movs	r3, #0
 800259e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80025a0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80025a4:	69bb      	ldr	r3, [r7, #24]
 80025a6:	fa02 f303 	lsl.w	r3, r2, r3
 80025aa:	43da      	mvns	r2, r3
 80025ac:	68bb      	ldr	r3, [r7, #8]
 80025ae:	401a      	ands	r2, r3
 80025b0:	697b      	ldr	r3, [r7, #20]
 80025b2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80025b4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80025b8:	697b      	ldr	r3, [r7, #20]
 80025ba:	fa01 f303 	lsl.w	r3, r1, r3
 80025be:	43d9      	mvns	r1, r3
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80025c4:	4313      	orrs	r3, r2
         );
}
 80025c6:	4618      	mov	r0, r3
 80025c8:	3724      	adds	r7, #36	; 0x24
 80025ca:	46bd      	mov	sp, r7
 80025cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025d0:	4770      	bx	lr

080025d2 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80025d2:	b580      	push	{r7, lr}
 80025d4:	b082      	sub	sp, #8
 80025d6:	af00      	add	r7, sp, #0
 80025d8:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80025da:	6878      	ldr	r0, [r7, #4]
 80025dc:	f7ff ff4c 	bl	8002478 <__NVIC_SetPriorityGrouping>
}
 80025e0:	bf00      	nop
 80025e2:	3708      	adds	r7, #8
 80025e4:	46bd      	mov	sp, r7
 80025e6:	bd80      	pop	{r7, pc}

080025e8 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80025e8:	b580      	push	{r7, lr}
 80025ea:	b086      	sub	sp, #24
 80025ec:	af00      	add	r7, sp, #0
 80025ee:	4603      	mov	r3, r0
 80025f0:	60b9      	str	r1, [r7, #8]
 80025f2:	607a      	str	r2, [r7, #4]
 80025f4:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80025f6:	2300      	movs	r3, #0
 80025f8:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80025fa:	f7ff ff61 	bl	80024c0 <__NVIC_GetPriorityGrouping>
 80025fe:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002600:	687a      	ldr	r2, [r7, #4]
 8002602:	68b9      	ldr	r1, [r7, #8]
 8002604:	6978      	ldr	r0, [r7, #20]
 8002606:	f7ff ffb1 	bl	800256c <NVIC_EncodePriority>
 800260a:	4602      	mov	r2, r0
 800260c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002610:	4611      	mov	r1, r2
 8002612:	4618      	mov	r0, r3
 8002614:	f7ff ff80 	bl	8002518 <__NVIC_SetPriority>
}
 8002618:	bf00      	nop
 800261a:	3718      	adds	r7, #24
 800261c:	46bd      	mov	sp, r7
 800261e:	bd80      	pop	{r7, pc}

08002620 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002620:	b580      	push	{r7, lr}
 8002622:	b082      	sub	sp, #8
 8002624:	af00      	add	r7, sp, #0
 8002626:	4603      	mov	r3, r0
 8002628:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800262a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800262e:	4618      	mov	r0, r3
 8002630:	f7ff ff54 	bl	80024dc <__NVIC_EnableIRQ>
}
 8002634:	bf00      	nop
 8002636:	3708      	adds	r7, #8
 8002638:	46bd      	mov	sp, r7
 800263a:	bd80      	pop	{r7, pc}

0800263c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800263c:	b480      	push	{r7}
 800263e:	b089      	sub	sp, #36	; 0x24
 8002640:	af00      	add	r7, sp, #0
 8002642:	6078      	str	r0, [r7, #4]
 8002644:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002646:	2300      	movs	r3, #0
 8002648:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800264a:	2300      	movs	r3, #0
 800264c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800264e:	2300      	movs	r3, #0
 8002650:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002652:	2300      	movs	r3, #0
 8002654:	61fb      	str	r3, [r7, #28]
 8002656:	e159      	b.n	800290c <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002658:	2201      	movs	r2, #1
 800265a:	69fb      	ldr	r3, [r7, #28]
 800265c:	fa02 f303 	lsl.w	r3, r2, r3
 8002660:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002662:	683b      	ldr	r3, [r7, #0]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	697a      	ldr	r2, [r7, #20]
 8002668:	4013      	ands	r3, r2
 800266a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800266c:	693a      	ldr	r2, [r7, #16]
 800266e:	697b      	ldr	r3, [r7, #20]
 8002670:	429a      	cmp	r2, r3
 8002672:	f040 8148 	bne.w	8002906 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002676:	683b      	ldr	r3, [r7, #0]
 8002678:	685b      	ldr	r3, [r3, #4]
 800267a:	f003 0303 	and.w	r3, r3, #3
 800267e:	2b01      	cmp	r3, #1
 8002680:	d005      	beq.n	800268e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002682:	683b      	ldr	r3, [r7, #0]
 8002684:	685b      	ldr	r3, [r3, #4]
 8002686:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800268a:	2b02      	cmp	r3, #2
 800268c:	d130      	bne.n	80026f0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	689b      	ldr	r3, [r3, #8]
 8002692:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002694:	69fb      	ldr	r3, [r7, #28]
 8002696:	005b      	lsls	r3, r3, #1
 8002698:	2203      	movs	r2, #3
 800269a:	fa02 f303 	lsl.w	r3, r2, r3
 800269e:	43db      	mvns	r3, r3
 80026a0:	69ba      	ldr	r2, [r7, #24]
 80026a2:	4013      	ands	r3, r2
 80026a4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80026a6:	683b      	ldr	r3, [r7, #0]
 80026a8:	68da      	ldr	r2, [r3, #12]
 80026aa:	69fb      	ldr	r3, [r7, #28]
 80026ac:	005b      	lsls	r3, r3, #1
 80026ae:	fa02 f303 	lsl.w	r3, r2, r3
 80026b2:	69ba      	ldr	r2, [r7, #24]
 80026b4:	4313      	orrs	r3, r2
 80026b6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	69ba      	ldr	r2, [r7, #24]
 80026bc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	685b      	ldr	r3, [r3, #4]
 80026c2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80026c4:	2201      	movs	r2, #1
 80026c6:	69fb      	ldr	r3, [r7, #28]
 80026c8:	fa02 f303 	lsl.w	r3, r2, r3
 80026cc:	43db      	mvns	r3, r3
 80026ce:	69ba      	ldr	r2, [r7, #24]
 80026d0:	4013      	ands	r3, r2
 80026d2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80026d4:	683b      	ldr	r3, [r7, #0]
 80026d6:	685b      	ldr	r3, [r3, #4]
 80026d8:	091b      	lsrs	r3, r3, #4
 80026da:	f003 0201 	and.w	r2, r3, #1
 80026de:	69fb      	ldr	r3, [r7, #28]
 80026e0:	fa02 f303 	lsl.w	r3, r2, r3
 80026e4:	69ba      	ldr	r2, [r7, #24]
 80026e6:	4313      	orrs	r3, r2
 80026e8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	69ba      	ldr	r2, [r7, #24]
 80026ee:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80026f0:	683b      	ldr	r3, [r7, #0]
 80026f2:	685b      	ldr	r3, [r3, #4]
 80026f4:	f003 0303 	and.w	r3, r3, #3
 80026f8:	2b03      	cmp	r3, #3
 80026fa:	d017      	beq.n	800272c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	68db      	ldr	r3, [r3, #12]
 8002700:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002702:	69fb      	ldr	r3, [r7, #28]
 8002704:	005b      	lsls	r3, r3, #1
 8002706:	2203      	movs	r2, #3
 8002708:	fa02 f303 	lsl.w	r3, r2, r3
 800270c:	43db      	mvns	r3, r3
 800270e:	69ba      	ldr	r2, [r7, #24]
 8002710:	4013      	ands	r3, r2
 8002712:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002714:	683b      	ldr	r3, [r7, #0]
 8002716:	689a      	ldr	r2, [r3, #8]
 8002718:	69fb      	ldr	r3, [r7, #28]
 800271a:	005b      	lsls	r3, r3, #1
 800271c:	fa02 f303 	lsl.w	r3, r2, r3
 8002720:	69ba      	ldr	r2, [r7, #24]
 8002722:	4313      	orrs	r3, r2
 8002724:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	69ba      	ldr	r2, [r7, #24]
 800272a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800272c:	683b      	ldr	r3, [r7, #0]
 800272e:	685b      	ldr	r3, [r3, #4]
 8002730:	f003 0303 	and.w	r3, r3, #3
 8002734:	2b02      	cmp	r3, #2
 8002736:	d123      	bne.n	8002780 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002738:	69fb      	ldr	r3, [r7, #28]
 800273a:	08da      	lsrs	r2, r3, #3
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	3208      	adds	r2, #8
 8002740:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002744:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002746:	69fb      	ldr	r3, [r7, #28]
 8002748:	f003 0307 	and.w	r3, r3, #7
 800274c:	009b      	lsls	r3, r3, #2
 800274e:	220f      	movs	r2, #15
 8002750:	fa02 f303 	lsl.w	r3, r2, r3
 8002754:	43db      	mvns	r3, r3
 8002756:	69ba      	ldr	r2, [r7, #24]
 8002758:	4013      	ands	r3, r2
 800275a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800275c:	683b      	ldr	r3, [r7, #0]
 800275e:	691a      	ldr	r2, [r3, #16]
 8002760:	69fb      	ldr	r3, [r7, #28]
 8002762:	f003 0307 	and.w	r3, r3, #7
 8002766:	009b      	lsls	r3, r3, #2
 8002768:	fa02 f303 	lsl.w	r3, r2, r3
 800276c:	69ba      	ldr	r2, [r7, #24]
 800276e:	4313      	orrs	r3, r2
 8002770:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002772:	69fb      	ldr	r3, [r7, #28]
 8002774:	08da      	lsrs	r2, r3, #3
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	3208      	adds	r2, #8
 800277a:	69b9      	ldr	r1, [r7, #24]
 800277c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002786:	69fb      	ldr	r3, [r7, #28]
 8002788:	005b      	lsls	r3, r3, #1
 800278a:	2203      	movs	r2, #3
 800278c:	fa02 f303 	lsl.w	r3, r2, r3
 8002790:	43db      	mvns	r3, r3
 8002792:	69ba      	ldr	r2, [r7, #24]
 8002794:	4013      	ands	r3, r2
 8002796:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002798:	683b      	ldr	r3, [r7, #0]
 800279a:	685b      	ldr	r3, [r3, #4]
 800279c:	f003 0203 	and.w	r2, r3, #3
 80027a0:	69fb      	ldr	r3, [r7, #28]
 80027a2:	005b      	lsls	r3, r3, #1
 80027a4:	fa02 f303 	lsl.w	r3, r2, r3
 80027a8:	69ba      	ldr	r2, [r7, #24]
 80027aa:	4313      	orrs	r3, r2
 80027ac:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	69ba      	ldr	r2, [r7, #24]
 80027b2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80027b4:	683b      	ldr	r3, [r7, #0]
 80027b6:	685b      	ldr	r3, [r3, #4]
 80027b8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80027bc:	2b00      	cmp	r3, #0
 80027be:	f000 80a2 	beq.w	8002906 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80027c2:	2300      	movs	r3, #0
 80027c4:	60fb      	str	r3, [r7, #12]
 80027c6:	4b57      	ldr	r3, [pc, #348]	; (8002924 <HAL_GPIO_Init+0x2e8>)
 80027c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027ca:	4a56      	ldr	r2, [pc, #344]	; (8002924 <HAL_GPIO_Init+0x2e8>)
 80027cc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80027d0:	6453      	str	r3, [r2, #68]	; 0x44
 80027d2:	4b54      	ldr	r3, [pc, #336]	; (8002924 <HAL_GPIO_Init+0x2e8>)
 80027d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027d6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80027da:	60fb      	str	r3, [r7, #12]
 80027dc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80027de:	4a52      	ldr	r2, [pc, #328]	; (8002928 <HAL_GPIO_Init+0x2ec>)
 80027e0:	69fb      	ldr	r3, [r7, #28]
 80027e2:	089b      	lsrs	r3, r3, #2
 80027e4:	3302      	adds	r3, #2
 80027e6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80027ea:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80027ec:	69fb      	ldr	r3, [r7, #28]
 80027ee:	f003 0303 	and.w	r3, r3, #3
 80027f2:	009b      	lsls	r3, r3, #2
 80027f4:	220f      	movs	r2, #15
 80027f6:	fa02 f303 	lsl.w	r3, r2, r3
 80027fa:	43db      	mvns	r3, r3
 80027fc:	69ba      	ldr	r2, [r7, #24]
 80027fe:	4013      	ands	r3, r2
 8002800:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	4a49      	ldr	r2, [pc, #292]	; (800292c <HAL_GPIO_Init+0x2f0>)
 8002806:	4293      	cmp	r3, r2
 8002808:	d019      	beq.n	800283e <HAL_GPIO_Init+0x202>
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	4a48      	ldr	r2, [pc, #288]	; (8002930 <HAL_GPIO_Init+0x2f4>)
 800280e:	4293      	cmp	r3, r2
 8002810:	d013      	beq.n	800283a <HAL_GPIO_Init+0x1fe>
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	4a47      	ldr	r2, [pc, #284]	; (8002934 <HAL_GPIO_Init+0x2f8>)
 8002816:	4293      	cmp	r3, r2
 8002818:	d00d      	beq.n	8002836 <HAL_GPIO_Init+0x1fa>
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	4a46      	ldr	r2, [pc, #280]	; (8002938 <HAL_GPIO_Init+0x2fc>)
 800281e:	4293      	cmp	r3, r2
 8002820:	d007      	beq.n	8002832 <HAL_GPIO_Init+0x1f6>
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	4a45      	ldr	r2, [pc, #276]	; (800293c <HAL_GPIO_Init+0x300>)
 8002826:	4293      	cmp	r3, r2
 8002828:	d101      	bne.n	800282e <HAL_GPIO_Init+0x1f2>
 800282a:	2304      	movs	r3, #4
 800282c:	e008      	b.n	8002840 <HAL_GPIO_Init+0x204>
 800282e:	2307      	movs	r3, #7
 8002830:	e006      	b.n	8002840 <HAL_GPIO_Init+0x204>
 8002832:	2303      	movs	r3, #3
 8002834:	e004      	b.n	8002840 <HAL_GPIO_Init+0x204>
 8002836:	2302      	movs	r3, #2
 8002838:	e002      	b.n	8002840 <HAL_GPIO_Init+0x204>
 800283a:	2301      	movs	r3, #1
 800283c:	e000      	b.n	8002840 <HAL_GPIO_Init+0x204>
 800283e:	2300      	movs	r3, #0
 8002840:	69fa      	ldr	r2, [r7, #28]
 8002842:	f002 0203 	and.w	r2, r2, #3
 8002846:	0092      	lsls	r2, r2, #2
 8002848:	4093      	lsls	r3, r2
 800284a:	69ba      	ldr	r2, [r7, #24]
 800284c:	4313      	orrs	r3, r2
 800284e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002850:	4935      	ldr	r1, [pc, #212]	; (8002928 <HAL_GPIO_Init+0x2ec>)
 8002852:	69fb      	ldr	r3, [r7, #28]
 8002854:	089b      	lsrs	r3, r3, #2
 8002856:	3302      	adds	r3, #2
 8002858:	69ba      	ldr	r2, [r7, #24]
 800285a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800285e:	4b38      	ldr	r3, [pc, #224]	; (8002940 <HAL_GPIO_Init+0x304>)
 8002860:	689b      	ldr	r3, [r3, #8]
 8002862:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002864:	693b      	ldr	r3, [r7, #16]
 8002866:	43db      	mvns	r3, r3
 8002868:	69ba      	ldr	r2, [r7, #24]
 800286a:	4013      	ands	r3, r2
 800286c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800286e:	683b      	ldr	r3, [r7, #0]
 8002870:	685b      	ldr	r3, [r3, #4]
 8002872:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002876:	2b00      	cmp	r3, #0
 8002878:	d003      	beq.n	8002882 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800287a:	69ba      	ldr	r2, [r7, #24]
 800287c:	693b      	ldr	r3, [r7, #16]
 800287e:	4313      	orrs	r3, r2
 8002880:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002882:	4a2f      	ldr	r2, [pc, #188]	; (8002940 <HAL_GPIO_Init+0x304>)
 8002884:	69bb      	ldr	r3, [r7, #24]
 8002886:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002888:	4b2d      	ldr	r3, [pc, #180]	; (8002940 <HAL_GPIO_Init+0x304>)
 800288a:	68db      	ldr	r3, [r3, #12]
 800288c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800288e:	693b      	ldr	r3, [r7, #16]
 8002890:	43db      	mvns	r3, r3
 8002892:	69ba      	ldr	r2, [r7, #24]
 8002894:	4013      	ands	r3, r2
 8002896:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002898:	683b      	ldr	r3, [r7, #0]
 800289a:	685b      	ldr	r3, [r3, #4]
 800289c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	d003      	beq.n	80028ac <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80028a4:	69ba      	ldr	r2, [r7, #24]
 80028a6:	693b      	ldr	r3, [r7, #16]
 80028a8:	4313      	orrs	r3, r2
 80028aa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80028ac:	4a24      	ldr	r2, [pc, #144]	; (8002940 <HAL_GPIO_Init+0x304>)
 80028ae:	69bb      	ldr	r3, [r7, #24]
 80028b0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80028b2:	4b23      	ldr	r3, [pc, #140]	; (8002940 <HAL_GPIO_Init+0x304>)
 80028b4:	685b      	ldr	r3, [r3, #4]
 80028b6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80028b8:	693b      	ldr	r3, [r7, #16]
 80028ba:	43db      	mvns	r3, r3
 80028bc:	69ba      	ldr	r2, [r7, #24]
 80028be:	4013      	ands	r3, r2
 80028c0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80028c2:	683b      	ldr	r3, [r7, #0]
 80028c4:	685b      	ldr	r3, [r3, #4]
 80028c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d003      	beq.n	80028d6 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80028ce:	69ba      	ldr	r2, [r7, #24]
 80028d0:	693b      	ldr	r3, [r7, #16]
 80028d2:	4313      	orrs	r3, r2
 80028d4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80028d6:	4a1a      	ldr	r2, [pc, #104]	; (8002940 <HAL_GPIO_Init+0x304>)
 80028d8:	69bb      	ldr	r3, [r7, #24]
 80028da:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80028dc:	4b18      	ldr	r3, [pc, #96]	; (8002940 <HAL_GPIO_Init+0x304>)
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80028e2:	693b      	ldr	r3, [r7, #16]
 80028e4:	43db      	mvns	r3, r3
 80028e6:	69ba      	ldr	r2, [r7, #24]
 80028e8:	4013      	ands	r3, r2
 80028ea:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80028ec:	683b      	ldr	r3, [r7, #0]
 80028ee:	685b      	ldr	r3, [r3, #4]
 80028f0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	d003      	beq.n	8002900 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80028f8:	69ba      	ldr	r2, [r7, #24]
 80028fa:	693b      	ldr	r3, [r7, #16]
 80028fc:	4313      	orrs	r3, r2
 80028fe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002900:	4a0f      	ldr	r2, [pc, #60]	; (8002940 <HAL_GPIO_Init+0x304>)
 8002902:	69bb      	ldr	r3, [r7, #24]
 8002904:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002906:	69fb      	ldr	r3, [r7, #28]
 8002908:	3301      	adds	r3, #1
 800290a:	61fb      	str	r3, [r7, #28]
 800290c:	69fb      	ldr	r3, [r7, #28]
 800290e:	2b0f      	cmp	r3, #15
 8002910:	f67f aea2 	bls.w	8002658 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002914:	bf00      	nop
 8002916:	bf00      	nop
 8002918:	3724      	adds	r7, #36	; 0x24
 800291a:	46bd      	mov	sp, r7
 800291c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002920:	4770      	bx	lr
 8002922:	bf00      	nop
 8002924:	40023800 	.word	0x40023800
 8002928:	40013800 	.word	0x40013800
 800292c:	40020000 	.word	0x40020000
 8002930:	40020400 	.word	0x40020400
 8002934:	40020800 	.word	0x40020800
 8002938:	40020c00 	.word	0x40020c00
 800293c:	40021000 	.word	0x40021000
 8002940:	40013c00 	.word	0x40013c00

08002944 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002944:	b480      	push	{r7}
 8002946:	b083      	sub	sp, #12
 8002948:	af00      	add	r7, sp, #0
 800294a:	6078      	str	r0, [r7, #4]
 800294c:	460b      	mov	r3, r1
 800294e:	807b      	strh	r3, [r7, #2]
 8002950:	4613      	mov	r3, r2
 8002952:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002954:	787b      	ldrb	r3, [r7, #1]
 8002956:	2b00      	cmp	r3, #0
 8002958:	d003      	beq.n	8002962 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800295a:	887a      	ldrh	r2, [r7, #2]
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002960:	e003      	b.n	800296a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002962:	887b      	ldrh	r3, [r7, #2]
 8002964:	041a      	lsls	r2, r3, #16
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	619a      	str	r2, [r3, #24]
}
 800296a:	bf00      	nop
 800296c:	370c      	adds	r7, #12
 800296e:	46bd      	mov	sp, r7
 8002970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002974:	4770      	bx	lr

08002976 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002976:	b480      	push	{r7}
 8002978:	b085      	sub	sp, #20
 800297a:	af00      	add	r7, sp, #0
 800297c:	6078      	str	r0, [r7, #4]
 800297e:	460b      	mov	r3, r1
 8002980:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	695b      	ldr	r3, [r3, #20]
 8002986:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002988:	887a      	ldrh	r2, [r7, #2]
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	4013      	ands	r3, r2
 800298e:	041a      	lsls	r2, r3, #16
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	43d9      	mvns	r1, r3
 8002994:	887b      	ldrh	r3, [r7, #2]
 8002996:	400b      	ands	r3, r1
 8002998:	431a      	orrs	r2, r3
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	619a      	str	r2, [r3, #24]
}
 800299e:	bf00      	nop
 80029a0:	3714      	adds	r7, #20
 80029a2:	46bd      	mov	sp, r7
 80029a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029a8:	4770      	bx	lr
	...

080029ac <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80029ac:	b580      	push	{r7, lr}
 80029ae:	b084      	sub	sp, #16
 80029b0:	af00      	add	r7, sp, #0
 80029b2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d101      	bne.n	80029be <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80029ba:	2301      	movs	r3, #1
 80029bc:	e12b      	b.n	8002c16 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80029c4:	b2db      	uxtb	r3, r3
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d106      	bne.n	80029d8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	2200      	movs	r2, #0
 80029ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80029d2:	6878      	ldr	r0, [r7, #4]
 80029d4:	f7ff f914 	bl	8001c00 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	2224      	movs	r2, #36	; 0x24
 80029dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	681a      	ldr	r2, [r3, #0]
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	f022 0201 	bic.w	r2, r2, #1
 80029ee:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	681a      	ldr	r2, [r3, #0]
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80029fe:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	681a      	ldr	r2, [r3, #0]
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002a0e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002a10:	f001 fbec 	bl	80041ec <HAL_RCC_GetPCLK1Freq>
 8002a14:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	685b      	ldr	r3, [r3, #4]
 8002a1a:	4a81      	ldr	r2, [pc, #516]	; (8002c20 <HAL_I2C_Init+0x274>)
 8002a1c:	4293      	cmp	r3, r2
 8002a1e:	d807      	bhi.n	8002a30 <HAL_I2C_Init+0x84>
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	4a80      	ldr	r2, [pc, #512]	; (8002c24 <HAL_I2C_Init+0x278>)
 8002a24:	4293      	cmp	r3, r2
 8002a26:	bf94      	ite	ls
 8002a28:	2301      	movls	r3, #1
 8002a2a:	2300      	movhi	r3, #0
 8002a2c:	b2db      	uxtb	r3, r3
 8002a2e:	e006      	b.n	8002a3e <HAL_I2C_Init+0x92>
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	4a7d      	ldr	r2, [pc, #500]	; (8002c28 <HAL_I2C_Init+0x27c>)
 8002a34:	4293      	cmp	r3, r2
 8002a36:	bf94      	ite	ls
 8002a38:	2301      	movls	r3, #1
 8002a3a:	2300      	movhi	r3, #0
 8002a3c:	b2db      	uxtb	r3, r3
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d001      	beq.n	8002a46 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002a42:	2301      	movs	r3, #1
 8002a44:	e0e7      	b.n	8002c16 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002a46:	68fb      	ldr	r3, [r7, #12]
 8002a48:	4a78      	ldr	r2, [pc, #480]	; (8002c2c <HAL_I2C_Init+0x280>)
 8002a4a:	fba2 2303 	umull	r2, r3, r2, r3
 8002a4e:	0c9b      	lsrs	r3, r3, #18
 8002a50:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	685b      	ldr	r3, [r3, #4]
 8002a58:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	68ba      	ldr	r2, [r7, #8]
 8002a62:	430a      	orrs	r2, r1
 8002a64:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	6a1b      	ldr	r3, [r3, #32]
 8002a6c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	685b      	ldr	r3, [r3, #4]
 8002a74:	4a6a      	ldr	r2, [pc, #424]	; (8002c20 <HAL_I2C_Init+0x274>)
 8002a76:	4293      	cmp	r3, r2
 8002a78:	d802      	bhi.n	8002a80 <HAL_I2C_Init+0xd4>
 8002a7a:	68bb      	ldr	r3, [r7, #8]
 8002a7c:	3301      	adds	r3, #1
 8002a7e:	e009      	b.n	8002a94 <HAL_I2C_Init+0xe8>
 8002a80:	68bb      	ldr	r3, [r7, #8]
 8002a82:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002a86:	fb02 f303 	mul.w	r3, r2, r3
 8002a8a:	4a69      	ldr	r2, [pc, #420]	; (8002c30 <HAL_I2C_Init+0x284>)
 8002a8c:	fba2 2303 	umull	r2, r3, r2, r3
 8002a90:	099b      	lsrs	r3, r3, #6
 8002a92:	3301      	adds	r3, #1
 8002a94:	687a      	ldr	r2, [r7, #4]
 8002a96:	6812      	ldr	r2, [r2, #0]
 8002a98:	430b      	orrs	r3, r1
 8002a9a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	69db      	ldr	r3, [r3, #28]
 8002aa2:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002aa6:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	685b      	ldr	r3, [r3, #4]
 8002aae:	495c      	ldr	r1, [pc, #368]	; (8002c20 <HAL_I2C_Init+0x274>)
 8002ab0:	428b      	cmp	r3, r1
 8002ab2:	d819      	bhi.n	8002ae8 <HAL_I2C_Init+0x13c>
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	1e59      	subs	r1, r3, #1
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	685b      	ldr	r3, [r3, #4]
 8002abc:	005b      	lsls	r3, r3, #1
 8002abe:	fbb1 f3f3 	udiv	r3, r1, r3
 8002ac2:	1c59      	adds	r1, r3, #1
 8002ac4:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002ac8:	400b      	ands	r3, r1
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d00a      	beq.n	8002ae4 <HAL_I2C_Init+0x138>
 8002ace:	68fb      	ldr	r3, [r7, #12]
 8002ad0:	1e59      	subs	r1, r3, #1
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	685b      	ldr	r3, [r3, #4]
 8002ad6:	005b      	lsls	r3, r3, #1
 8002ad8:	fbb1 f3f3 	udiv	r3, r1, r3
 8002adc:	3301      	adds	r3, #1
 8002ade:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002ae2:	e051      	b.n	8002b88 <HAL_I2C_Init+0x1dc>
 8002ae4:	2304      	movs	r3, #4
 8002ae6:	e04f      	b.n	8002b88 <HAL_I2C_Init+0x1dc>
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	689b      	ldr	r3, [r3, #8]
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	d111      	bne.n	8002b14 <HAL_I2C_Init+0x168>
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	1e58      	subs	r0, r3, #1
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	6859      	ldr	r1, [r3, #4]
 8002af8:	460b      	mov	r3, r1
 8002afa:	005b      	lsls	r3, r3, #1
 8002afc:	440b      	add	r3, r1
 8002afe:	fbb0 f3f3 	udiv	r3, r0, r3
 8002b02:	3301      	adds	r3, #1
 8002b04:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	bf0c      	ite	eq
 8002b0c:	2301      	moveq	r3, #1
 8002b0e:	2300      	movne	r3, #0
 8002b10:	b2db      	uxtb	r3, r3
 8002b12:	e012      	b.n	8002b3a <HAL_I2C_Init+0x18e>
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	1e58      	subs	r0, r3, #1
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	6859      	ldr	r1, [r3, #4]
 8002b1c:	460b      	mov	r3, r1
 8002b1e:	009b      	lsls	r3, r3, #2
 8002b20:	440b      	add	r3, r1
 8002b22:	0099      	lsls	r1, r3, #2
 8002b24:	440b      	add	r3, r1
 8002b26:	fbb0 f3f3 	udiv	r3, r0, r3
 8002b2a:	3301      	adds	r3, #1
 8002b2c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	bf0c      	ite	eq
 8002b34:	2301      	moveq	r3, #1
 8002b36:	2300      	movne	r3, #0
 8002b38:	b2db      	uxtb	r3, r3
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d001      	beq.n	8002b42 <HAL_I2C_Init+0x196>
 8002b3e:	2301      	movs	r3, #1
 8002b40:	e022      	b.n	8002b88 <HAL_I2C_Init+0x1dc>
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	689b      	ldr	r3, [r3, #8]
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d10e      	bne.n	8002b68 <HAL_I2C_Init+0x1bc>
 8002b4a:	68fb      	ldr	r3, [r7, #12]
 8002b4c:	1e58      	subs	r0, r3, #1
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	6859      	ldr	r1, [r3, #4]
 8002b52:	460b      	mov	r3, r1
 8002b54:	005b      	lsls	r3, r3, #1
 8002b56:	440b      	add	r3, r1
 8002b58:	fbb0 f3f3 	udiv	r3, r0, r3
 8002b5c:	3301      	adds	r3, #1
 8002b5e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002b62:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002b66:	e00f      	b.n	8002b88 <HAL_I2C_Init+0x1dc>
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	1e58      	subs	r0, r3, #1
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	6859      	ldr	r1, [r3, #4]
 8002b70:	460b      	mov	r3, r1
 8002b72:	009b      	lsls	r3, r3, #2
 8002b74:	440b      	add	r3, r1
 8002b76:	0099      	lsls	r1, r3, #2
 8002b78:	440b      	add	r3, r1
 8002b7a:	fbb0 f3f3 	udiv	r3, r0, r3
 8002b7e:	3301      	adds	r3, #1
 8002b80:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002b84:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002b88:	6879      	ldr	r1, [r7, #4]
 8002b8a:	6809      	ldr	r1, [r1, #0]
 8002b8c:	4313      	orrs	r3, r2
 8002b8e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	69da      	ldr	r2, [r3, #28]
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	6a1b      	ldr	r3, [r3, #32]
 8002ba2:	431a      	orrs	r2, r3
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	430a      	orrs	r2, r1
 8002baa:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	689b      	ldr	r3, [r3, #8]
 8002bb2:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002bb6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002bba:	687a      	ldr	r2, [r7, #4]
 8002bbc:	6911      	ldr	r1, [r2, #16]
 8002bbe:	687a      	ldr	r2, [r7, #4]
 8002bc0:	68d2      	ldr	r2, [r2, #12]
 8002bc2:	4311      	orrs	r1, r2
 8002bc4:	687a      	ldr	r2, [r7, #4]
 8002bc6:	6812      	ldr	r2, [r2, #0]
 8002bc8:	430b      	orrs	r3, r1
 8002bca:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	68db      	ldr	r3, [r3, #12]
 8002bd2:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	695a      	ldr	r2, [r3, #20]
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	699b      	ldr	r3, [r3, #24]
 8002bde:	431a      	orrs	r2, r3
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	430a      	orrs	r2, r1
 8002be6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	681a      	ldr	r2, [r3, #0]
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	f042 0201 	orr.w	r2, r2, #1
 8002bf6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	2200      	movs	r2, #0
 8002bfc:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	2220      	movs	r2, #32
 8002c02:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	2200      	movs	r2, #0
 8002c0a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	2200      	movs	r2, #0
 8002c10:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002c14:	2300      	movs	r3, #0
}
 8002c16:	4618      	mov	r0, r3
 8002c18:	3710      	adds	r7, #16
 8002c1a:	46bd      	mov	sp, r7
 8002c1c:	bd80      	pop	{r7, pc}
 8002c1e:	bf00      	nop
 8002c20:	000186a0 	.word	0x000186a0
 8002c24:	001e847f 	.word	0x001e847f
 8002c28:	003d08ff 	.word	0x003d08ff
 8002c2c:	431bde83 	.word	0x431bde83
 8002c30:	10624dd3 	.word	0x10624dd3

08002c34 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002c34:	b580      	push	{r7, lr}
 8002c36:	b088      	sub	sp, #32
 8002c38:	af02      	add	r7, sp, #8
 8002c3a:	60f8      	str	r0, [r7, #12]
 8002c3c:	607a      	str	r2, [r7, #4]
 8002c3e:	461a      	mov	r2, r3
 8002c40:	460b      	mov	r3, r1
 8002c42:	817b      	strh	r3, [r7, #10]
 8002c44:	4613      	mov	r3, r2
 8002c46:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002c48:	f7ff fbe6 	bl	8002418 <HAL_GetTick>
 8002c4c:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002c4e:	68fb      	ldr	r3, [r7, #12]
 8002c50:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002c54:	b2db      	uxtb	r3, r3
 8002c56:	2b20      	cmp	r3, #32
 8002c58:	f040 80e0 	bne.w	8002e1c <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002c5c:	697b      	ldr	r3, [r7, #20]
 8002c5e:	9300      	str	r3, [sp, #0]
 8002c60:	2319      	movs	r3, #25
 8002c62:	2201      	movs	r2, #1
 8002c64:	4970      	ldr	r1, [pc, #448]	; (8002e28 <HAL_I2C_Master_Transmit+0x1f4>)
 8002c66:	68f8      	ldr	r0, [r7, #12]
 8002c68:	f000 fc72 	bl	8003550 <I2C_WaitOnFlagUntilTimeout>
 8002c6c:	4603      	mov	r3, r0
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d001      	beq.n	8002c76 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8002c72:	2302      	movs	r3, #2
 8002c74:	e0d3      	b.n	8002e1e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002c76:	68fb      	ldr	r3, [r7, #12]
 8002c78:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002c7c:	2b01      	cmp	r3, #1
 8002c7e:	d101      	bne.n	8002c84 <HAL_I2C_Master_Transmit+0x50>
 8002c80:	2302      	movs	r3, #2
 8002c82:	e0cc      	b.n	8002e1e <HAL_I2C_Master_Transmit+0x1ea>
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	2201      	movs	r2, #1
 8002c88:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	f003 0301 	and.w	r3, r3, #1
 8002c96:	2b01      	cmp	r3, #1
 8002c98:	d007      	beq.n	8002caa <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	681a      	ldr	r2, [r3, #0]
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	f042 0201 	orr.w	r2, r2, #1
 8002ca8:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	681a      	ldr	r2, [r3, #0]
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002cb8:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	2221      	movs	r2, #33	; 0x21
 8002cbe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	2210      	movs	r2, #16
 8002cc6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002cca:	68fb      	ldr	r3, [r7, #12]
 8002ccc:	2200      	movs	r2, #0
 8002cce:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	687a      	ldr	r2, [r7, #4]
 8002cd4:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002cd6:	68fb      	ldr	r3, [r7, #12]
 8002cd8:	893a      	ldrh	r2, [r7, #8]
 8002cda:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ce0:	b29a      	uxth	r2, r3
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002ce6:	68fb      	ldr	r3, [r7, #12]
 8002ce8:	4a50      	ldr	r2, [pc, #320]	; (8002e2c <HAL_I2C_Master_Transmit+0x1f8>)
 8002cea:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002cec:	8979      	ldrh	r1, [r7, #10]
 8002cee:	697b      	ldr	r3, [r7, #20]
 8002cf0:	6a3a      	ldr	r2, [r7, #32]
 8002cf2:	68f8      	ldr	r0, [r7, #12]
 8002cf4:	f000 fadc 	bl	80032b0 <I2C_MasterRequestWrite>
 8002cf8:	4603      	mov	r3, r0
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d001      	beq.n	8002d02 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8002cfe:	2301      	movs	r3, #1
 8002d00:	e08d      	b.n	8002e1e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002d02:	2300      	movs	r3, #0
 8002d04:	613b      	str	r3, [r7, #16]
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	695b      	ldr	r3, [r3, #20]
 8002d0c:	613b      	str	r3, [r7, #16]
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	699b      	ldr	r3, [r3, #24]
 8002d14:	613b      	str	r3, [r7, #16]
 8002d16:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8002d18:	e066      	b.n	8002de8 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002d1a:	697a      	ldr	r2, [r7, #20]
 8002d1c:	6a39      	ldr	r1, [r7, #32]
 8002d1e:	68f8      	ldr	r0, [r7, #12]
 8002d20:	f000 fcec 	bl	80036fc <I2C_WaitOnTXEFlagUntilTimeout>
 8002d24:	4603      	mov	r3, r0
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d00d      	beq.n	8002d46 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002d2a:	68fb      	ldr	r3, [r7, #12]
 8002d2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d2e:	2b04      	cmp	r3, #4
 8002d30:	d107      	bne.n	8002d42 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002d32:	68fb      	ldr	r3, [r7, #12]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	681a      	ldr	r2, [r3, #0]
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002d40:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002d42:	2301      	movs	r3, #1
 8002d44:	e06b      	b.n	8002e1e <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d4a:	781a      	ldrb	r2, [r3, #0]
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002d52:	68fb      	ldr	r3, [r7, #12]
 8002d54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d56:	1c5a      	adds	r2, r3, #1
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d60:	b29b      	uxth	r3, r3
 8002d62:	3b01      	subs	r3, #1
 8002d64:	b29a      	uxth	r2, r3
 8002d66:	68fb      	ldr	r3, [r7, #12]
 8002d68:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d6e:	3b01      	subs	r3, #1
 8002d70:	b29a      	uxth	r2, r3
 8002d72:	68fb      	ldr	r3, [r7, #12]
 8002d74:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	695b      	ldr	r3, [r3, #20]
 8002d7c:	f003 0304 	and.w	r3, r3, #4
 8002d80:	2b04      	cmp	r3, #4
 8002d82:	d11b      	bne.n	8002dbc <HAL_I2C_Master_Transmit+0x188>
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	d017      	beq.n	8002dbc <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d90:	781a      	ldrb	r2, [r3, #0]
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d9c:	1c5a      	adds	r2, r3, #1
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002da6:	b29b      	uxth	r3, r3
 8002da8:	3b01      	subs	r3, #1
 8002daa:	b29a      	uxth	r2, r3
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002db4:	3b01      	subs	r3, #1
 8002db6:	b29a      	uxth	r2, r3
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002dbc:	697a      	ldr	r2, [r7, #20]
 8002dbe:	6a39      	ldr	r1, [r7, #32]
 8002dc0:	68f8      	ldr	r0, [r7, #12]
 8002dc2:	f000 fcdc 	bl	800377e <I2C_WaitOnBTFFlagUntilTimeout>
 8002dc6:	4603      	mov	r3, r0
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	d00d      	beq.n	8002de8 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dd0:	2b04      	cmp	r3, #4
 8002dd2:	d107      	bne.n	8002de4 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	681a      	ldr	r2, [r3, #0]
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002de2:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002de4:	2301      	movs	r3, #1
 8002de6:	e01a      	b.n	8002e1e <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	d194      	bne.n	8002d1a <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	681a      	ldr	r2, [r3, #0]
 8002df6:	68fb      	ldr	r3, [r7, #12]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002dfe:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	2220      	movs	r2, #32
 8002e04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	2200      	movs	r2, #0
 8002e0c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	2200      	movs	r2, #0
 8002e14:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002e18:	2300      	movs	r3, #0
 8002e1a:	e000      	b.n	8002e1e <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8002e1c:	2302      	movs	r3, #2
  }
}
 8002e1e:	4618      	mov	r0, r3
 8002e20:	3718      	adds	r7, #24
 8002e22:	46bd      	mov	sp, r7
 8002e24:	bd80      	pop	{r7, pc}
 8002e26:	bf00      	nop
 8002e28:	00100002 	.word	0x00100002
 8002e2c:	ffff0000 	.word	0xffff0000

08002e30 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002e30:	b580      	push	{r7, lr}
 8002e32:	b08c      	sub	sp, #48	; 0x30
 8002e34:	af02      	add	r7, sp, #8
 8002e36:	60f8      	str	r0, [r7, #12]
 8002e38:	607a      	str	r2, [r7, #4]
 8002e3a:	461a      	mov	r2, r3
 8002e3c:	460b      	mov	r3, r1
 8002e3e:	817b      	strh	r3, [r7, #10]
 8002e40:	4613      	mov	r3, r2
 8002e42:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002e44:	f7ff fae8 	bl	8002418 <HAL_GetTick>
 8002e48:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002e50:	b2db      	uxtb	r3, r3
 8002e52:	2b20      	cmp	r3, #32
 8002e54:	f040 820b 	bne.w	800326e <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002e58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e5a:	9300      	str	r3, [sp, #0]
 8002e5c:	2319      	movs	r3, #25
 8002e5e:	2201      	movs	r2, #1
 8002e60:	497c      	ldr	r1, [pc, #496]	; (8003054 <HAL_I2C_Master_Receive+0x224>)
 8002e62:	68f8      	ldr	r0, [r7, #12]
 8002e64:	f000 fb74 	bl	8003550 <I2C_WaitOnFlagUntilTimeout>
 8002e68:	4603      	mov	r3, r0
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	d001      	beq.n	8002e72 <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 8002e6e:	2302      	movs	r3, #2
 8002e70:	e1fe      	b.n	8003270 <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002e72:	68fb      	ldr	r3, [r7, #12]
 8002e74:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002e78:	2b01      	cmp	r3, #1
 8002e7a:	d101      	bne.n	8002e80 <HAL_I2C_Master_Receive+0x50>
 8002e7c:	2302      	movs	r3, #2
 8002e7e:	e1f7      	b.n	8003270 <HAL_I2C_Master_Receive+0x440>
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	2201      	movs	r2, #1
 8002e84:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	f003 0301 	and.w	r3, r3, #1
 8002e92:	2b01      	cmp	r3, #1
 8002e94:	d007      	beq.n	8002ea6 <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	681a      	ldr	r2, [r3, #0]
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	f042 0201 	orr.w	r2, r2, #1
 8002ea4:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	681a      	ldr	r2, [r3, #0]
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002eb4:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8002eb6:	68fb      	ldr	r3, [r7, #12]
 8002eb8:	2222      	movs	r2, #34	; 0x22
 8002eba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	2210      	movs	r2, #16
 8002ec2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	2200      	movs	r2, #0
 8002eca:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	687a      	ldr	r2, [r7, #4]
 8002ed0:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	893a      	ldrh	r2, [r7, #8]
 8002ed6:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002edc:	b29a      	uxth	r2, r3
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	4a5c      	ldr	r2, [pc, #368]	; (8003058 <HAL_I2C_Master_Receive+0x228>)
 8002ee6:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002ee8:	8979      	ldrh	r1, [r7, #10]
 8002eea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002eec:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002eee:	68f8      	ldr	r0, [r7, #12]
 8002ef0:	f000 fa60 	bl	80033b4 <I2C_MasterRequestRead>
 8002ef4:	4603      	mov	r3, r0
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d001      	beq.n	8002efe <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 8002efa:	2301      	movs	r3, #1
 8002efc:	e1b8      	b.n	8003270 <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 8002efe:	68fb      	ldr	r3, [r7, #12]
 8002f00:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	d113      	bne.n	8002f2e <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002f06:	2300      	movs	r3, #0
 8002f08:	623b      	str	r3, [r7, #32]
 8002f0a:	68fb      	ldr	r3, [r7, #12]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	695b      	ldr	r3, [r3, #20]
 8002f10:	623b      	str	r3, [r7, #32]
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	699b      	ldr	r3, [r3, #24]
 8002f18:	623b      	str	r3, [r7, #32]
 8002f1a:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	681a      	ldr	r2, [r3, #0]
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002f2a:	601a      	str	r2, [r3, #0]
 8002f2c:	e18c      	b.n	8003248 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f32:	2b01      	cmp	r3, #1
 8002f34:	d11b      	bne.n	8002f6e <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	681a      	ldr	r2, [r3, #0]
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002f44:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002f46:	2300      	movs	r3, #0
 8002f48:	61fb      	str	r3, [r7, #28]
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	695b      	ldr	r3, [r3, #20]
 8002f50:	61fb      	str	r3, [r7, #28]
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	699b      	ldr	r3, [r3, #24]
 8002f58:	61fb      	str	r3, [r7, #28]
 8002f5a:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	681a      	ldr	r2, [r3, #0]
 8002f62:	68fb      	ldr	r3, [r7, #12]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002f6a:	601a      	str	r2, [r3, #0]
 8002f6c:	e16c      	b.n	8003248 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8002f6e:	68fb      	ldr	r3, [r7, #12]
 8002f70:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f72:	2b02      	cmp	r3, #2
 8002f74:	d11b      	bne.n	8002fae <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	681a      	ldr	r2, [r3, #0]
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002f84:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	681a      	ldr	r2, [r3, #0]
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002f94:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002f96:	2300      	movs	r3, #0
 8002f98:	61bb      	str	r3, [r7, #24]
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	695b      	ldr	r3, [r3, #20]
 8002fa0:	61bb      	str	r3, [r7, #24]
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	699b      	ldr	r3, [r3, #24]
 8002fa8:	61bb      	str	r3, [r7, #24]
 8002faa:	69bb      	ldr	r3, [r7, #24]
 8002fac:	e14c      	b.n	8003248 <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	681a      	ldr	r2, [r3, #0]
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002fbc:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002fbe:	2300      	movs	r3, #0
 8002fc0:	617b      	str	r3, [r7, #20]
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	695b      	ldr	r3, [r3, #20]
 8002fc8:	617b      	str	r3, [r7, #20]
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	699b      	ldr	r3, [r3, #24]
 8002fd0:	617b      	str	r3, [r7, #20]
 8002fd2:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8002fd4:	e138      	b.n	8003248 <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002fda:	2b03      	cmp	r3, #3
 8002fdc:	f200 80f1 	bhi.w	80031c2 <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002fe4:	2b01      	cmp	r3, #1
 8002fe6:	d123      	bne.n	8003030 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002fe8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002fea:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002fec:	68f8      	ldr	r0, [r7, #12]
 8002fee:	f000 fc07 	bl	8003800 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002ff2:	4603      	mov	r3, r0
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	d001      	beq.n	8002ffc <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 8002ff8:	2301      	movs	r3, #1
 8002ffa:	e139      	b.n	8003270 <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	691a      	ldr	r2, [r3, #16]
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003006:	b2d2      	uxtb	r2, r2
 8003008:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800300e:	1c5a      	adds	r2, r3, #1
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003018:	3b01      	subs	r3, #1
 800301a:	b29a      	uxth	r2, r3
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003024:	b29b      	uxth	r3, r3
 8003026:	3b01      	subs	r3, #1
 8003028:	b29a      	uxth	r2, r3
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	855a      	strh	r2, [r3, #42]	; 0x2a
 800302e:	e10b      	b.n	8003248 <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003034:	2b02      	cmp	r3, #2
 8003036:	d14e      	bne.n	80030d6 <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003038:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800303a:	9300      	str	r3, [sp, #0]
 800303c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800303e:	2200      	movs	r2, #0
 8003040:	4906      	ldr	r1, [pc, #24]	; (800305c <HAL_I2C_Master_Receive+0x22c>)
 8003042:	68f8      	ldr	r0, [r7, #12]
 8003044:	f000 fa84 	bl	8003550 <I2C_WaitOnFlagUntilTimeout>
 8003048:	4603      	mov	r3, r0
 800304a:	2b00      	cmp	r3, #0
 800304c:	d008      	beq.n	8003060 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 800304e:	2301      	movs	r3, #1
 8003050:	e10e      	b.n	8003270 <HAL_I2C_Master_Receive+0x440>
 8003052:	bf00      	nop
 8003054:	00100002 	.word	0x00100002
 8003058:	ffff0000 	.word	0xffff0000
 800305c:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	681a      	ldr	r2, [r3, #0]
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800306e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	691a      	ldr	r2, [r3, #16]
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800307a:	b2d2      	uxtb	r2, r2
 800307c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003082:	1c5a      	adds	r2, r3, #1
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800308c:	3b01      	subs	r3, #1
 800308e:	b29a      	uxth	r2, r3
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003098:	b29b      	uxth	r3, r3
 800309a:	3b01      	subs	r3, #1
 800309c:	b29a      	uxth	r2, r3
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	691a      	ldr	r2, [r3, #16]
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030ac:	b2d2      	uxtb	r2, r2
 80030ae:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030b4:	1c5a      	adds	r2, r3, #1
 80030b6:	68fb      	ldr	r3, [r7, #12]
 80030b8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80030be:	3b01      	subs	r3, #1
 80030c0:	b29a      	uxth	r2, r3
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80030ca:	b29b      	uxth	r3, r3
 80030cc:	3b01      	subs	r3, #1
 80030ce:	b29a      	uxth	r2, r3
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	855a      	strh	r2, [r3, #42]	; 0x2a
 80030d4:	e0b8      	b.n	8003248 <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80030d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030d8:	9300      	str	r3, [sp, #0]
 80030da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80030dc:	2200      	movs	r2, #0
 80030de:	4966      	ldr	r1, [pc, #408]	; (8003278 <HAL_I2C_Master_Receive+0x448>)
 80030e0:	68f8      	ldr	r0, [r7, #12]
 80030e2:	f000 fa35 	bl	8003550 <I2C_WaitOnFlagUntilTimeout>
 80030e6:	4603      	mov	r3, r0
 80030e8:	2b00      	cmp	r3, #0
 80030ea:	d001      	beq.n	80030f0 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 80030ec:	2301      	movs	r3, #1
 80030ee:	e0bf      	b.n	8003270 <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	681a      	ldr	r2, [r3, #0]
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80030fe:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	691a      	ldr	r2, [r3, #16]
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800310a:	b2d2      	uxtb	r2, r2
 800310c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003112:	1c5a      	adds	r2, r3, #1
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800311c:	3b01      	subs	r3, #1
 800311e:	b29a      	uxth	r2, r3
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003128:	b29b      	uxth	r3, r3
 800312a:	3b01      	subs	r3, #1
 800312c:	b29a      	uxth	r2, r3
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003132:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003134:	9300      	str	r3, [sp, #0]
 8003136:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003138:	2200      	movs	r2, #0
 800313a:	494f      	ldr	r1, [pc, #316]	; (8003278 <HAL_I2C_Master_Receive+0x448>)
 800313c:	68f8      	ldr	r0, [r7, #12]
 800313e:	f000 fa07 	bl	8003550 <I2C_WaitOnFlagUntilTimeout>
 8003142:	4603      	mov	r3, r0
 8003144:	2b00      	cmp	r3, #0
 8003146:	d001      	beq.n	800314c <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8003148:	2301      	movs	r3, #1
 800314a:	e091      	b.n	8003270 <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	681a      	ldr	r2, [r3, #0]
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800315a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	691a      	ldr	r2, [r3, #16]
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003166:	b2d2      	uxtb	r2, r2
 8003168:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800316e:	1c5a      	adds	r2, r3, #1
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003178:	3b01      	subs	r3, #1
 800317a:	b29a      	uxth	r2, r3
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003184:	b29b      	uxth	r3, r3
 8003186:	3b01      	subs	r3, #1
 8003188:	b29a      	uxth	r2, r3
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	691a      	ldr	r2, [r3, #16]
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003198:	b2d2      	uxtb	r2, r2
 800319a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031a0:	1c5a      	adds	r2, r3, #1
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80031aa:	3b01      	subs	r3, #1
 80031ac:	b29a      	uxth	r2, r3
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80031b6:	b29b      	uxth	r3, r3
 80031b8:	3b01      	subs	r3, #1
 80031ba:	b29a      	uxth	r2, r3
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	855a      	strh	r2, [r3, #42]	; 0x2a
 80031c0:	e042      	b.n	8003248 <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80031c2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80031c4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80031c6:	68f8      	ldr	r0, [r7, #12]
 80031c8:	f000 fb1a 	bl	8003800 <I2C_WaitOnRXNEFlagUntilTimeout>
 80031cc:	4603      	mov	r3, r0
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d001      	beq.n	80031d6 <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 80031d2:	2301      	movs	r3, #1
 80031d4:	e04c      	b.n	8003270 <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	691a      	ldr	r2, [r3, #16]
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031e0:	b2d2      	uxtb	r2, r2
 80031e2:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031e8:	1c5a      	adds	r2, r3, #1
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80031f2:	3b01      	subs	r3, #1
 80031f4:	b29a      	uxth	r2, r3
 80031f6:	68fb      	ldr	r3, [r7, #12]
 80031f8:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80031fe:	b29b      	uxth	r3, r3
 8003200:	3b01      	subs	r3, #1
 8003202:	b29a      	uxth	r2, r3
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	695b      	ldr	r3, [r3, #20]
 800320e:	f003 0304 	and.w	r3, r3, #4
 8003212:	2b04      	cmp	r3, #4
 8003214:	d118      	bne.n	8003248 <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	691a      	ldr	r2, [r3, #16]
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003220:	b2d2      	uxtb	r2, r2
 8003222:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003228:	1c5a      	adds	r2, r3, #1
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003232:	3b01      	subs	r3, #1
 8003234:	b29a      	uxth	r2, r3
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800323e:	b29b      	uxth	r3, r3
 8003240:	3b01      	subs	r3, #1
 8003242:	b29a      	uxth	r2, r3
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800324c:	2b00      	cmp	r3, #0
 800324e:	f47f aec2 	bne.w	8002fd6 <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8003252:	68fb      	ldr	r3, [r7, #12]
 8003254:	2220      	movs	r2, #32
 8003256:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	2200      	movs	r2, #0
 800325e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	2200      	movs	r2, #0
 8003266:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800326a:	2300      	movs	r3, #0
 800326c:	e000      	b.n	8003270 <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 800326e:	2302      	movs	r3, #2
  }
}
 8003270:	4618      	mov	r0, r3
 8003272:	3728      	adds	r7, #40	; 0x28
 8003274:	46bd      	mov	sp, r7
 8003276:	bd80      	pop	{r7, pc}
 8003278:	00010004 	.word	0x00010004

0800327c <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 800327c:	b480      	push	{r7}
 800327e:	b083      	sub	sp, #12
 8003280:	af00      	add	r7, sp, #0
 8003282:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800328a:	b2db      	uxtb	r3, r3
}
 800328c:	4618      	mov	r0, r3
 800328e:	370c      	adds	r7, #12
 8003290:	46bd      	mov	sp, r7
 8003292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003296:	4770      	bx	lr

08003298 <HAL_I2C_GetError>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *              the configuration information for the specified I2C.
  * @retval I2C Error Code
  */
uint32_t HAL_I2C_GetError(I2C_HandleTypeDef *hi2c)
{
 8003298:	b480      	push	{r7}
 800329a:	b083      	sub	sp, #12
 800329c:	af00      	add	r7, sp, #0
 800329e:	6078      	str	r0, [r7, #4]
  return hi2c->ErrorCode;
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 80032a4:	4618      	mov	r0, r3
 80032a6:	370c      	adds	r7, #12
 80032a8:	46bd      	mov	sp, r7
 80032aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ae:	4770      	bx	lr

080032b0 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80032b0:	b580      	push	{r7, lr}
 80032b2:	b088      	sub	sp, #32
 80032b4:	af02      	add	r7, sp, #8
 80032b6:	60f8      	str	r0, [r7, #12]
 80032b8:	607a      	str	r2, [r7, #4]
 80032ba:	603b      	str	r3, [r7, #0]
 80032bc:	460b      	mov	r3, r1
 80032be:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032c4:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80032c6:	697b      	ldr	r3, [r7, #20]
 80032c8:	2b08      	cmp	r3, #8
 80032ca:	d006      	beq.n	80032da <I2C_MasterRequestWrite+0x2a>
 80032cc:	697b      	ldr	r3, [r7, #20]
 80032ce:	2b01      	cmp	r3, #1
 80032d0:	d003      	beq.n	80032da <I2C_MasterRequestWrite+0x2a>
 80032d2:	697b      	ldr	r3, [r7, #20]
 80032d4:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80032d8:	d108      	bne.n	80032ec <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80032da:	68fb      	ldr	r3, [r7, #12]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	681a      	ldr	r2, [r3, #0]
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80032e8:	601a      	str	r2, [r3, #0]
 80032ea:	e00b      	b.n	8003304 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032f0:	2b12      	cmp	r3, #18
 80032f2:	d107      	bne.n	8003304 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	681a      	ldr	r2, [r3, #0]
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003302:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003304:	683b      	ldr	r3, [r7, #0]
 8003306:	9300      	str	r3, [sp, #0]
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	2200      	movs	r2, #0
 800330c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003310:	68f8      	ldr	r0, [r7, #12]
 8003312:	f000 f91d 	bl	8003550 <I2C_WaitOnFlagUntilTimeout>
 8003316:	4603      	mov	r3, r0
 8003318:	2b00      	cmp	r3, #0
 800331a:	d00d      	beq.n	8003338 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003326:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800332a:	d103      	bne.n	8003334 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003332:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003334:	2303      	movs	r3, #3
 8003336:	e035      	b.n	80033a4 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	691b      	ldr	r3, [r3, #16]
 800333c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003340:	d108      	bne.n	8003354 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003342:	897b      	ldrh	r3, [r7, #10]
 8003344:	b2db      	uxtb	r3, r3
 8003346:	461a      	mov	r2, r3
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003350:	611a      	str	r2, [r3, #16]
 8003352:	e01b      	b.n	800338c <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8003354:	897b      	ldrh	r3, [r7, #10]
 8003356:	11db      	asrs	r3, r3, #7
 8003358:	b2db      	uxtb	r3, r3
 800335a:	f003 0306 	and.w	r3, r3, #6
 800335e:	b2db      	uxtb	r3, r3
 8003360:	f063 030f 	orn	r3, r3, #15
 8003364:	b2da      	uxtb	r2, r3
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800336c:	683b      	ldr	r3, [r7, #0]
 800336e:	687a      	ldr	r2, [r7, #4]
 8003370:	490e      	ldr	r1, [pc, #56]	; (80033ac <I2C_MasterRequestWrite+0xfc>)
 8003372:	68f8      	ldr	r0, [r7, #12]
 8003374:	f000 f943 	bl	80035fe <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003378:	4603      	mov	r3, r0
 800337a:	2b00      	cmp	r3, #0
 800337c:	d001      	beq.n	8003382 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800337e:	2301      	movs	r3, #1
 8003380:	e010      	b.n	80033a4 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8003382:	897b      	ldrh	r3, [r7, #10]
 8003384:	b2da      	uxtb	r2, r3
 8003386:	68fb      	ldr	r3, [r7, #12]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800338c:	683b      	ldr	r3, [r7, #0]
 800338e:	687a      	ldr	r2, [r7, #4]
 8003390:	4907      	ldr	r1, [pc, #28]	; (80033b0 <I2C_MasterRequestWrite+0x100>)
 8003392:	68f8      	ldr	r0, [r7, #12]
 8003394:	f000 f933 	bl	80035fe <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003398:	4603      	mov	r3, r0
 800339a:	2b00      	cmp	r3, #0
 800339c:	d001      	beq.n	80033a2 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800339e:	2301      	movs	r3, #1
 80033a0:	e000      	b.n	80033a4 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 80033a2:	2300      	movs	r3, #0
}
 80033a4:	4618      	mov	r0, r3
 80033a6:	3718      	adds	r7, #24
 80033a8:	46bd      	mov	sp, r7
 80033aa:	bd80      	pop	{r7, pc}
 80033ac:	00010008 	.word	0x00010008
 80033b0:	00010002 	.word	0x00010002

080033b4 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80033b4:	b580      	push	{r7, lr}
 80033b6:	b088      	sub	sp, #32
 80033b8:	af02      	add	r7, sp, #8
 80033ba:	60f8      	str	r0, [r7, #12]
 80033bc:	607a      	str	r2, [r7, #4]
 80033be:	603b      	str	r3, [r7, #0]
 80033c0:	460b      	mov	r3, r1
 80033c2:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033c8:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80033ca:	68fb      	ldr	r3, [r7, #12]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	681a      	ldr	r2, [r3, #0]
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80033d8:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80033da:	697b      	ldr	r3, [r7, #20]
 80033dc:	2b08      	cmp	r3, #8
 80033de:	d006      	beq.n	80033ee <I2C_MasterRequestRead+0x3a>
 80033e0:	697b      	ldr	r3, [r7, #20]
 80033e2:	2b01      	cmp	r3, #1
 80033e4:	d003      	beq.n	80033ee <I2C_MasterRequestRead+0x3a>
 80033e6:	697b      	ldr	r3, [r7, #20]
 80033e8:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80033ec:	d108      	bne.n	8003400 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	681a      	ldr	r2, [r3, #0]
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80033fc:	601a      	str	r2, [r3, #0]
 80033fe:	e00b      	b.n	8003418 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003404:	2b11      	cmp	r3, #17
 8003406:	d107      	bne.n	8003418 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	681a      	ldr	r2, [r3, #0]
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003416:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003418:	683b      	ldr	r3, [r7, #0]
 800341a:	9300      	str	r3, [sp, #0]
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	2200      	movs	r2, #0
 8003420:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003424:	68f8      	ldr	r0, [r7, #12]
 8003426:	f000 f893 	bl	8003550 <I2C_WaitOnFlagUntilTimeout>
 800342a:	4603      	mov	r3, r0
 800342c:	2b00      	cmp	r3, #0
 800342e:	d00d      	beq.n	800344c <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800343a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800343e:	d103      	bne.n	8003448 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003446:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003448:	2303      	movs	r3, #3
 800344a:	e079      	b.n	8003540 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	691b      	ldr	r3, [r3, #16]
 8003450:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003454:	d108      	bne.n	8003468 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8003456:	897b      	ldrh	r3, [r7, #10]
 8003458:	b2db      	uxtb	r3, r3
 800345a:	f043 0301 	orr.w	r3, r3, #1
 800345e:	b2da      	uxtb	r2, r3
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	611a      	str	r2, [r3, #16]
 8003466:	e05f      	b.n	8003528 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8003468:	897b      	ldrh	r3, [r7, #10]
 800346a:	11db      	asrs	r3, r3, #7
 800346c:	b2db      	uxtb	r3, r3
 800346e:	f003 0306 	and.w	r3, r3, #6
 8003472:	b2db      	uxtb	r3, r3
 8003474:	f063 030f 	orn	r3, r3, #15
 8003478:	b2da      	uxtb	r2, r3
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8003480:	683b      	ldr	r3, [r7, #0]
 8003482:	687a      	ldr	r2, [r7, #4]
 8003484:	4930      	ldr	r1, [pc, #192]	; (8003548 <I2C_MasterRequestRead+0x194>)
 8003486:	68f8      	ldr	r0, [r7, #12]
 8003488:	f000 f8b9 	bl	80035fe <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800348c:	4603      	mov	r3, r0
 800348e:	2b00      	cmp	r3, #0
 8003490:	d001      	beq.n	8003496 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8003492:	2301      	movs	r3, #1
 8003494:	e054      	b.n	8003540 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8003496:	897b      	ldrh	r3, [r7, #10]
 8003498:	b2da      	uxtb	r2, r3
 800349a:	68fb      	ldr	r3, [r7, #12]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80034a0:	683b      	ldr	r3, [r7, #0]
 80034a2:	687a      	ldr	r2, [r7, #4]
 80034a4:	4929      	ldr	r1, [pc, #164]	; (800354c <I2C_MasterRequestRead+0x198>)
 80034a6:	68f8      	ldr	r0, [r7, #12]
 80034a8:	f000 f8a9 	bl	80035fe <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80034ac:	4603      	mov	r3, r0
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	d001      	beq.n	80034b6 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 80034b2:	2301      	movs	r3, #1
 80034b4:	e044      	b.n	8003540 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80034b6:	2300      	movs	r3, #0
 80034b8:	613b      	str	r3, [r7, #16]
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	695b      	ldr	r3, [r3, #20]
 80034c0:	613b      	str	r3, [r7, #16]
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	699b      	ldr	r3, [r3, #24]
 80034c8:	613b      	str	r3, [r7, #16]
 80034ca:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	681a      	ldr	r2, [r3, #0]
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80034da:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80034dc:	683b      	ldr	r3, [r7, #0]
 80034de:	9300      	str	r3, [sp, #0]
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	2200      	movs	r2, #0
 80034e4:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80034e8:	68f8      	ldr	r0, [r7, #12]
 80034ea:	f000 f831 	bl	8003550 <I2C_WaitOnFlagUntilTimeout>
 80034ee:	4603      	mov	r3, r0
 80034f0:	2b00      	cmp	r3, #0
 80034f2:	d00d      	beq.n	8003510 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80034fe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003502:	d103      	bne.n	800350c <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	f44f 7200 	mov.w	r2, #512	; 0x200
 800350a:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 800350c:	2303      	movs	r3, #3
 800350e:	e017      	b.n	8003540 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8003510:	897b      	ldrh	r3, [r7, #10]
 8003512:	11db      	asrs	r3, r3, #7
 8003514:	b2db      	uxtb	r3, r3
 8003516:	f003 0306 	and.w	r3, r3, #6
 800351a:	b2db      	uxtb	r3, r3
 800351c:	f063 030e 	orn	r3, r3, #14
 8003520:	b2da      	uxtb	r2, r3
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003528:	683b      	ldr	r3, [r7, #0]
 800352a:	687a      	ldr	r2, [r7, #4]
 800352c:	4907      	ldr	r1, [pc, #28]	; (800354c <I2C_MasterRequestRead+0x198>)
 800352e:	68f8      	ldr	r0, [r7, #12]
 8003530:	f000 f865 	bl	80035fe <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003534:	4603      	mov	r3, r0
 8003536:	2b00      	cmp	r3, #0
 8003538:	d001      	beq.n	800353e <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 800353a:	2301      	movs	r3, #1
 800353c:	e000      	b.n	8003540 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 800353e:	2300      	movs	r3, #0
}
 8003540:	4618      	mov	r0, r3
 8003542:	3718      	adds	r7, #24
 8003544:	46bd      	mov	sp, r7
 8003546:	bd80      	pop	{r7, pc}
 8003548:	00010008 	.word	0x00010008
 800354c:	00010002 	.word	0x00010002

08003550 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003550:	b580      	push	{r7, lr}
 8003552:	b084      	sub	sp, #16
 8003554:	af00      	add	r7, sp, #0
 8003556:	60f8      	str	r0, [r7, #12]
 8003558:	60b9      	str	r1, [r7, #8]
 800355a:	603b      	str	r3, [r7, #0]
 800355c:	4613      	mov	r3, r2
 800355e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003560:	e025      	b.n	80035ae <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003562:	683b      	ldr	r3, [r7, #0]
 8003564:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003568:	d021      	beq.n	80035ae <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800356a:	f7fe ff55 	bl	8002418 <HAL_GetTick>
 800356e:	4602      	mov	r2, r0
 8003570:	69bb      	ldr	r3, [r7, #24]
 8003572:	1ad3      	subs	r3, r2, r3
 8003574:	683a      	ldr	r2, [r7, #0]
 8003576:	429a      	cmp	r2, r3
 8003578:	d302      	bcc.n	8003580 <I2C_WaitOnFlagUntilTimeout+0x30>
 800357a:	683b      	ldr	r3, [r7, #0]
 800357c:	2b00      	cmp	r3, #0
 800357e:	d116      	bne.n	80035ae <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	2200      	movs	r2, #0
 8003584:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	2220      	movs	r2, #32
 800358a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800358e:	68fb      	ldr	r3, [r7, #12]
 8003590:	2200      	movs	r2, #0
 8003592:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800359a:	f043 0220 	orr.w	r2, r3, #32
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	2200      	movs	r2, #0
 80035a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80035aa:	2301      	movs	r3, #1
 80035ac:	e023      	b.n	80035f6 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80035ae:	68bb      	ldr	r3, [r7, #8]
 80035b0:	0c1b      	lsrs	r3, r3, #16
 80035b2:	b2db      	uxtb	r3, r3
 80035b4:	2b01      	cmp	r3, #1
 80035b6:	d10d      	bne.n	80035d4 <I2C_WaitOnFlagUntilTimeout+0x84>
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	695b      	ldr	r3, [r3, #20]
 80035be:	43da      	mvns	r2, r3
 80035c0:	68bb      	ldr	r3, [r7, #8]
 80035c2:	4013      	ands	r3, r2
 80035c4:	b29b      	uxth	r3, r3
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	bf0c      	ite	eq
 80035ca:	2301      	moveq	r3, #1
 80035cc:	2300      	movne	r3, #0
 80035ce:	b2db      	uxtb	r3, r3
 80035d0:	461a      	mov	r2, r3
 80035d2:	e00c      	b.n	80035ee <I2C_WaitOnFlagUntilTimeout+0x9e>
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	699b      	ldr	r3, [r3, #24]
 80035da:	43da      	mvns	r2, r3
 80035dc:	68bb      	ldr	r3, [r7, #8]
 80035de:	4013      	ands	r3, r2
 80035e0:	b29b      	uxth	r3, r3
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	bf0c      	ite	eq
 80035e6:	2301      	moveq	r3, #1
 80035e8:	2300      	movne	r3, #0
 80035ea:	b2db      	uxtb	r3, r3
 80035ec:	461a      	mov	r2, r3
 80035ee:	79fb      	ldrb	r3, [r7, #7]
 80035f0:	429a      	cmp	r2, r3
 80035f2:	d0b6      	beq.n	8003562 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80035f4:	2300      	movs	r3, #0
}
 80035f6:	4618      	mov	r0, r3
 80035f8:	3710      	adds	r7, #16
 80035fa:	46bd      	mov	sp, r7
 80035fc:	bd80      	pop	{r7, pc}

080035fe <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80035fe:	b580      	push	{r7, lr}
 8003600:	b084      	sub	sp, #16
 8003602:	af00      	add	r7, sp, #0
 8003604:	60f8      	str	r0, [r7, #12]
 8003606:	60b9      	str	r1, [r7, #8]
 8003608:	607a      	str	r2, [r7, #4]
 800360a:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800360c:	e051      	b.n	80036b2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	695b      	ldr	r3, [r3, #20]
 8003614:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003618:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800361c:	d123      	bne.n	8003666 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	681a      	ldr	r2, [r3, #0]
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800362c:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003636:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	2200      	movs	r2, #0
 800363c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	2220      	movs	r2, #32
 8003642:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	2200      	movs	r2, #0
 800364a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003652:	f043 0204 	orr.w	r2, r3, #4
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	2200      	movs	r2, #0
 800365e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003662:	2301      	movs	r3, #1
 8003664:	e046      	b.n	80036f4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800366c:	d021      	beq.n	80036b2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800366e:	f7fe fed3 	bl	8002418 <HAL_GetTick>
 8003672:	4602      	mov	r2, r0
 8003674:	683b      	ldr	r3, [r7, #0]
 8003676:	1ad3      	subs	r3, r2, r3
 8003678:	687a      	ldr	r2, [r7, #4]
 800367a:	429a      	cmp	r2, r3
 800367c:	d302      	bcc.n	8003684 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	2b00      	cmp	r3, #0
 8003682:	d116      	bne.n	80036b2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	2200      	movs	r2, #0
 8003688:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	2220      	movs	r2, #32
 800368e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	2200      	movs	r2, #0
 8003696:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800369e:	f043 0220 	orr.w	r2, r3, #32
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	2200      	movs	r2, #0
 80036aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80036ae:	2301      	movs	r3, #1
 80036b0:	e020      	b.n	80036f4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80036b2:	68bb      	ldr	r3, [r7, #8]
 80036b4:	0c1b      	lsrs	r3, r3, #16
 80036b6:	b2db      	uxtb	r3, r3
 80036b8:	2b01      	cmp	r3, #1
 80036ba:	d10c      	bne.n	80036d6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	695b      	ldr	r3, [r3, #20]
 80036c2:	43da      	mvns	r2, r3
 80036c4:	68bb      	ldr	r3, [r7, #8]
 80036c6:	4013      	ands	r3, r2
 80036c8:	b29b      	uxth	r3, r3
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	bf14      	ite	ne
 80036ce:	2301      	movne	r3, #1
 80036d0:	2300      	moveq	r3, #0
 80036d2:	b2db      	uxtb	r3, r3
 80036d4:	e00b      	b.n	80036ee <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	699b      	ldr	r3, [r3, #24]
 80036dc:	43da      	mvns	r2, r3
 80036de:	68bb      	ldr	r3, [r7, #8]
 80036e0:	4013      	ands	r3, r2
 80036e2:	b29b      	uxth	r3, r3
 80036e4:	2b00      	cmp	r3, #0
 80036e6:	bf14      	ite	ne
 80036e8:	2301      	movne	r3, #1
 80036ea:	2300      	moveq	r3, #0
 80036ec:	b2db      	uxtb	r3, r3
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d18d      	bne.n	800360e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80036f2:	2300      	movs	r3, #0
}
 80036f4:	4618      	mov	r0, r3
 80036f6:	3710      	adds	r7, #16
 80036f8:	46bd      	mov	sp, r7
 80036fa:	bd80      	pop	{r7, pc}

080036fc <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80036fc:	b580      	push	{r7, lr}
 80036fe:	b084      	sub	sp, #16
 8003700:	af00      	add	r7, sp, #0
 8003702:	60f8      	str	r0, [r7, #12]
 8003704:	60b9      	str	r1, [r7, #8]
 8003706:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003708:	e02d      	b.n	8003766 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800370a:	68f8      	ldr	r0, [r7, #12]
 800370c:	f000 f8ce 	bl	80038ac <I2C_IsAcknowledgeFailed>
 8003710:	4603      	mov	r3, r0
 8003712:	2b00      	cmp	r3, #0
 8003714:	d001      	beq.n	800371a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003716:	2301      	movs	r3, #1
 8003718:	e02d      	b.n	8003776 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800371a:	68bb      	ldr	r3, [r7, #8]
 800371c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003720:	d021      	beq.n	8003766 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003722:	f7fe fe79 	bl	8002418 <HAL_GetTick>
 8003726:	4602      	mov	r2, r0
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	1ad3      	subs	r3, r2, r3
 800372c:	68ba      	ldr	r2, [r7, #8]
 800372e:	429a      	cmp	r2, r3
 8003730:	d302      	bcc.n	8003738 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8003732:	68bb      	ldr	r3, [r7, #8]
 8003734:	2b00      	cmp	r3, #0
 8003736:	d116      	bne.n	8003766 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	2200      	movs	r2, #0
 800373c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800373e:	68fb      	ldr	r3, [r7, #12]
 8003740:	2220      	movs	r2, #32
 8003742:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003746:	68fb      	ldr	r3, [r7, #12]
 8003748:	2200      	movs	r2, #0
 800374a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800374e:	68fb      	ldr	r3, [r7, #12]
 8003750:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003752:	f043 0220 	orr.w	r2, r3, #32
 8003756:	68fb      	ldr	r3, [r7, #12]
 8003758:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800375a:	68fb      	ldr	r3, [r7, #12]
 800375c:	2200      	movs	r2, #0
 800375e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003762:	2301      	movs	r3, #1
 8003764:	e007      	b.n	8003776 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003766:	68fb      	ldr	r3, [r7, #12]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	695b      	ldr	r3, [r3, #20]
 800376c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003770:	2b80      	cmp	r3, #128	; 0x80
 8003772:	d1ca      	bne.n	800370a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003774:	2300      	movs	r3, #0
}
 8003776:	4618      	mov	r0, r3
 8003778:	3710      	adds	r7, #16
 800377a:	46bd      	mov	sp, r7
 800377c:	bd80      	pop	{r7, pc}

0800377e <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800377e:	b580      	push	{r7, lr}
 8003780:	b084      	sub	sp, #16
 8003782:	af00      	add	r7, sp, #0
 8003784:	60f8      	str	r0, [r7, #12]
 8003786:	60b9      	str	r1, [r7, #8]
 8003788:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800378a:	e02d      	b.n	80037e8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800378c:	68f8      	ldr	r0, [r7, #12]
 800378e:	f000 f88d 	bl	80038ac <I2C_IsAcknowledgeFailed>
 8003792:	4603      	mov	r3, r0
 8003794:	2b00      	cmp	r3, #0
 8003796:	d001      	beq.n	800379c <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003798:	2301      	movs	r3, #1
 800379a:	e02d      	b.n	80037f8 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800379c:	68bb      	ldr	r3, [r7, #8]
 800379e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80037a2:	d021      	beq.n	80037e8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80037a4:	f7fe fe38 	bl	8002418 <HAL_GetTick>
 80037a8:	4602      	mov	r2, r0
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	1ad3      	subs	r3, r2, r3
 80037ae:	68ba      	ldr	r2, [r7, #8]
 80037b0:	429a      	cmp	r2, r3
 80037b2:	d302      	bcc.n	80037ba <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80037b4:	68bb      	ldr	r3, [r7, #8]
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d116      	bne.n	80037e8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	2200      	movs	r2, #0
 80037be:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	2220      	movs	r2, #32
 80037c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	2200      	movs	r2, #0
 80037cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037d4:	f043 0220 	orr.w	r2, r3, #32
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	2200      	movs	r2, #0
 80037e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80037e4:	2301      	movs	r3, #1
 80037e6:	e007      	b.n	80037f8 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	695b      	ldr	r3, [r3, #20]
 80037ee:	f003 0304 	and.w	r3, r3, #4
 80037f2:	2b04      	cmp	r3, #4
 80037f4:	d1ca      	bne.n	800378c <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80037f6:	2300      	movs	r3, #0
}
 80037f8:	4618      	mov	r0, r3
 80037fa:	3710      	adds	r7, #16
 80037fc:	46bd      	mov	sp, r7
 80037fe:	bd80      	pop	{r7, pc}

08003800 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003800:	b580      	push	{r7, lr}
 8003802:	b084      	sub	sp, #16
 8003804:	af00      	add	r7, sp, #0
 8003806:	60f8      	str	r0, [r7, #12]
 8003808:	60b9      	str	r1, [r7, #8]
 800380a:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800380c:	e042      	b.n	8003894 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800380e:	68fb      	ldr	r3, [r7, #12]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	695b      	ldr	r3, [r3, #20]
 8003814:	f003 0310 	and.w	r3, r3, #16
 8003818:	2b10      	cmp	r3, #16
 800381a:	d119      	bne.n	8003850 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	f06f 0210 	mvn.w	r2, #16
 8003824:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003826:	68fb      	ldr	r3, [r7, #12]
 8003828:	2200      	movs	r2, #0
 800382a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	2220      	movs	r2, #32
 8003830:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	2200      	movs	r2, #0
 8003838:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	2200      	movs	r2, #0
 8003848:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800384c:	2301      	movs	r3, #1
 800384e:	e029      	b.n	80038a4 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003850:	f7fe fde2 	bl	8002418 <HAL_GetTick>
 8003854:	4602      	mov	r2, r0
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	1ad3      	subs	r3, r2, r3
 800385a:	68ba      	ldr	r2, [r7, #8]
 800385c:	429a      	cmp	r2, r3
 800385e:	d302      	bcc.n	8003866 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8003860:	68bb      	ldr	r3, [r7, #8]
 8003862:	2b00      	cmp	r3, #0
 8003864:	d116      	bne.n	8003894 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8003866:	68fb      	ldr	r3, [r7, #12]
 8003868:	2200      	movs	r2, #0
 800386a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	2220      	movs	r2, #32
 8003870:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	2200      	movs	r2, #0
 8003878:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003880:	f043 0220 	orr.w	r2, r3, #32
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	2200      	movs	r2, #0
 800388c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003890:	2301      	movs	r3, #1
 8003892:	e007      	b.n	80038a4 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	695b      	ldr	r3, [r3, #20]
 800389a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800389e:	2b40      	cmp	r3, #64	; 0x40
 80038a0:	d1b5      	bne.n	800380e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80038a2:	2300      	movs	r3, #0
}
 80038a4:	4618      	mov	r0, r3
 80038a6:	3710      	adds	r7, #16
 80038a8:	46bd      	mov	sp, r7
 80038aa:	bd80      	pop	{r7, pc}

080038ac <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80038ac:	b480      	push	{r7}
 80038ae:	b083      	sub	sp, #12
 80038b0:	af00      	add	r7, sp, #0
 80038b2:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	695b      	ldr	r3, [r3, #20]
 80038ba:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80038be:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80038c2:	d11b      	bne.n	80038fc <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80038cc:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	2200      	movs	r2, #0
 80038d2:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	2220      	movs	r2, #32
 80038d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	2200      	movs	r2, #0
 80038e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038e8:	f043 0204 	orr.w	r2, r3, #4
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	2200      	movs	r2, #0
 80038f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80038f8:	2301      	movs	r3, #1
 80038fa:	e000      	b.n	80038fe <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80038fc:	2300      	movs	r3, #0
}
 80038fe:	4618      	mov	r0, r3
 8003900:	370c      	adds	r7, #12
 8003902:	46bd      	mov	sp, r7
 8003904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003908:	4770      	bx	lr
	...

0800390c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800390c:	b580      	push	{r7, lr}
 800390e:	b086      	sub	sp, #24
 8003910:	af00      	add	r7, sp, #0
 8003912:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	2b00      	cmp	r3, #0
 8003918:	d101      	bne.n	800391e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800391a:	2301      	movs	r3, #1
 800391c:	e267      	b.n	8003dee <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	f003 0301 	and.w	r3, r3, #1
 8003926:	2b00      	cmp	r3, #0
 8003928:	d075      	beq.n	8003a16 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800392a:	4b88      	ldr	r3, [pc, #544]	; (8003b4c <HAL_RCC_OscConfig+0x240>)
 800392c:	689b      	ldr	r3, [r3, #8]
 800392e:	f003 030c 	and.w	r3, r3, #12
 8003932:	2b04      	cmp	r3, #4
 8003934:	d00c      	beq.n	8003950 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003936:	4b85      	ldr	r3, [pc, #532]	; (8003b4c <HAL_RCC_OscConfig+0x240>)
 8003938:	689b      	ldr	r3, [r3, #8]
 800393a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800393e:	2b08      	cmp	r3, #8
 8003940:	d112      	bne.n	8003968 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003942:	4b82      	ldr	r3, [pc, #520]	; (8003b4c <HAL_RCC_OscConfig+0x240>)
 8003944:	685b      	ldr	r3, [r3, #4]
 8003946:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800394a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800394e:	d10b      	bne.n	8003968 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003950:	4b7e      	ldr	r3, [pc, #504]	; (8003b4c <HAL_RCC_OscConfig+0x240>)
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003958:	2b00      	cmp	r3, #0
 800395a:	d05b      	beq.n	8003a14 <HAL_RCC_OscConfig+0x108>
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	685b      	ldr	r3, [r3, #4]
 8003960:	2b00      	cmp	r3, #0
 8003962:	d157      	bne.n	8003a14 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003964:	2301      	movs	r3, #1
 8003966:	e242      	b.n	8003dee <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	685b      	ldr	r3, [r3, #4]
 800396c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003970:	d106      	bne.n	8003980 <HAL_RCC_OscConfig+0x74>
 8003972:	4b76      	ldr	r3, [pc, #472]	; (8003b4c <HAL_RCC_OscConfig+0x240>)
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	4a75      	ldr	r2, [pc, #468]	; (8003b4c <HAL_RCC_OscConfig+0x240>)
 8003978:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800397c:	6013      	str	r3, [r2, #0]
 800397e:	e01d      	b.n	80039bc <HAL_RCC_OscConfig+0xb0>
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	685b      	ldr	r3, [r3, #4]
 8003984:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003988:	d10c      	bne.n	80039a4 <HAL_RCC_OscConfig+0x98>
 800398a:	4b70      	ldr	r3, [pc, #448]	; (8003b4c <HAL_RCC_OscConfig+0x240>)
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	4a6f      	ldr	r2, [pc, #444]	; (8003b4c <HAL_RCC_OscConfig+0x240>)
 8003990:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003994:	6013      	str	r3, [r2, #0]
 8003996:	4b6d      	ldr	r3, [pc, #436]	; (8003b4c <HAL_RCC_OscConfig+0x240>)
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	4a6c      	ldr	r2, [pc, #432]	; (8003b4c <HAL_RCC_OscConfig+0x240>)
 800399c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80039a0:	6013      	str	r3, [r2, #0]
 80039a2:	e00b      	b.n	80039bc <HAL_RCC_OscConfig+0xb0>
 80039a4:	4b69      	ldr	r3, [pc, #420]	; (8003b4c <HAL_RCC_OscConfig+0x240>)
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	4a68      	ldr	r2, [pc, #416]	; (8003b4c <HAL_RCC_OscConfig+0x240>)
 80039aa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80039ae:	6013      	str	r3, [r2, #0]
 80039b0:	4b66      	ldr	r3, [pc, #408]	; (8003b4c <HAL_RCC_OscConfig+0x240>)
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	4a65      	ldr	r2, [pc, #404]	; (8003b4c <HAL_RCC_OscConfig+0x240>)
 80039b6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80039ba:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	685b      	ldr	r3, [r3, #4]
 80039c0:	2b00      	cmp	r3, #0
 80039c2:	d013      	beq.n	80039ec <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80039c4:	f7fe fd28 	bl	8002418 <HAL_GetTick>
 80039c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80039ca:	e008      	b.n	80039de <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80039cc:	f7fe fd24 	bl	8002418 <HAL_GetTick>
 80039d0:	4602      	mov	r2, r0
 80039d2:	693b      	ldr	r3, [r7, #16]
 80039d4:	1ad3      	subs	r3, r2, r3
 80039d6:	2b64      	cmp	r3, #100	; 0x64
 80039d8:	d901      	bls.n	80039de <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80039da:	2303      	movs	r3, #3
 80039dc:	e207      	b.n	8003dee <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80039de:	4b5b      	ldr	r3, [pc, #364]	; (8003b4c <HAL_RCC_OscConfig+0x240>)
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d0f0      	beq.n	80039cc <HAL_RCC_OscConfig+0xc0>
 80039ea:	e014      	b.n	8003a16 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80039ec:	f7fe fd14 	bl	8002418 <HAL_GetTick>
 80039f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80039f2:	e008      	b.n	8003a06 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80039f4:	f7fe fd10 	bl	8002418 <HAL_GetTick>
 80039f8:	4602      	mov	r2, r0
 80039fa:	693b      	ldr	r3, [r7, #16]
 80039fc:	1ad3      	subs	r3, r2, r3
 80039fe:	2b64      	cmp	r3, #100	; 0x64
 8003a00:	d901      	bls.n	8003a06 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003a02:	2303      	movs	r3, #3
 8003a04:	e1f3      	b.n	8003dee <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003a06:	4b51      	ldr	r3, [pc, #324]	; (8003b4c <HAL_RCC_OscConfig+0x240>)
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d1f0      	bne.n	80039f4 <HAL_RCC_OscConfig+0xe8>
 8003a12:	e000      	b.n	8003a16 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003a14:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	f003 0302 	and.w	r3, r3, #2
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	d063      	beq.n	8003aea <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003a22:	4b4a      	ldr	r3, [pc, #296]	; (8003b4c <HAL_RCC_OscConfig+0x240>)
 8003a24:	689b      	ldr	r3, [r3, #8]
 8003a26:	f003 030c 	and.w	r3, r3, #12
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	d00b      	beq.n	8003a46 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003a2e:	4b47      	ldr	r3, [pc, #284]	; (8003b4c <HAL_RCC_OscConfig+0x240>)
 8003a30:	689b      	ldr	r3, [r3, #8]
 8003a32:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003a36:	2b08      	cmp	r3, #8
 8003a38:	d11c      	bne.n	8003a74 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003a3a:	4b44      	ldr	r3, [pc, #272]	; (8003b4c <HAL_RCC_OscConfig+0x240>)
 8003a3c:	685b      	ldr	r3, [r3, #4]
 8003a3e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	d116      	bne.n	8003a74 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003a46:	4b41      	ldr	r3, [pc, #260]	; (8003b4c <HAL_RCC_OscConfig+0x240>)
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	f003 0302 	and.w	r3, r3, #2
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d005      	beq.n	8003a5e <HAL_RCC_OscConfig+0x152>
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	68db      	ldr	r3, [r3, #12]
 8003a56:	2b01      	cmp	r3, #1
 8003a58:	d001      	beq.n	8003a5e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003a5a:	2301      	movs	r3, #1
 8003a5c:	e1c7      	b.n	8003dee <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003a5e:	4b3b      	ldr	r3, [pc, #236]	; (8003b4c <HAL_RCC_OscConfig+0x240>)
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	691b      	ldr	r3, [r3, #16]
 8003a6a:	00db      	lsls	r3, r3, #3
 8003a6c:	4937      	ldr	r1, [pc, #220]	; (8003b4c <HAL_RCC_OscConfig+0x240>)
 8003a6e:	4313      	orrs	r3, r2
 8003a70:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003a72:	e03a      	b.n	8003aea <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	68db      	ldr	r3, [r3, #12]
 8003a78:	2b00      	cmp	r3, #0
 8003a7a:	d020      	beq.n	8003abe <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003a7c:	4b34      	ldr	r3, [pc, #208]	; (8003b50 <HAL_RCC_OscConfig+0x244>)
 8003a7e:	2201      	movs	r2, #1
 8003a80:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a82:	f7fe fcc9 	bl	8002418 <HAL_GetTick>
 8003a86:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003a88:	e008      	b.n	8003a9c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003a8a:	f7fe fcc5 	bl	8002418 <HAL_GetTick>
 8003a8e:	4602      	mov	r2, r0
 8003a90:	693b      	ldr	r3, [r7, #16]
 8003a92:	1ad3      	subs	r3, r2, r3
 8003a94:	2b02      	cmp	r3, #2
 8003a96:	d901      	bls.n	8003a9c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003a98:	2303      	movs	r3, #3
 8003a9a:	e1a8      	b.n	8003dee <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003a9c:	4b2b      	ldr	r3, [pc, #172]	; (8003b4c <HAL_RCC_OscConfig+0x240>)
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	f003 0302 	and.w	r3, r3, #2
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	d0f0      	beq.n	8003a8a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003aa8:	4b28      	ldr	r3, [pc, #160]	; (8003b4c <HAL_RCC_OscConfig+0x240>)
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	691b      	ldr	r3, [r3, #16]
 8003ab4:	00db      	lsls	r3, r3, #3
 8003ab6:	4925      	ldr	r1, [pc, #148]	; (8003b4c <HAL_RCC_OscConfig+0x240>)
 8003ab8:	4313      	orrs	r3, r2
 8003aba:	600b      	str	r3, [r1, #0]
 8003abc:	e015      	b.n	8003aea <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003abe:	4b24      	ldr	r3, [pc, #144]	; (8003b50 <HAL_RCC_OscConfig+0x244>)
 8003ac0:	2200      	movs	r2, #0
 8003ac2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ac4:	f7fe fca8 	bl	8002418 <HAL_GetTick>
 8003ac8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003aca:	e008      	b.n	8003ade <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003acc:	f7fe fca4 	bl	8002418 <HAL_GetTick>
 8003ad0:	4602      	mov	r2, r0
 8003ad2:	693b      	ldr	r3, [r7, #16]
 8003ad4:	1ad3      	subs	r3, r2, r3
 8003ad6:	2b02      	cmp	r3, #2
 8003ad8:	d901      	bls.n	8003ade <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003ada:	2303      	movs	r3, #3
 8003adc:	e187      	b.n	8003dee <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003ade:	4b1b      	ldr	r3, [pc, #108]	; (8003b4c <HAL_RCC_OscConfig+0x240>)
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	f003 0302 	and.w	r3, r3, #2
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d1f0      	bne.n	8003acc <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	f003 0308 	and.w	r3, r3, #8
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	d036      	beq.n	8003b64 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	695b      	ldr	r3, [r3, #20]
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	d016      	beq.n	8003b2c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003afe:	4b15      	ldr	r3, [pc, #84]	; (8003b54 <HAL_RCC_OscConfig+0x248>)
 8003b00:	2201      	movs	r2, #1
 8003b02:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b04:	f7fe fc88 	bl	8002418 <HAL_GetTick>
 8003b08:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003b0a:	e008      	b.n	8003b1e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003b0c:	f7fe fc84 	bl	8002418 <HAL_GetTick>
 8003b10:	4602      	mov	r2, r0
 8003b12:	693b      	ldr	r3, [r7, #16]
 8003b14:	1ad3      	subs	r3, r2, r3
 8003b16:	2b02      	cmp	r3, #2
 8003b18:	d901      	bls.n	8003b1e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003b1a:	2303      	movs	r3, #3
 8003b1c:	e167      	b.n	8003dee <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003b1e:	4b0b      	ldr	r3, [pc, #44]	; (8003b4c <HAL_RCC_OscConfig+0x240>)
 8003b20:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003b22:	f003 0302 	and.w	r3, r3, #2
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	d0f0      	beq.n	8003b0c <HAL_RCC_OscConfig+0x200>
 8003b2a:	e01b      	b.n	8003b64 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003b2c:	4b09      	ldr	r3, [pc, #36]	; (8003b54 <HAL_RCC_OscConfig+0x248>)
 8003b2e:	2200      	movs	r2, #0
 8003b30:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003b32:	f7fe fc71 	bl	8002418 <HAL_GetTick>
 8003b36:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003b38:	e00e      	b.n	8003b58 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003b3a:	f7fe fc6d 	bl	8002418 <HAL_GetTick>
 8003b3e:	4602      	mov	r2, r0
 8003b40:	693b      	ldr	r3, [r7, #16]
 8003b42:	1ad3      	subs	r3, r2, r3
 8003b44:	2b02      	cmp	r3, #2
 8003b46:	d907      	bls.n	8003b58 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003b48:	2303      	movs	r3, #3
 8003b4a:	e150      	b.n	8003dee <HAL_RCC_OscConfig+0x4e2>
 8003b4c:	40023800 	.word	0x40023800
 8003b50:	42470000 	.word	0x42470000
 8003b54:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003b58:	4b88      	ldr	r3, [pc, #544]	; (8003d7c <HAL_RCC_OscConfig+0x470>)
 8003b5a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003b5c:	f003 0302 	and.w	r3, r3, #2
 8003b60:	2b00      	cmp	r3, #0
 8003b62:	d1ea      	bne.n	8003b3a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	f003 0304 	and.w	r3, r3, #4
 8003b6c:	2b00      	cmp	r3, #0
 8003b6e:	f000 8097 	beq.w	8003ca0 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003b72:	2300      	movs	r3, #0
 8003b74:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003b76:	4b81      	ldr	r3, [pc, #516]	; (8003d7c <HAL_RCC_OscConfig+0x470>)
 8003b78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b7a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d10f      	bne.n	8003ba2 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003b82:	2300      	movs	r3, #0
 8003b84:	60bb      	str	r3, [r7, #8]
 8003b86:	4b7d      	ldr	r3, [pc, #500]	; (8003d7c <HAL_RCC_OscConfig+0x470>)
 8003b88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b8a:	4a7c      	ldr	r2, [pc, #496]	; (8003d7c <HAL_RCC_OscConfig+0x470>)
 8003b8c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003b90:	6413      	str	r3, [r2, #64]	; 0x40
 8003b92:	4b7a      	ldr	r3, [pc, #488]	; (8003d7c <HAL_RCC_OscConfig+0x470>)
 8003b94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b96:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003b9a:	60bb      	str	r3, [r7, #8]
 8003b9c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003b9e:	2301      	movs	r3, #1
 8003ba0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003ba2:	4b77      	ldr	r3, [pc, #476]	; (8003d80 <HAL_RCC_OscConfig+0x474>)
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	d118      	bne.n	8003be0 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003bae:	4b74      	ldr	r3, [pc, #464]	; (8003d80 <HAL_RCC_OscConfig+0x474>)
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	4a73      	ldr	r2, [pc, #460]	; (8003d80 <HAL_RCC_OscConfig+0x474>)
 8003bb4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003bb8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003bba:	f7fe fc2d 	bl	8002418 <HAL_GetTick>
 8003bbe:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003bc0:	e008      	b.n	8003bd4 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003bc2:	f7fe fc29 	bl	8002418 <HAL_GetTick>
 8003bc6:	4602      	mov	r2, r0
 8003bc8:	693b      	ldr	r3, [r7, #16]
 8003bca:	1ad3      	subs	r3, r2, r3
 8003bcc:	2b02      	cmp	r3, #2
 8003bce:	d901      	bls.n	8003bd4 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003bd0:	2303      	movs	r3, #3
 8003bd2:	e10c      	b.n	8003dee <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003bd4:	4b6a      	ldr	r3, [pc, #424]	; (8003d80 <HAL_RCC_OscConfig+0x474>)
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003bdc:	2b00      	cmp	r3, #0
 8003bde:	d0f0      	beq.n	8003bc2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	689b      	ldr	r3, [r3, #8]
 8003be4:	2b01      	cmp	r3, #1
 8003be6:	d106      	bne.n	8003bf6 <HAL_RCC_OscConfig+0x2ea>
 8003be8:	4b64      	ldr	r3, [pc, #400]	; (8003d7c <HAL_RCC_OscConfig+0x470>)
 8003bea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003bec:	4a63      	ldr	r2, [pc, #396]	; (8003d7c <HAL_RCC_OscConfig+0x470>)
 8003bee:	f043 0301 	orr.w	r3, r3, #1
 8003bf2:	6713      	str	r3, [r2, #112]	; 0x70
 8003bf4:	e01c      	b.n	8003c30 <HAL_RCC_OscConfig+0x324>
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	689b      	ldr	r3, [r3, #8]
 8003bfa:	2b05      	cmp	r3, #5
 8003bfc:	d10c      	bne.n	8003c18 <HAL_RCC_OscConfig+0x30c>
 8003bfe:	4b5f      	ldr	r3, [pc, #380]	; (8003d7c <HAL_RCC_OscConfig+0x470>)
 8003c00:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c02:	4a5e      	ldr	r2, [pc, #376]	; (8003d7c <HAL_RCC_OscConfig+0x470>)
 8003c04:	f043 0304 	orr.w	r3, r3, #4
 8003c08:	6713      	str	r3, [r2, #112]	; 0x70
 8003c0a:	4b5c      	ldr	r3, [pc, #368]	; (8003d7c <HAL_RCC_OscConfig+0x470>)
 8003c0c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c0e:	4a5b      	ldr	r2, [pc, #364]	; (8003d7c <HAL_RCC_OscConfig+0x470>)
 8003c10:	f043 0301 	orr.w	r3, r3, #1
 8003c14:	6713      	str	r3, [r2, #112]	; 0x70
 8003c16:	e00b      	b.n	8003c30 <HAL_RCC_OscConfig+0x324>
 8003c18:	4b58      	ldr	r3, [pc, #352]	; (8003d7c <HAL_RCC_OscConfig+0x470>)
 8003c1a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c1c:	4a57      	ldr	r2, [pc, #348]	; (8003d7c <HAL_RCC_OscConfig+0x470>)
 8003c1e:	f023 0301 	bic.w	r3, r3, #1
 8003c22:	6713      	str	r3, [r2, #112]	; 0x70
 8003c24:	4b55      	ldr	r3, [pc, #340]	; (8003d7c <HAL_RCC_OscConfig+0x470>)
 8003c26:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c28:	4a54      	ldr	r2, [pc, #336]	; (8003d7c <HAL_RCC_OscConfig+0x470>)
 8003c2a:	f023 0304 	bic.w	r3, r3, #4
 8003c2e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	689b      	ldr	r3, [r3, #8]
 8003c34:	2b00      	cmp	r3, #0
 8003c36:	d015      	beq.n	8003c64 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003c38:	f7fe fbee 	bl	8002418 <HAL_GetTick>
 8003c3c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003c3e:	e00a      	b.n	8003c56 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003c40:	f7fe fbea 	bl	8002418 <HAL_GetTick>
 8003c44:	4602      	mov	r2, r0
 8003c46:	693b      	ldr	r3, [r7, #16]
 8003c48:	1ad3      	subs	r3, r2, r3
 8003c4a:	f241 3288 	movw	r2, #5000	; 0x1388
 8003c4e:	4293      	cmp	r3, r2
 8003c50:	d901      	bls.n	8003c56 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003c52:	2303      	movs	r3, #3
 8003c54:	e0cb      	b.n	8003dee <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003c56:	4b49      	ldr	r3, [pc, #292]	; (8003d7c <HAL_RCC_OscConfig+0x470>)
 8003c58:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c5a:	f003 0302 	and.w	r3, r3, #2
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	d0ee      	beq.n	8003c40 <HAL_RCC_OscConfig+0x334>
 8003c62:	e014      	b.n	8003c8e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003c64:	f7fe fbd8 	bl	8002418 <HAL_GetTick>
 8003c68:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003c6a:	e00a      	b.n	8003c82 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003c6c:	f7fe fbd4 	bl	8002418 <HAL_GetTick>
 8003c70:	4602      	mov	r2, r0
 8003c72:	693b      	ldr	r3, [r7, #16]
 8003c74:	1ad3      	subs	r3, r2, r3
 8003c76:	f241 3288 	movw	r2, #5000	; 0x1388
 8003c7a:	4293      	cmp	r3, r2
 8003c7c:	d901      	bls.n	8003c82 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003c7e:	2303      	movs	r3, #3
 8003c80:	e0b5      	b.n	8003dee <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003c82:	4b3e      	ldr	r3, [pc, #248]	; (8003d7c <HAL_RCC_OscConfig+0x470>)
 8003c84:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c86:	f003 0302 	and.w	r3, r3, #2
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	d1ee      	bne.n	8003c6c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003c8e:	7dfb      	ldrb	r3, [r7, #23]
 8003c90:	2b01      	cmp	r3, #1
 8003c92:	d105      	bne.n	8003ca0 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003c94:	4b39      	ldr	r3, [pc, #228]	; (8003d7c <HAL_RCC_OscConfig+0x470>)
 8003c96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c98:	4a38      	ldr	r2, [pc, #224]	; (8003d7c <HAL_RCC_OscConfig+0x470>)
 8003c9a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003c9e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	699b      	ldr	r3, [r3, #24]
 8003ca4:	2b00      	cmp	r3, #0
 8003ca6:	f000 80a1 	beq.w	8003dec <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003caa:	4b34      	ldr	r3, [pc, #208]	; (8003d7c <HAL_RCC_OscConfig+0x470>)
 8003cac:	689b      	ldr	r3, [r3, #8]
 8003cae:	f003 030c 	and.w	r3, r3, #12
 8003cb2:	2b08      	cmp	r3, #8
 8003cb4:	d05c      	beq.n	8003d70 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	699b      	ldr	r3, [r3, #24]
 8003cba:	2b02      	cmp	r3, #2
 8003cbc:	d141      	bne.n	8003d42 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003cbe:	4b31      	ldr	r3, [pc, #196]	; (8003d84 <HAL_RCC_OscConfig+0x478>)
 8003cc0:	2200      	movs	r2, #0
 8003cc2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003cc4:	f7fe fba8 	bl	8002418 <HAL_GetTick>
 8003cc8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003cca:	e008      	b.n	8003cde <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003ccc:	f7fe fba4 	bl	8002418 <HAL_GetTick>
 8003cd0:	4602      	mov	r2, r0
 8003cd2:	693b      	ldr	r3, [r7, #16]
 8003cd4:	1ad3      	subs	r3, r2, r3
 8003cd6:	2b02      	cmp	r3, #2
 8003cd8:	d901      	bls.n	8003cde <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003cda:	2303      	movs	r3, #3
 8003cdc:	e087      	b.n	8003dee <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003cde:	4b27      	ldr	r3, [pc, #156]	; (8003d7c <HAL_RCC_OscConfig+0x470>)
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	d1f0      	bne.n	8003ccc <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	69da      	ldr	r2, [r3, #28]
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	6a1b      	ldr	r3, [r3, #32]
 8003cf2:	431a      	orrs	r2, r3
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cf8:	019b      	lsls	r3, r3, #6
 8003cfa:	431a      	orrs	r2, r3
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d00:	085b      	lsrs	r3, r3, #1
 8003d02:	3b01      	subs	r3, #1
 8003d04:	041b      	lsls	r3, r3, #16
 8003d06:	431a      	orrs	r2, r3
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d0c:	061b      	lsls	r3, r3, #24
 8003d0e:	491b      	ldr	r1, [pc, #108]	; (8003d7c <HAL_RCC_OscConfig+0x470>)
 8003d10:	4313      	orrs	r3, r2
 8003d12:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003d14:	4b1b      	ldr	r3, [pc, #108]	; (8003d84 <HAL_RCC_OscConfig+0x478>)
 8003d16:	2201      	movs	r2, #1
 8003d18:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d1a:	f7fe fb7d 	bl	8002418 <HAL_GetTick>
 8003d1e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003d20:	e008      	b.n	8003d34 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003d22:	f7fe fb79 	bl	8002418 <HAL_GetTick>
 8003d26:	4602      	mov	r2, r0
 8003d28:	693b      	ldr	r3, [r7, #16]
 8003d2a:	1ad3      	subs	r3, r2, r3
 8003d2c:	2b02      	cmp	r3, #2
 8003d2e:	d901      	bls.n	8003d34 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003d30:	2303      	movs	r3, #3
 8003d32:	e05c      	b.n	8003dee <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003d34:	4b11      	ldr	r3, [pc, #68]	; (8003d7c <HAL_RCC_OscConfig+0x470>)
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d3c:	2b00      	cmp	r3, #0
 8003d3e:	d0f0      	beq.n	8003d22 <HAL_RCC_OscConfig+0x416>
 8003d40:	e054      	b.n	8003dec <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003d42:	4b10      	ldr	r3, [pc, #64]	; (8003d84 <HAL_RCC_OscConfig+0x478>)
 8003d44:	2200      	movs	r2, #0
 8003d46:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d48:	f7fe fb66 	bl	8002418 <HAL_GetTick>
 8003d4c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003d4e:	e008      	b.n	8003d62 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003d50:	f7fe fb62 	bl	8002418 <HAL_GetTick>
 8003d54:	4602      	mov	r2, r0
 8003d56:	693b      	ldr	r3, [r7, #16]
 8003d58:	1ad3      	subs	r3, r2, r3
 8003d5a:	2b02      	cmp	r3, #2
 8003d5c:	d901      	bls.n	8003d62 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003d5e:	2303      	movs	r3, #3
 8003d60:	e045      	b.n	8003dee <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003d62:	4b06      	ldr	r3, [pc, #24]	; (8003d7c <HAL_RCC_OscConfig+0x470>)
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	d1f0      	bne.n	8003d50 <HAL_RCC_OscConfig+0x444>
 8003d6e:	e03d      	b.n	8003dec <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	699b      	ldr	r3, [r3, #24]
 8003d74:	2b01      	cmp	r3, #1
 8003d76:	d107      	bne.n	8003d88 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003d78:	2301      	movs	r3, #1
 8003d7a:	e038      	b.n	8003dee <HAL_RCC_OscConfig+0x4e2>
 8003d7c:	40023800 	.word	0x40023800
 8003d80:	40007000 	.word	0x40007000
 8003d84:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003d88:	4b1b      	ldr	r3, [pc, #108]	; (8003df8 <HAL_RCC_OscConfig+0x4ec>)
 8003d8a:	685b      	ldr	r3, [r3, #4]
 8003d8c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	699b      	ldr	r3, [r3, #24]
 8003d92:	2b01      	cmp	r3, #1
 8003d94:	d028      	beq.n	8003de8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003d96:	68fb      	ldr	r3, [r7, #12]
 8003d98:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003da0:	429a      	cmp	r2, r3
 8003da2:	d121      	bne.n	8003de8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003dae:	429a      	cmp	r2, r3
 8003db0:	d11a      	bne.n	8003de8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003db2:	68fa      	ldr	r2, [r7, #12]
 8003db4:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003db8:	4013      	ands	r3, r2
 8003dba:	687a      	ldr	r2, [r7, #4]
 8003dbc:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003dbe:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003dc0:	4293      	cmp	r3, r2
 8003dc2:	d111      	bne.n	8003de8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003dce:	085b      	lsrs	r3, r3, #1
 8003dd0:	3b01      	subs	r3, #1
 8003dd2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003dd4:	429a      	cmp	r2, r3
 8003dd6:	d107      	bne.n	8003de8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003de2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003de4:	429a      	cmp	r2, r3
 8003de6:	d001      	beq.n	8003dec <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8003de8:	2301      	movs	r3, #1
 8003dea:	e000      	b.n	8003dee <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003dec:	2300      	movs	r3, #0
}
 8003dee:	4618      	mov	r0, r3
 8003df0:	3718      	adds	r7, #24
 8003df2:	46bd      	mov	sp, r7
 8003df4:	bd80      	pop	{r7, pc}
 8003df6:	bf00      	nop
 8003df8:	40023800 	.word	0x40023800

08003dfc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003dfc:	b580      	push	{r7, lr}
 8003dfe:	b084      	sub	sp, #16
 8003e00:	af00      	add	r7, sp, #0
 8003e02:	6078      	str	r0, [r7, #4]
 8003e04:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	2b00      	cmp	r3, #0
 8003e0a:	d101      	bne.n	8003e10 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003e0c:	2301      	movs	r3, #1
 8003e0e:	e0cc      	b.n	8003faa <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003e10:	4b68      	ldr	r3, [pc, #416]	; (8003fb4 <HAL_RCC_ClockConfig+0x1b8>)
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	f003 0307 	and.w	r3, r3, #7
 8003e18:	683a      	ldr	r2, [r7, #0]
 8003e1a:	429a      	cmp	r2, r3
 8003e1c:	d90c      	bls.n	8003e38 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003e1e:	4b65      	ldr	r3, [pc, #404]	; (8003fb4 <HAL_RCC_ClockConfig+0x1b8>)
 8003e20:	683a      	ldr	r2, [r7, #0]
 8003e22:	b2d2      	uxtb	r2, r2
 8003e24:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003e26:	4b63      	ldr	r3, [pc, #396]	; (8003fb4 <HAL_RCC_ClockConfig+0x1b8>)
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	f003 0307 	and.w	r3, r3, #7
 8003e2e:	683a      	ldr	r2, [r7, #0]
 8003e30:	429a      	cmp	r2, r3
 8003e32:	d001      	beq.n	8003e38 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003e34:	2301      	movs	r3, #1
 8003e36:	e0b8      	b.n	8003faa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	f003 0302 	and.w	r3, r3, #2
 8003e40:	2b00      	cmp	r3, #0
 8003e42:	d020      	beq.n	8003e86 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	f003 0304 	and.w	r3, r3, #4
 8003e4c:	2b00      	cmp	r3, #0
 8003e4e:	d005      	beq.n	8003e5c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003e50:	4b59      	ldr	r3, [pc, #356]	; (8003fb8 <HAL_RCC_ClockConfig+0x1bc>)
 8003e52:	689b      	ldr	r3, [r3, #8]
 8003e54:	4a58      	ldr	r2, [pc, #352]	; (8003fb8 <HAL_RCC_ClockConfig+0x1bc>)
 8003e56:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003e5a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	f003 0308 	and.w	r3, r3, #8
 8003e64:	2b00      	cmp	r3, #0
 8003e66:	d005      	beq.n	8003e74 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003e68:	4b53      	ldr	r3, [pc, #332]	; (8003fb8 <HAL_RCC_ClockConfig+0x1bc>)
 8003e6a:	689b      	ldr	r3, [r3, #8]
 8003e6c:	4a52      	ldr	r2, [pc, #328]	; (8003fb8 <HAL_RCC_ClockConfig+0x1bc>)
 8003e6e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003e72:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003e74:	4b50      	ldr	r3, [pc, #320]	; (8003fb8 <HAL_RCC_ClockConfig+0x1bc>)
 8003e76:	689b      	ldr	r3, [r3, #8]
 8003e78:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	689b      	ldr	r3, [r3, #8]
 8003e80:	494d      	ldr	r1, [pc, #308]	; (8003fb8 <HAL_RCC_ClockConfig+0x1bc>)
 8003e82:	4313      	orrs	r3, r2
 8003e84:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	f003 0301 	and.w	r3, r3, #1
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	d044      	beq.n	8003f1c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	685b      	ldr	r3, [r3, #4]
 8003e96:	2b01      	cmp	r3, #1
 8003e98:	d107      	bne.n	8003eaa <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003e9a:	4b47      	ldr	r3, [pc, #284]	; (8003fb8 <HAL_RCC_ClockConfig+0x1bc>)
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	d119      	bne.n	8003eda <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003ea6:	2301      	movs	r3, #1
 8003ea8:	e07f      	b.n	8003faa <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	685b      	ldr	r3, [r3, #4]
 8003eae:	2b02      	cmp	r3, #2
 8003eb0:	d003      	beq.n	8003eba <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003eb6:	2b03      	cmp	r3, #3
 8003eb8:	d107      	bne.n	8003eca <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003eba:	4b3f      	ldr	r3, [pc, #252]	; (8003fb8 <HAL_RCC_ClockConfig+0x1bc>)
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	d109      	bne.n	8003eda <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003ec6:	2301      	movs	r3, #1
 8003ec8:	e06f      	b.n	8003faa <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003eca:	4b3b      	ldr	r3, [pc, #236]	; (8003fb8 <HAL_RCC_ClockConfig+0x1bc>)
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	f003 0302 	and.w	r3, r3, #2
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	d101      	bne.n	8003eda <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003ed6:	2301      	movs	r3, #1
 8003ed8:	e067      	b.n	8003faa <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003eda:	4b37      	ldr	r3, [pc, #220]	; (8003fb8 <HAL_RCC_ClockConfig+0x1bc>)
 8003edc:	689b      	ldr	r3, [r3, #8]
 8003ede:	f023 0203 	bic.w	r2, r3, #3
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	685b      	ldr	r3, [r3, #4]
 8003ee6:	4934      	ldr	r1, [pc, #208]	; (8003fb8 <HAL_RCC_ClockConfig+0x1bc>)
 8003ee8:	4313      	orrs	r3, r2
 8003eea:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003eec:	f7fe fa94 	bl	8002418 <HAL_GetTick>
 8003ef0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003ef2:	e00a      	b.n	8003f0a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003ef4:	f7fe fa90 	bl	8002418 <HAL_GetTick>
 8003ef8:	4602      	mov	r2, r0
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	1ad3      	subs	r3, r2, r3
 8003efe:	f241 3288 	movw	r2, #5000	; 0x1388
 8003f02:	4293      	cmp	r3, r2
 8003f04:	d901      	bls.n	8003f0a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003f06:	2303      	movs	r3, #3
 8003f08:	e04f      	b.n	8003faa <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003f0a:	4b2b      	ldr	r3, [pc, #172]	; (8003fb8 <HAL_RCC_ClockConfig+0x1bc>)
 8003f0c:	689b      	ldr	r3, [r3, #8]
 8003f0e:	f003 020c 	and.w	r2, r3, #12
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	685b      	ldr	r3, [r3, #4]
 8003f16:	009b      	lsls	r3, r3, #2
 8003f18:	429a      	cmp	r2, r3
 8003f1a:	d1eb      	bne.n	8003ef4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003f1c:	4b25      	ldr	r3, [pc, #148]	; (8003fb4 <HAL_RCC_ClockConfig+0x1b8>)
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	f003 0307 	and.w	r3, r3, #7
 8003f24:	683a      	ldr	r2, [r7, #0]
 8003f26:	429a      	cmp	r2, r3
 8003f28:	d20c      	bcs.n	8003f44 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003f2a:	4b22      	ldr	r3, [pc, #136]	; (8003fb4 <HAL_RCC_ClockConfig+0x1b8>)
 8003f2c:	683a      	ldr	r2, [r7, #0]
 8003f2e:	b2d2      	uxtb	r2, r2
 8003f30:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003f32:	4b20      	ldr	r3, [pc, #128]	; (8003fb4 <HAL_RCC_ClockConfig+0x1b8>)
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	f003 0307 	and.w	r3, r3, #7
 8003f3a:	683a      	ldr	r2, [r7, #0]
 8003f3c:	429a      	cmp	r2, r3
 8003f3e:	d001      	beq.n	8003f44 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003f40:	2301      	movs	r3, #1
 8003f42:	e032      	b.n	8003faa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	f003 0304 	and.w	r3, r3, #4
 8003f4c:	2b00      	cmp	r3, #0
 8003f4e:	d008      	beq.n	8003f62 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003f50:	4b19      	ldr	r3, [pc, #100]	; (8003fb8 <HAL_RCC_ClockConfig+0x1bc>)
 8003f52:	689b      	ldr	r3, [r3, #8]
 8003f54:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	68db      	ldr	r3, [r3, #12]
 8003f5c:	4916      	ldr	r1, [pc, #88]	; (8003fb8 <HAL_RCC_ClockConfig+0x1bc>)
 8003f5e:	4313      	orrs	r3, r2
 8003f60:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	f003 0308 	and.w	r3, r3, #8
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	d009      	beq.n	8003f82 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003f6e:	4b12      	ldr	r3, [pc, #72]	; (8003fb8 <HAL_RCC_ClockConfig+0x1bc>)
 8003f70:	689b      	ldr	r3, [r3, #8]
 8003f72:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	691b      	ldr	r3, [r3, #16]
 8003f7a:	00db      	lsls	r3, r3, #3
 8003f7c:	490e      	ldr	r1, [pc, #56]	; (8003fb8 <HAL_RCC_ClockConfig+0x1bc>)
 8003f7e:	4313      	orrs	r3, r2
 8003f80:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003f82:	f000 f821 	bl	8003fc8 <HAL_RCC_GetSysClockFreq>
 8003f86:	4602      	mov	r2, r0
 8003f88:	4b0b      	ldr	r3, [pc, #44]	; (8003fb8 <HAL_RCC_ClockConfig+0x1bc>)
 8003f8a:	689b      	ldr	r3, [r3, #8]
 8003f8c:	091b      	lsrs	r3, r3, #4
 8003f8e:	f003 030f 	and.w	r3, r3, #15
 8003f92:	490a      	ldr	r1, [pc, #40]	; (8003fbc <HAL_RCC_ClockConfig+0x1c0>)
 8003f94:	5ccb      	ldrb	r3, [r1, r3]
 8003f96:	fa22 f303 	lsr.w	r3, r2, r3
 8003f9a:	4a09      	ldr	r2, [pc, #36]	; (8003fc0 <HAL_RCC_ClockConfig+0x1c4>)
 8003f9c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003f9e:	4b09      	ldr	r3, [pc, #36]	; (8003fc4 <HAL_RCC_ClockConfig+0x1c8>)
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	4618      	mov	r0, r3
 8003fa4:	f7fd febc 	bl	8001d20 <HAL_InitTick>

  return HAL_OK;
 8003fa8:	2300      	movs	r3, #0
}
 8003faa:	4618      	mov	r0, r3
 8003fac:	3710      	adds	r7, #16
 8003fae:	46bd      	mov	sp, r7
 8003fb0:	bd80      	pop	{r7, pc}
 8003fb2:	bf00      	nop
 8003fb4:	40023c00 	.word	0x40023c00
 8003fb8:	40023800 	.word	0x40023800
 8003fbc:	0800a700 	.word	0x0800a700
 8003fc0:	20000000 	.word	0x20000000
 8003fc4:	20000010 	.word	0x20000010

08003fc8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003fc8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003fcc:	b094      	sub	sp, #80	; 0x50
 8003fce:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003fd0:	2300      	movs	r3, #0
 8003fd2:	647b      	str	r3, [r7, #68]	; 0x44
 8003fd4:	2300      	movs	r3, #0
 8003fd6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003fd8:	2300      	movs	r3, #0
 8003fda:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8003fdc:	2300      	movs	r3, #0
 8003fde:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003fe0:	4b79      	ldr	r3, [pc, #484]	; (80041c8 <HAL_RCC_GetSysClockFreq+0x200>)
 8003fe2:	689b      	ldr	r3, [r3, #8]
 8003fe4:	f003 030c 	and.w	r3, r3, #12
 8003fe8:	2b08      	cmp	r3, #8
 8003fea:	d00d      	beq.n	8004008 <HAL_RCC_GetSysClockFreq+0x40>
 8003fec:	2b08      	cmp	r3, #8
 8003fee:	f200 80e1 	bhi.w	80041b4 <HAL_RCC_GetSysClockFreq+0x1ec>
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	d002      	beq.n	8003ffc <HAL_RCC_GetSysClockFreq+0x34>
 8003ff6:	2b04      	cmp	r3, #4
 8003ff8:	d003      	beq.n	8004002 <HAL_RCC_GetSysClockFreq+0x3a>
 8003ffa:	e0db      	b.n	80041b4 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003ffc:	4b73      	ldr	r3, [pc, #460]	; (80041cc <HAL_RCC_GetSysClockFreq+0x204>)
 8003ffe:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8004000:	e0db      	b.n	80041ba <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004002:	4b73      	ldr	r3, [pc, #460]	; (80041d0 <HAL_RCC_GetSysClockFreq+0x208>)
 8004004:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004006:	e0d8      	b.n	80041ba <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004008:	4b6f      	ldr	r3, [pc, #444]	; (80041c8 <HAL_RCC_GetSysClockFreq+0x200>)
 800400a:	685b      	ldr	r3, [r3, #4]
 800400c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004010:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004012:	4b6d      	ldr	r3, [pc, #436]	; (80041c8 <HAL_RCC_GetSysClockFreq+0x200>)
 8004014:	685b      	ldr	r3, [r3, #4]
 8004016:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800401a:	2b00      	cmp	r3, #0
 800401c:	d063      	beq.n	80040e6 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800401e:	4b6a      	ldr	r3, [pc, #424]	; (80041c8 <HAL_RCC_GetSysClockFreq+0x200>)
 8004020:	685b      	ldr	r3, [r3, #4]
 8004022:	099b      	lsrs	r3, r3, #6
 8004024:	2200      	movs	r2, #0
 8004026:	63bb      	str	r3, [r7, #56]	; 0x38
 8004028:	63fa      	str	r2, [r7, #60]	; 0x3c
 800402a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800402c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004030:	633b      	str	r3, [r7, #48]	; 0x30
 8004032:	2300      	movs	r3, #0
 8004034:	637b      	str	r3, [r7, #52]	; 0x34
 8004036:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800403a:	4622      	mov	r2, r4
 800403c:	462b      	mov	r3, r5
 800403e:	f04f 0000 	mov.w	r0, #0
 8004042:	f04f 0100 	mov.w	r1, #0
 8004046:	0159      	lsls	r1, r3, #5
 8004048:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800404c:	0150      	lsls	r0, r2, #5
 800404e:	4602      	mov	r2, r0
 8004050:	460b      	mov	r3, r1
 8004052:	4621      	mov	r1, r4
 8004054:	1a51      	subs	r1, r2, r1
 8004056:	6139      	str	r1, [r7, #16]
 8004058:	4629      	mov	r1, r5
 800405a:	eb63 0301 	sbc.w	r3, r3, r1
 800405e:	617b      	str	r3, [r7, #20]
 8004060:	f04f 0200 	mov.w	r2, #0
 8004064:	f04f 0300 	mov.w	r3, #0
 8004068:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800406c:	4659      	mov	r1, fp
 800406e:	018b      	lsls	r3, r1, #6
 8004070:	4651      	mov	r1, sl
 8004072:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004076:	4651      	mov	r1, sl
 8004078:	018a      	lsls	r2, r1, #6
 800407a:	4651      	mov	r1, sl
 800407c:	ebb2 0801 	subs.w	r8, r2, r1
 8004080:	4659      	mov	r1, fp
 8004082:	eb63 0901 	sbc.w	r9, r3, r1
 8004086:	f04f 0200 	mov.w	r2, #0
 800408a:	f04f 0300 	mov.w	r3, #0
 800408e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004092:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004096:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800409a:	4690      	mov	r8, r2
 800409c:	4699      	mov	r9, r3
 800409e:	4623      	mov	r3, r4
 80040a0:	eb18 0303 	adds.w	r3, r8, r3
 80040a4:	60bb      	str	r3, [r7, #8]
 80040a6:	462b      	mov	r3, r5
 80040a8:	eb49 0303 	adc.w	r3, r9, r3
 80040ac:	60fb      	str	r3, [r7, #12]
 80040ae:	f04f 0200 	mov.w	r2, #0
 80040b2:	f04f 0300 	mov.w	r3, #0
 80040b6:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80040ba:	4629      	mov	r1, r5
 80040bc:	024b      	lsls	r3, r1, #9
 80040be:	4621      	mov	r1, r4
 80040c0:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80040c4:	4621      	mov	r1, r4
 80040c6:	024a      	lsls	r2, r1, #9
 80040c8:	4610      	mov	r0, r2
 80040ca:	4619      	mov	r1, r3
 80040cc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80040ce:	2200      	movs	r2, #0
 80040d0:	62bb      	str	r3, [r7, #40]	; 0x28
 80040d2:	62fa      	str	r2, [r7, #44]	; 0x2c
 80040d4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80040d8:	f7fc fd6e 	bl	8000bb8 <__aeabi_uldivmod>
 80040dc:	4602      	mov	r2, r0
 80040de:	460b      	mov	r3, r1
 80040e0:	4613      	mov	r3, r2
 80040e2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80040e4:	e058      	b.n	8004198 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80040e6:	4b38      	ldr	r3, [pc, #224]	; (80041c8 <HAL_RCC_GetSysClockFreq+0x200>)
 80040e8:	685b      	ldr	r3, [r3, #4]
 80040ea:	099b      	lsrs	r3, r3, #6
 80040ec:	2200      	movs	r2, #0
 80040ee:	4618      	mov	r0, r3
 80040f0:	4611      	mov	r1, r2
 80040f2:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80040f6:	623b      	str	r3, [r7, #32]
 80040f8:	2300      	movs	r3, #0
 80040fa:	627b      	str	r3, [r7, #36]	; 0x24
 80040fc:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004100:	4642      	mov	r2, r8
 8004102:	464b      	mov	r3, r9
 8004104:	f04f 0000 	mov.w	r0, #0
 8004108:	f04f 0100 	mov.w	r1, #0
 800410c:	0159      	lsls	r1, r3, #5
 800410e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004112:	0150      	lsls	r0, r2, #5
 8004114:	4602      	mov	r2, r0
 8004116:	460b      	mov	r3, r1
 8004118:	4641      	mov	r1, r8
 800411a:	ebb2 0a01 	subs.w	sl, r2, r1
 800411e:	4649      	mov	r1, r9
 8004120:	eb63 0b01 	sbc.w	fp, r3, r1
 8004124:	f04f 0200 	mov.w	r2, #0
 8004128:	f04f 0300 	mov.w	r3, #0
 800412c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004130:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004134:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004138:	ebb2 040a 	subs.w	r4, r2, sl
 800413c:	eb63 050b 	sbc.w	r5, r3, fp
 8004140:	f04f 0200 	mov.w	r2, #0
 8004144:	f04f 0300 	mov.w	r3, #0
 8004148:	00eb      	lsls	r3, r5, #3
 800414a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800414e:	00e2      	lsls	r2, r4, #3
 8004150:	4614      	mov	r4, r2
 8004152:	461d      	mov	r5, r3
 8004154:	4643      	mov	r3, r8
 8004156:	18e3      	adds	r3, r4, r3
 8004158:	603b      	str	r3, [r7, #0]
 800415a:	464b      	mov	r3, r9
 800415c:	eb45 0303 	adc.w	r3, r5, r3
 8004160:	607b      	str	r3, [r7, #4]
 8004162:	f04f 0200 	mov.w	r2, #0
 8004166:	f04f 0300 	mov.w	r3, #0
 800416a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800416e:	4629      	mov	r1, r5
 8004170:	028b      	lsls	r3, r1, #10
 8004172:	4621      	mov	r1, r4
 8004174:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004178:	4621      	mov	r1, r4
 800417a:	028a      	lsls	r2, r1, #10
 800417c:	4610      	mov	r0, r2
 800417e:	4619      	mov	r1, r3
 8004180:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004182:	2200      	movs	r2, #0
 8004184:	61bb      	str	r3, [r7, #24]
 8004186:	61fa      	str	r2, [r7, #28]
 8004188:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800418c:	f7fc fd14 	bl	8000bb8 <__aeabi_uldivmod>
 8004190:	4602      	mov	r2, r0
 8004192:	460b      	mov	r3, r1
 8004194:	4613      	mov	r3, r2
 8004196:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004198:	4b0b      	ldr	r3, [pc, #44]	; (80041c8 <HAL_RCC_GetSysClockFreq+0x200>)
 800419a:	685b      	ldr	r3, [r3, #4]
 800419c:	0c1b      	lsrs	r3, r3, #16
 800419e:	f003 0303 	and.w	r3, r3, #3
 80041a2:	3301      	adds	r3, #1
 80041a4:	005b      	lsls	r3, r3, #1
 80041a6:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 80041a8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80041aa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80041ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80041b0:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80041b2:	e002      	b.n	80041ba <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80041b4:	4b05      	ldr	r3, [pc, #20]	; (80041cc <HAL_RCC_GetSysClockFreq+0x204>)
 80041b6:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80041b8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80041ba:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80041bc:	4618      	mov	r0, r3
 80041be:	3750      	adds	r7, #80	; 0x50
 80041c0:	46bd      	mov	sp, r7
 80041c2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80041c6:	bf00      	nop
 80041c8:	40023800 	.word	0x40023800
 80041cc:	00f42400 	.word	0x00f42400
 80041d0:	007a1200 	.word	0x007a1200

080041d4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80041d4:	b480      	push	{r7}
 80041d6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80041d8:	4b03      	ldr	r3, [pc, #12]	; (80041e8 <HAL_RCC_GetHCLKFreq+0x14>)
 80041da:	681b      	ldr	r3, [r3, #0]
}
 80041dc:	4618      	mov	r0, r3
 80041de:	46bd      	mov	sp, r7
 80041e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041e4:	4770      	bx	lr
 80041e6:	bf00      	nop
 80041e8:	20000000 	.word	0x20000000

080041ec <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80041ec:	b580      	push	{r7, lr}
 80041ee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80041f0:	f7ff fff0 	bl	80041d4 <HAL_RCC_GetHCLKFreq>
 80041f4:	4602      	mov	r2, r0
 80041f6:	4b05      	ldr	r3, [pc, #20]	; (800420c <HAL_RCC_GetPCLK1Freq+0x20>)
 80041f8:	689b      	ldr	r3, [r3, #8]
 80041fa:	0a9b      	lsrs	r3, r3, #10
 80041fc:	f003 0307 	and.w	r3, r3, #7
 8004200:	4903      	ldr	r1, [pc, #12]	; (8004210 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004202:	5ccb      	ldrb	r3, [r1, r3]
 8004204:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004208:	4618      	mov	r0, r3
 800420a:	bd80      	pop	{r7, pc}
 800420c:	40023800 	.word	0x40023800
 8004210:	0800a710 	.word	0x0800a710

08004214 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004214:	b580      	push	{r7, lr}
 8004216:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004218:	f7ff ffdc 	bl	80041d4 <HAL_RCC_GetHCLKFreq>
 800421c:	4602      	mov	r2, r0
 800421e:	4b05      	ldr	r3, [pc, #20]	; (8004234 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004220:	689b      	ldr	r3, [r3, #8]
 8004222:	0b5b      	lsrs	r3, r3, #13
 8004224:	f003 0307 	and.w	r3, r3, #7
 8004228:	4903      	ldr	r1, [pc, #12]	; (8004238 <HAL_RCC_GetPCLK2Freq+0x24>)
 800422a:	5ccb      	ldrb	r3, [r1, r3]
 800422c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004230:	4618      	mov	r0, r3
 8004232:	bd80      	pop	{r7, pc}
 8004234:	40023800 	.word	0x40023800
 8004238:	0800a710 	.word	0x0800a710

0800423c <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800423c:	b480      	push	{r7}
 800423e:	b083      	sub	sp, #12
 8004240:	af00      	add	r7, sp, #0
 8004242:	6078      	str	r0, [r7, #4]
 8004244:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	220f      	movs	r2, #15
 800424a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800424c:	4b12      	ldr	r3, [pc, #72]	; (8004298 <HAL_RCC_GetClockConfig+0x5c>)
 800424e:	689b      	ldr	r3, [r3, #8]
 8004250:	f003 0203 	and.w	r2, r3, #3
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8004258:	4b0f      	ldr	r3, [pc, #60]	; (8004298 <HAL_RCC_GetClockConfig+0x5c>)
 800425a:	689b      	ldr	r3, [r3, #8]
 800425c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8004264:	4b0c      	ldr	r3, [pc, #48]	; (8004298 <HAL_RCC_GetClockConfig+0x5c>)
 8004266:	689b      	ldr	r3, [r3, #8]
 8004268:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8004270:	4b09      	ldr	r3, [pc, #36]	; (8004298 <HAL_RCC_GetClockConfig+0x5c>)
 8004272:	689b      	ldr	r3, [r3, #8]
 8004274:	08db      	lsrs	r3, r3, #3
 8004276:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800427e:	4b07      	ldr	r3, [pc, #28]	; (800429c <HAL_RCC_GetClockConfig+0x60>)
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	f003 0207 	and.w	r2, r3, #7
 8004286:	683b      	ldr	r3, [r7, #0]
 8004288:	601a      	str	r2, [r3, #0]
}
 800428a:	bf00      	nop
 800428c:	370c      	adds	r7, #12
 800428e:	46bd      	mov	sp, r7
 8004290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004294:	4770      	bx	lr
 8004296:	bf00      	nop
 8004298:	40023800 	.word	0x40023800
 800429c:	40023c00 	.word	0x40023c00

080042a0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80042a0:	b580      	push	{r7, lr}
 80042a2:	b082      	sub	sp, #8
 80042a4:	af00      	add	r7, sp, #0
 80042a6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	d101      	bne.n	80042b2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80042ae:	2301      	movs	r3, #1
 80042b0:	e041      	b.n	8004336 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80042b8:	b2db      	uxtb	r3, r3
 80042ba:	2b00      	cmp	r3, #0
 80042bc:	d106      	bne.n	80042cc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	2200      	movs	r2, #0
 80042c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80042c6:	6878      	ldr	r0, [r7, #4]
 80042c8:	f000 f839 	bl	800433e <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	2202      	movs	r2, #2
 80042d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	681a      	ldr	r2, [r3, #0]
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	3304      	adds	r3, #4
 80042dc:	4619      	mov	r1, r3
 80042de:	4610      	mov	r0, r2
 80042e0:	f000 f9ca 	bl	8004678 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	2201      	movs	r2, #1
 80042e8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	2201      	movs	r2, #1
 80042f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	2201      	movs	r2, #1
 80042f8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	2201      	movs	r2, #1
 8004300:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	2201      	movs	r2, #1
 8004308:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	2201      	movs	r2, #1
 8004310:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	2201      	movs	r2, #1
 8004318:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	2201      	movs	r2, #1
 8004320:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	2201      	movs	r2, #1
 8004328:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	2201      	movs	r2, #1
 8004330:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004334:	2300      	movs	r3, #0
}
 8004336:	4618      	mov	r0, r3
 8004338:	3708      	adds	r7, #8
 800433a:	46bd      	mov	sp, r7
 800433c:	bd80      	pop	{r7, pc}

0800433e <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800433e:	b480      	push	{r7}
 8004340:	b083      	sub	sp, #12
 8004342:	af00      	add	r7, sp, #0
 8004344:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8004346:	bf00      	nop
 8004348:	370c      	adds	r7, #12
 800434a:	46bd      	mov	sp, r7
 800434c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004350:	4770      	bx	lr
	...

08004354 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004354:	b480      	push	{r7}
 8004356:	b085      	sub	sp, #20
 8004358:	af00      	add	r7, sp, #0
 800435a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004362:	b2db      	uxtb	r3, r3
 8004364:	2b01      	cmp	r3, #1
 8004366:	d001      	beq.n	800436c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004368:	2301      	movs	r3, #1
 800436a:	e044      	b.n	80043f6 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	2202      	movs	r2, #2
 8004370:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	68da      	ldr	r2, [r3, #12]
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	f042 0201 	orr.w	r2, r2, #1
 8004382:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	4a1e      	ldr	r2, [pc, #120]	; (8004404 <HAL_TIM_Base_Start_IT+0xb0>)
 800438a:	4293      	cmp	r3, r2
 800438c:	d018      	beq.n	80043c0 <HAL_TIM_Base_Start_IT+0x6c>
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004396:	d013      	beq.n	80043c0 <HAL_TIM_Base_Start_IT+0x6c>
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	4a1a      	ldr	r2, [pc, #104]	; (8004408 <HAL_TIM_Base_Start_IT+0xb4>)
 800439e:	4293      	cmp	r3, r2
 80043a0:	d00e      	beq.n	80043c0 <HAL_TIM_Base_Start_IT+0x6c>
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	4a19      	ldr	r2, [pc, #100]	; (800440c <HAL_TIM_Base_Start_IT+0xb8>)
 80043a8:	4293      	cmp	r3, r2
 80043aa:	d009      	beq.n	80043c0 <HAL_TIM_Base_Start_IT+0x6c>
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	4a17      	ldr	r2, [pc, #92]	; (8004410 <HAL_TIM_Base_Start_IT+0xbc>)
 80043b2:	4293      	cmp	r3, r2
 80043b4:	d004      	beq.n	80043c0 <HAL_TIM_Base_Start_IT+0x6c>
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	4a16      	ldr	r2, [pc, #88]	; (8004414 <HAL_TIM_Base_Start_IT+0xc0>)
 80043bc:	4293      	cmp	r3, r2
 80043be:	d111      	bne.n	80043e4 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	689b      	ldr	r3, [r3, #8]
 80043c6:	f003 0307 	and.w	r3, r3, #7
 80043ca:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	2b06      	cmp	r3, #6
 80043d0:	d010      	beq.n	80043f4 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	681a      	ldr	r2, [r3, #0]
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	f042 0201 	orr.w	r2, r2, #1
 80043e0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80043e2:	e007      	b.n	80043f4 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	681a      	ldr	r2, [r3, #0]
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	f042 0201 	orr.w	r2, r2, #1
 80043f2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80043f4:	2300      	movs	r3, #0
}
 80043f6:	4618      	mov	r0, r3
 80043f8:	3714      	adds	r7, #20
 80043fa:	46bd      	mov	sp, r7
 80043fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004400:	4770      	bx	lr
 8004402:	bf00      	nop
 8004404:	40010000 	.word	0x40010000
 8004408:	40000400 	.word	0x40000400
 800440c:	40000800 	.word	0x40000800
 8004410:	40000c00 	.word	0x40000c00
 8004414:	40014000 	.word	0x40014000

08004418 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004418:	b580      	push	{r7, lr}
 800441a:	b082      	sub	sp, #8
 800441c:	af00      	add	r7, sp, #0
 800441e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	691b      	ldr	r3, [r3, #16]
 8004426:	f003 0302 	and.w	r3, r3, #2
 800442a:	2b02      	cmp	r3, #2
 800442c:	d122      	bne.n	8004474 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	68db      	ldr	r3, [r3, #12]
 8004434:	f003 0302 	and.w	r3, r3, #2
 8004438:	2b02      	cmp	r3, #2
 800443a:	d11b      	bne.n	8004474 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	f06f 0202 	mvn.w	r2, #2
 8004444:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	2201      	movs	r2, #1
 800444a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	699b      	ldr	r3, [r3, #24]
 8004452:	f003 0303 	and.w	r3, r3, #3
 8004456:	2b00      	cmp	r3, #0
 8004458:	d003      	beq.n	8004462 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800445a:	6878      	ldr	r0, [r7, #4]
 800445c:	f000 f8ee 	bl	800463c <HAL_TIM_IC_CaptureCallback>
 8004460:	e005      	b.n	800446e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004462:	6878      	ldr	r0, [r7, #4]
 8004464:	f000 f8e0 	bl	8004628 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004468:	6878      	ldr	r0, [r7, #4]
 800446a:	f000 f8f1 	bl	8004650 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	2200      	movs	r2, #0
 8004472:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	691b      	ldr	r3, [r3, #16]
 800447a:	f003 0304 	and.w	r3, r3, #4
 800447e:	2b04      	cmp	r3, #4
 8004480:	d122      	bne.n	80044c8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	68db      	ldr	r3, [r3, #12]
 8004488:	f003 0304 	and.w	r3, r3, #4
 800448c:	2b04      	cmp	r3, #4
 800448e:	d11b      	bne.n	80044c8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	f06f 0204 	mvn.w	r2, #4
 8004498:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	2202      	movs	r2, #2
 800449e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	699b      	ldr	r3, [r3, #24]
 80044a6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80044aa:	2b00      	cmp	r3, #0
 80044ac:	d003      	beq.n	80044b6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80044ae:	6878      	ldr	r0, [r7, #4]
 80044b0:	f000 f8c4 	bl	800463c <HAL_TIM_IC_CaptureCallback>
 80044b4:	e005      	b.n	80044c2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80044b6:	6878      	ldr	r0, [r7, #4]
 80044b8:	f000 f8b6 	bl	8004628 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80044bc:	6878      	ldr	r0, [r7, #4]
 80044be:	f000 f8c7 	bl	8004650 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	2200      	movs	r2, #0
 80044c6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	691b      	ldr	r3, [r3, #16]
 80044ce:	f003 0308 	and.w	r3, r3, #8
 80044d2:	2b08      	cmp	r3, #8
 80044d4:	d122      	bne.n	800451c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	68db      	ldr	r3, [r3, #12]
 80044dc:	f003 0308 	and.w	r3, r3, #8
 80044e0:	2b08      	cmp	r3, #8
 80044e2:	d11b      	bne.n	800451c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	f06f 0208 	mvn.w	r2, #8
 80044ec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	2204      	movs	r2, #4
 80044f2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	69db      	ldr	r3, [r3, #28]
 80044fa:	f003 0303 	and.w	r3, r3, #3
 80044fe:	2b00      	cmp	r3, #0
 8004500:	d003      	beq.n	800450a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004502:	6878      	ldr	r0, [r7, #4]
 8004504:	f000 f89a 	bl	800463c <HAL_TIM_IC_CaptureCallback>
 8004508:	e005      	b.n	8004516 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800450a:	6878      	ldr	r0, [r7, #4]
 800450c:	f000 f88c 	bl	8004628 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004510:	6878      	ldr	r0, [r7, #4]
 8004512:	f000 f89d 	bl	8004650 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	2200      	movs	r2, #0
 800451a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	691b      	ldr	r3, [r3, #16]
 8004522:	f003 0310 	and.w	r3, r3, #16
 8004526:	2b10      	cmp	r3, #16
 8004528:	d122      	bne.n	8004570 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	68db      	ldr	r3, [r3, #12]
 8004530:	f003 0310 	and.w	r3, r3, #16
 8004534:	2b10      	cmp	r3, #16
 8004536:	d11b      	bne.n	8004570 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	f06f 0210 	mvn.w	r2, #16
 8004540:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	2208      	movs	r2, #8
 8004546:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	69db      	ldr	r3, [r3, #28]
 800454e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004552:	2b00      	cmp	r3, #0
 8004554:	d003      	beq.n	800455e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004556:	6878      	ldr	r0, [r7, #4]
 8004558:	f000 f870 	bl	800463c <HAL_TIM_IC_CaptureCallback>
 800455c:	e005      	b.n	800456a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800455e:	6878      	ldr	r0, [r7, #4]
 8004560:	f000 f862 	bl	8004628 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004564:	6878      	ldr	r0, [r7, #4]
 8004566:	f000 f873 	bl	8004650 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	2200      	movs	r2, #0
 800456e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	691b      	ldr	r3, [r3, #16]
 8004576:	f003 0301 	and.w	r3, r3, #1
 800457a:	2b01      	cmp	r3, #1
 800457c:	d10e      	bne.n	800459c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	68db      	ldr	r3, [r3, #12]
 8004584:	f003 0301 	and.w	r3, r3, #1
 8004588:	2b01      	cmp	r3, #1
 800458a:	d107      	bne.n	800459c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	f06f 0201 	mvn.w	r2, #1
 8004594:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004596:	6878      	ldr	r0, [r7, #4]
 8004598:	f7fd faee 	bl	8001b78 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	691b      	ldr	r3, [r3, #16]
 80045a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80045a6:	2b80      	cmp	r3, #128	; 0x80
 80045a8:	d10e      	bne.n	80045c8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	68db      	ldr	r3, [r3, #12]
 80045b0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80045b4:	2b80      	cmp	r3, #128	; 0x80
 80045b6:	d107      	bne.n	80045c8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80045c0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80045c2:	6878      	ldr	r0, [r7, #4]
 80045c4:	f000 f8e2 	bl	800478c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	691b      	ldr	r3, [r3, #16]
 80045ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80045d2:	2b40      	cmp	r3, #64	; 0x40
 80045d4:	d10e      	bne.n	80045f4 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	68db      	ldr	r3, [r3, #12]
 80045dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80045e0:	2b40      	cmp	r3, #64	; 0x40
 80045e2:	d107      	bne.n	80045f4 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80045ec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80045ee:	6878      	ldr	r0, [r7, #4]
 80045f0:	f000 f838 	bl	8004664 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	691b      	ldr	r3, [r3, #16]
 80045fa:	f003 0320 	and.w	r3, r3, #32
 80045fe:	2b20      	cmp	r3, #32
 8004600:	d10e      	bne.n	8004620 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	68db      	ldr	r3, [r3, #12]
 8004608:	f003 0320 	and.w	r3, r3, #32
 800460c:	2b20      	cmp	r3, #32
 800460e:	d107      	bne.n	8004620 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	f06f 0220 	mvn.w	r2, #32
 8004618:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800461a:	6878      	ldr	r0, [r7, #4]
 800461c:	f000 f8ac 	bl	8004778 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004620:	bf00      	nop
 8004622:	3708      	adds	r7, #8
 8004624:	46bd      	mov	sp, r7
 8004626:	bd80      	pop	{r7, pc}

08004628 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004628:	b480      	push	{r7}
 800462a:	b083      	sub	sp, #12
 800462c:	af00      	add	r7, sp, #0
 800462e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004630:	bf00      	nop
 8004632:	370c      	adds	r7, #12
 8004634:	46bd      	mov	sp, r7
 8004636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800463a:	4770      	bx	lr

0800463c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800463c:	b480      	push	{r7}
 800463e:	b083      	sub	sp, #12
 8004640:	af00      	add	r7, sp, #0
 8004642:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004644:	bf00      	nop
 8004646:	370c      	adds	r7, #12
 8004648:	46bd      	mov	sp, r7
 800464a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800464e:	4770      	bx	lr

08004650 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004650:	b480      	push	{r7}
 8004652:	b083      	sub	sp, #12
 8004654:	af00      	add	r7, sp, #0
 8004656:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004658:	bf00      	nop
 800465a:	370c      	adds	r7, #12
 800465c:	46bd      	mov	sp, r7
 800465e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004662:	4770      	bx	lr

08004664 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004664:	b480      	push	{r7}
 8004666:	b083      	sub	sp, #12
 8004668:	af00      	add	r7, sp, #0
 800466a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800466c:	bf00      	nop
 800466e:	370c      	adds	r7, #12
 8004670:	46bd      	mov	sp, r7
 8004672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004676:	4770      	bx	lr

08004678 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004678:	b480      	push	{r7}
 800467a:	b085      	sub	sp, #20
 800467c:	af00      	add	r7, sp, #0
 800467e:	6078      	str	r0, [r7, #4]
 8004680:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	4a34      	ldr	r2, [pc, #208]	; (800475c <TIM_Base_SetConfig+0xe4>)
 800468c:	4293      	cmp	r3, r2
 800468e:	d00f      	beq.n	80046b0 <TIM_Base_SetConfig+0x38>
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004696:	d00b      	beq.n	80046b0 <TIM_Base_SetConfig+0x38>
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	4a31      	ldr	r2, [pc, #196]	; (8004760 <TIM_Base_SetConfig+0xe8>)
 800469c:	4293      	cmp	r3, r2
 800469e:	d007      	beq.n	80046b0 <TIM_Base_SetConfig+0x38>
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	4a30      	ldr	r2, [pc, #192]	; (8004764 <TIM_Base_SetConfig+0xec>)
 80046a4:	4293      	cmp	r3, r2
 80046a6:	d003      	beq.n	80046b0 <TIM_Base_SetConfig+0x38>
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	4a2f      	ldr	r2, [pc, #188]	; (8004768 <TIM_Base_SetConfig+0xf0>)
 80046ac:	4293      	cmp	r3, r2
 80046ae:	d108      	bne.n	80046c2 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80046b6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80046b8:	683b      	ldr	r3, [r7, #0]
 80046ba:	685b      	ldr	r3, [r3, #4]
 80046bc:	68fa      	ldr	r2, [r7, #12]
 80046be:	4313      	orrs	r3, r2
 80046c0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	4a25      	ldr	r2, [pc, #148]	; (800475c <TIM_Base_SetConfig+0xe4>)
 80046c6:	4293      	cmp	r3, r2
 80046c8:	d01b      	beq.n	8004702 <TIM_Base_SetConfig+0x8a>
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80046d0:	d017      	beq.n	8004702 <TIM_Base_SetConfig+0x8a>
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	4a22      	ldr	r2, [pc, #136]	; (8004760 <TIM_Base_SetConfig+0xe8>)
 80046d6:	4293      	cmp	r3, r2
 80046d8:	d013      	beq.n	8004702 <TIM_Base_SetConfig+0x8a>
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	4a21      	ldr	r2, [pc, #132]	; (8004764 <TIM_Base_SetConfig+0xec>)
 80046de:	4293      	cmp	r3, r2
 80046e0:	d00f      	beq.n	8004702 <TIM_Base_SetConfig+0x8a>
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	4a20      	ldr	r2, [pc, #128]	; (8004768 <TIM_Base_SetConfig+0xf0>)
 80046e6:	4293      	cmp	r3, r2
 80046e8:	d00b      	beq.n	8004702 <TIM_Base_SetConfig+0x8a>
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	4a1f      	ldr	r2, [pc, #124]	; (800476c <TIM_Base_SetConfig+0xf4>)
 80046ee:	4293      	cmp	r3, r2
 80046f0:	d007      	beq.n	8004702 <TIM_Base_SetConfig+0x8a>
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	4a1e      	ldr	r2, [pc, #120]	; (8004770 <TIM_Base_SetConfig+0xf8>)
 80046f6:	4293      	cmp	r3, r2
 80046f8:	d003      	beq.n	8004702 <TIM_Base_SetConfig+0x8a>
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	4a1d      	ldr	r2, [pc, #116]	; (8004774 <TIM_Base_SetConfig+0xfc>)
 80046fe:	4293      	cmp	r3, r2
 8004700:	d108      	bne.n	8004714 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004702:	68fb      	ldr	r3, [r7, #12]
 8004704:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004708:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800470a:	683b      	ldr	r3, [r7, #0]
 800470c:	68db      	ldr	r3, [r3, #12]
 800470e:	68fa      	ldr	r2, [r7, #12]
 8004710:	4313      	orrs	r3, r2
 8004712:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004714:	68fb      	ldr	r3, [r7, #12]
 8004716:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800471a:	683b      	ldr	r3, [r7, #0]
 800471c:	695b      	ldr	r3, [r3, #20]
 800471e:	4313      	orrs	r3, r2
 8004720:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	68fa      	ldr	r2, [r7, #12]
 8004726:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004728:	683b      	ldr	r3, [r7, #0]
 800472a:	689a      	ldr	r2, [r3, #8]
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004730:	683b      	ldr	r3, [r7, #0]
 8004732:	681a      	ldr	r2, [r3, #0]
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	4a08      	ldr	r2, [pc, #32]	; (800475c <TIM_Base_SetConfig+0xe4>)
 800473c:	4293      	cmp	r3, r2
 800473e:	d103      	bne.n	8004748 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004740:	683b      	ldr	r3, [r7, #0]
 8004742:	691a      	ldr	r2, [r3, #16]
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	2201      	movs	r2, #1
 800474c:	615a      	str	r2, [r3, #20]
}
 800474e:	bf00      	nop
 8004750:	3714      	adds	r7, #20
 8004752:	46bd      	mov	sp, r7
 8004754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004758:	4770      	bx	lr
 800475a:	bf00      	nop
 800475c:	40010000 	.word	0x40010000
 8004760:	40000400 	.word	0x40000400
 8004764:	40000800 	.word	0x40000800
 8004768:	40000c00 	.word	0x40000c00
 800476c:	40014000 	.word	0x40014000
 8004770:	40014400 	.word	0x40014400
 8004774:	40014800 	.word	0x40014800

08004778 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004778:	b480      	push	{r7}
 800477a:	b083      	sub	sp, #12
 800477c:	af00      	add	r7, sp, #0
 800477e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004780:	bf00      	nop
 8004782:	370c      	adds	r7, #12
 8004784:	46bd      	mov	sp, r7
 8004786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800478a:	4770      	bx	lr

0800478c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800478c:	b480      	push	{r7}
 800478e:	b083      	sub	sp, #12
 8004790:	af00      	add	r7, sp, #0
 8004792:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004794:	bf00      	nop
 8004796:	370c      	adds	r7, #12
 8004798:	46bd      	mov	sp, r7
 800479a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800479e:	4770      	bx	lr

080047a0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80047a0:	b580      	push	{r7, lr}
 80047a2:	b082      	sub	sp, #8
 80047a4:	af00      	add	r7, sp, #0
 80047a6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	2b00      	cmp	r3, #0
 80047ac:	d101      	bne.n	80047b2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80047ae:	2301      	movs	r3, #1
 80047b0:	e03f      	b.n	8004832 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80047b8:	b2db      	uxtb	r3, r3
 80047ba:	2b00      	cmp	r3, #0
 80047bc:	d106      	bne.n	80047cc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	2200      	movs	r2, #0
 80047c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80047c6:	6878      	ldr	r0, [r7, #4]
 80047c8:	f7fd fa62 	bl	8001c90 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	2224      	movs	r2, #36	; 0x24
 80047d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	68da      	ldr	r2, [r3, #12]
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80047e2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80047e4:	6878      	ldr	r0, [r7, #4]
 80047e6:	f000 f929 	bl	8004a3c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	691a      	ldr	r2, [r3, #16]
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80047f8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	695a      	ldr	r2, [r3, #20]
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004808:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	68da      	ldr	r2, [r3, #12]
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004818:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	2200      	movs	r2, #0
 800481e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	2220      	movs	r2, #32
 8004824:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	2220      	movs	r2, #32
 800482c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004830:	2300      	movs	r3, #0
}
 8004832:	4618      	mov	r0, r3
 8004834:	3708      	adds	r7, #8
 8004836:	46bd      	mov	sp, r7
 8004838:	bd80      	pop	{r7, pc}

0800483a <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800483a:	b580      	push	{r7, lr}
 800483c:	b08a      	sub	sp, #40	; 0x28
 800483e:	af02      	add	r7, sp, #8
 8004840:	60f8      	str	r0, [r7, #12]
 8004842:	60b9      	str	r1, [r7, #8]
 8004844:	603b      	str	r3, [r7, #0]
 8004846:	4613      	mov	r3, r2
 8004848:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800484a:	2300      	movs	r3, #0
 800484c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800484e:	68fb      	ldr	r3, [r7, #12]
 8004850:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004854:	b2db      	uxtb	r3, r3
 8004856:	2b20      	cmp	r3, #32
 8004858:	d17c      	bne.n	8004954 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800485a:	68bb      	ldr	r3, [r7, #8]
 800485c:	2b00      	cmp	r3, #0
 800485e:	d002      	beq.n	8004866 <HAL_UART_Transmit+0x2c>
 8004860:	88fb      	ldrh	r3, [r7, #6]
 8004862:	2b00      	cmp	r3, #0
 8004864:	d101      	bne.n	800486a <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004866:	2301      	movs	r3, #1
 8004868:	e075      	b.n	8004956 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800486a:	68fb      	ldr	r3, [r7, #12]
 800486c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004870:	2b01      	cmp	r3, #1
 8004872:	d101      	bne.n	8004878 <HAL_UART_Transmit+0x3e>
 8004874:	2302      	movs	r3, #2
 8004876:	e06e      	b.n	8004956 <HAL_UART_Transmit+0x11c>
 8004878:	68fb      	ldr	r3, [r7, #12]
 800487a:	2201      	movs	r2, #1
 800487c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004880:	68fb      	ldr	r3, [r7, #12]
 8004882:	2200      	movs	r2, #0
 8004884:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004886:	68fb      	ldr	r3, [r7, #12]
 8004888:	2221      	movs	r2, #33	; 0x21
 800488a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800488e:	f7fd fdc3 	bl	8002418 <HAL_GetTick>
 8004892:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004894:	68fb      	ldr	r3, [r7, #12]
 8004896:	88fa      	ldrh	r2, [r7, #6]
 8004898:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800489a:	68fb      	ldr	r3, [r7, #12]
 800489c:	88fa      	ldrh	r2, [r7, #6]
 800489e:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	689b      	ldr	r3, [r3, #8]
 80048a4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80048a8:	d108      	bne.n	80048bc <HAL_UART_Transmit+0x82>
 80048aa:	68fb      	ldr	r3, [r7, #12]
 80048ac:	691b      	ldr	r3, [r3, #16]
 80048ae:	2b00      	cmp	r3, #0
 80048b0:	d104      	bne.n	80048bc <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80048b2:	2300      	movs	r3, #0
 80048b4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80048b6:	68bb      	ldr	r3, [r7, #8]
 80048b8:	61bb      	str	r3, [r7, #24]
 80048ba:	e003      	b.n	80048c4 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80048bc:	68bb      	ldr	r3, [r7, #8]
 80048be:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80048c0:	2300      	movs	r3, #0
 80048c2:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80048c4:	68fb      	ldr	r3, [r7, #12]
 80048c6:	2200      	movs	r2, #0
 80048c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80048cc:	e02a      	b.n	8004924 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80048ce:	683b      	ldr	r3, [r7, #0]
 80048d0:	9300      	str	r3, [sp, #0]
 80048d2:	697b      	ldr	r3, [r7, #20]
 80048d4:	2200      	movs	r2, #0
 80048d6:	2180      	movs	r1, #128	; 0x80
 80048d8:	68f8      	ldr	r0, [r7, #12]
 80048da:	f000 f840 	bl	800495e <UART_WaitOnFlagUntilTimeout>
 80048de:	4603      	mov	r3, r0
 80048e0:	2b00      	cmp	r3, #0
 80048e2:	d001      	beq.n	80048e8 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80048e4:	2303      	movs	r3, #3
 80048e6:	e036      	b.n	8004956 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80048e8:	69fb      	ldr	r3, [r7, #28]
 80048ea:	2b00      	cmp	r3, #0
 80048ec:	d10b      	bne.n	8004906 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80048ee:	69bb      	ldr	r3, [r7, #24]
 80048f0:	881b      	ldrh	r3, [r3, #0]
 80048f2:	461a      	mov	r2, r3
 80048f4:	68fb      	ldr	r3, [r7, #12]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80048fc:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80048fe:	69bb      	ldr	r3, [r7, #24]
 8004900:	3302      	adds	r3, #2
 8004902:	61bb      	str	r3, [r7, #24]
 8004904:	e007      	b.n	8004916 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8004906:	69fb      	ldr	r3, [r7, #28]
 8004908:	781a      	ldrb	r2, [r3, #0]
 800490a:	68fb      	ldr	r3, [r7, #12]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004910:	69fb      	ldr	r3, [r7, #28]
 8004912:	3301      	adds	r3, #1
 8004914:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004916:	68fb      	ldr	r3, [r7, #12]
 8004918:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800491a:	b29b      	uxth	r3, r3
 800491c:	3b01      	subs	r3, #1
 800491e:	b29a      	uxth	r2, r3
 8004920:	68fb      	ldr	r3, [r7, #12]
 8004922:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8004924:	68fb      	ldr	r3, [r7, #12]
 8004926:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004928:	b29b      	uxth	r3, r3
 800492a:	2b00      	cmp	r3, #0
 800492c:	d1cf      	bne.n	80048ce <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800492e:	683b      	ldr	r3, [r7, #0]
 8004930:	9300      	str	r3, [sp, #0]
 8004932:	697b      	ldr	r3, [r7, #20]
 8004934:	2200      	movs	r2, #0
 8004936:	2140      	movs	r1, #64	; 0x40
 8004938:	68f8      	ldr	r0, [r7, #12]
 800493a:	f000 f810 	bl	800495e <UART_WaitOnFlagUntilTimeout>
 800493e:	4603      	mov	r3, r0
 8004940:	2b00      	cmp	r3, #0
 8004942:	d001      	beq.n	8004948 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8004944:	2303      	movs	r3, #3
 8004946:	e006      	b.n	8004956 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004948:	68fb      	ldr	r3, [r7, #12]
 800494a:	2220      	movs	r2, #32
 800494c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8004950:	2300      	movs	r3, #0
 8004952:	e000      	b.n	8004956 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8004954:	2302      	movs	r3, #2
  }
}
 8004956:	4618      	mov	r0, r3
 8004958:	3720      	adds	r7, #32
 800495a:	46bd      	mov	sp, r7
 800495c:	bd80      	pop	{r7, pc}

0800495e <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800495e:	b580      	push	{r7, lr}
 8004960:	b090      	sub	sp, #64	; 0x40
 8004962:	af00      	add	r7, sp, #0
 8004964:	60f8      	str	r0, [r7, #12]
 8004966:	60b9      	str	r1, [r7, #8]
 8004968:	603b      	str	r3, [r7, #0]
 800496a:	4613      	mov	r3, r2
 800496c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800496e:	e050      	b.n	8004a12 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004970:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004972:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004976:	d04c      	beq.n	8004a12 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8004978:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800497a:	2b00      	cmp	r3, #0
 800497c:	d007      	beq.n	800498e <UART_WaitOnFlagUntilTimeout+0x30>
 800497e:	f7fd fd4b 	bl	8002418 <HAL_GetTick>
 8004982:	4602      	mov	r2, r0
 8004984:	683b      	ldr	r3, [r7, #0]
 8004986:	1ad3      	subs	r3, r2, r3
 8004988:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800498a:	429a      	cmp	r2, r3
 800498c:	d241      	bcs.n	8004a12 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800498e:	68fb      	ldr	r3, [r7, #12]
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	330c      	adds	r3, #12
 8004994:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004996:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004998:	e853 3f00 	ldrex	r3, [r3]
 800499c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800499e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049a0:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80049a4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80049a6:	68fb      	ldr	r3, [r7, #12]
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	330c      	adds	r3, #12
 80049ac:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80049ae:	637a      	str	r2, [r7, #52]	; 0x34
 80049b0:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80049b2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80049b4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80049b6:	e841 2300 	strex	r3, r2, [r1]
 80049ba:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80049bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80049be:	2b00      	cmp	r3, #0
 80049c0:	d1e5      	bne.n	800498e <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80049c2:	68fb      	ldr	r3, [r7, #12]
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	3314      	adds	r3, #20
 80049c8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80049ca:	697b      	ldr	r3, [r7, #20]
 80049cc:	e853 3f00 	ldrex	r3, [r3]
 80049d0:	613b      	str	r3, [r7, #16]
   return(result);
 80049d2:	693b      	ldr	r3, [r7, #16]
 80049d4:	f023 0301 	bic.w	r3, r3, #1
 80049d8:	63bb      	str	r3, [r7, #56]	; 0x38
 80049da:	68fb      	ldr	r3, [r7, #12]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	3314      	adds	r3, #20
 80049e0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80049e2:	623a      	str	r2, [r7, #32]
 80049e4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80049e6:	69f9      	ldr	r1, [r7, #28]
 80049e8:	6a3a      	ldr	r2, [r7, #32]
 80049ea:	e841 2300 	strex	r3, r2, [r1]
 80049ee:	61bb      	str	r3, [r7, #24]
   return(result);
 80049f0:	69bb      	ldr	r3, [r7, #24]
 80049f2:	2b00      	cmp	r3, #0
 80049f4:	d1e5      	bne.n	80049c2 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80049f6:	68fb      	ldr	r3, [r7, #12]
 80049f8:	2220      	movs	r2, #32
 80049fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80049fe:	68fb      	ldr	r3, [r7, #12]
 8004a00:	2220      	movs	r2, #32
 8004a02:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8004a06:	68fb      	ldr	r3, [r7, #12]
 8004a08:	2200      	movs	r2, #0
 8004a0a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8004a0e:	2303      	movs	r3, #3
 8004a10:	e00f      	b.n	8004a32 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004a12:	68fb      	ldr	r3, [r7, #12]
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	681a      	ldr	r2, [r3, #0]
 8004a18:	68bb      	ldr	r3, [r7, #8]
 8004a1a:	4013      	ands	r3, r2
 8004a1c:	68ba      	ldr	r2, [r7, #8]
 8004a1e:	429a      	cmp	r2, r3
 8004a20:	bf0c      	ite	eq
 8004a22:	2301      	moveq	r3, #1
 8004a24:	2300      	movne	r3, #0
 8004a26:	b2db      	uxtb	r3, r3
 8004a28:	461a      	mov	r2, r3
 8004a2a:	79fb      	ldrb	r3, [r7, #7]
 8004a2c:	429a      	cmp	r2, r3
 8004a2e:	d09f      	beq.n	8004970 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004a30:	2300      	movs	r3, #0
}
 8004a32:	4618      	mov	r0, r3
 8004a34:	3740      	adds	r7, #64	; 0x40
 8004a36:	46bd      	mov	sp, r7
 8004a38:	bd80      	pop	{r7, pc}
	...

08004a3c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004a3c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004a40:	b0c0      	sub	sp, #256	; 0x100
 8004a42:	af00      	add	r7, sp, #0
 8004a44:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004a48:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	691b      	ldr	r3, [r3, #16]
 8004a50:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8004a54:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004a58:	68d9      	ldr	r1, [r3, #12]
 8004a5a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004a5e:	681a      	ldr	r2, [r3, #0]
 8004a60:	ea40 0301 	orr.w	r3, r0, r1
 8004a64:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004a66:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004a6a:	689a      	ldr	r2, [r3, #8]
 8004a6c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004a70:	691b      	ldr	r3, [r3, #16]
 8004a72:	431a      	orrs	r2, r3
 8004a74:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004a78:	695b      	ldr	r3, [r3, #20]
 8004a7a:	431a      	orrs	r2, r3
 8004a7c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004a80:	69db      	ldr	r3, [r3, #28]
 8004a82:	4313      	orrs	r3, r2
 8004a84:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004a88:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	68db      	ldr	r3, [r3, #12]
 8004a90:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8004a94:	f021 010c 	bic.w	r1, r1, #12
 8004a98:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004a9c:	681a      	ldr	r2, [r3, #0]
 8004a9e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8004aa2:	430b      	orrs	r3, r1
 8004aa4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004aa6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	695b      	ldr	r3, [r3, #20]
 8004aae:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8004ab2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004ab6:	6999      	ldr	r1, [r3, #24]
 8004ab8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004abc:	681a      	ldr	r2, [r3, #0]
 8004abe:	ea40 0301 	orr.w	r3, r0, r1
 8004ac2:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004ac4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004ac8:	681a      	ldr	r2, [r3, #0]
 8004aca:	4b8f      	ldr	r3, [pc, #572]	; (8004d08 <UART_SetConfig+0x2cc>)
 8004acc:	429a      	cmp	r2, r3
 8004ace:	d005      	beq.n	8004adc <UART_SetConfig+0xa0>
 8004ad0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004ad4:	681a      	ldr	r2, [r3, #0]
 8004ad6:	4b8d      	ldr	r3, [pc, #564]	; (8004d0c <UART_SetConfig+0x2d0>)
 8004ad8:	429a      	cmp	r2, r3
 8004ada:	d104      	bne.n	8004ae6 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004adc:	f7ff fb9a 	bl	8004214 <HAL_RCC_GetPCLK2Freq>
 8004ae0:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8004ae4:	e003      	b.n	8004aee <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004ae6:	f7ff fb81 	bl	80041ec <HAL_RCC_GetPCLK1Freq>
 8004aea:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004aee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004af2:	69db      	ldr	r3, [r3, #28]
 8004af4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004af8:	f040 810c 	bne.w	8004d14 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004afc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004b00:	2200      	movs	r2, #0
 8004b02:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8004b06:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8004b0a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8004b0e:	4622      	mov	r2, r4
 8004b10:	462b      	mov	r3, r5
 8004b12:	1891      	adds	r1, r2, r2
 8004b14:	65b9      	str	r1, [r7, #88]	; 0x58
 8004b16:	415b      	adcs	r3, r3
 8004b18:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004b1a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8004b1e:	4621      	mov	r1, r4
 8004b20:	eb12 0801 	adds.w	r8, r2, r1
 8004b24:	4629      	mov	r1, r5
 8004b26:	eb43 0901 	adc.w	r9, r3, r1
 8004b2a:	f04f 0200 	mov.w	r2, #0
 8004b2e:	f04f 0300 	mov.w	r3, #0
 8004b32:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004b36:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004b3a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004b3e:	4690      	mov	r8, r2
 8004b40:	4699      	mov	r9, r3
 8004b42:	4623      	mov	r3, r4
 8004b44:	eb18 0303 	adds.w	r3, r8, r3
 8004b48:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8004b4c:	462b      	mov	r3, r5
 8004b4e:	eb49 0303 	adc.w	r3, r9, r3
 8004b52:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8004b56:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004b5a:	685b      	ldr	r3, [r3, #4]
 8004b5c:	2200      	movs	r2, #0
 8004b5e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8004b62:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8004b66:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8004b6a:	460b      	mov	r3, r1
 8004b6c:	18db      	adds	r3, r3, r3
 8004b6e:	653b      	str	r3, [r7, #80]	; 0x50
 8004b70:	4613      	mov	r3, r2
 8004b72:	eb42 0303 	adc.w	r3, r2, r3
 8004b76:	657b      	str	r3, [r7, #84]	; 0x54
 8004b78:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8004b7c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8004b80:	f7fc f81a 	bl	8000bb8 <__aeabi_uldivmod>
 8004b84:	4602      	mov	r2, r0
 8004b86:	460b      	mov	r3, r1
 8004b88:	4b61      	ldr	r3, [pc, #388]	; (8004d10 <UART_SetConfig+0x2d4>)
 8004b8a:	fba3 2302 	umull	r2, r3, r3, r2
 8004b8e:	095b      	lsrs	r3, r3, #5
 8004b90:	011c      	lsls	r4, r3, #4
 8004b92:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004b96:	2200      	movs	r2, #0
 8004b98:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004b9c:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8004ba0:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8004ba4:	4642      	mov	r2, r8
 8004ba6:	464b      	mov	r3, r9
 8004ba8:	1891      	adds	r1, r2, r2
 8004baa:	64b9      	str	r1, [r7, #72]	; 0x48
 8004bac:	415b      	adcs	r3, r3
 8004bae:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004bb0:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8004bb4:	4641      	mov	r1, r8
 8004bb6:	eb12 0a01 	adds.w	sl, r2, r1
 8004bba:	4649      	mov	r1, r9
 8004bbc:	eb43 0b01 	adc.w	fp, r3, r1
 8004bc0:	f04f 0200 	mov.w	r2, #0
 8004bc4:	f04f 0300 	mov.w	r3, #0
 8004bc8:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004bcc:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004bd0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004bd4:	4692      	mov	sl, r2
 8004bd6:	469b      	mov	fp, r3
 8004bd8:	4643      	mov	r3, r8
 8004bda:	eb1a 0303 	adds.w	r3, sl, r3
 8004bde:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004be2:	464b      	mov	r3, r9
 8004be4:	eb4b 0303 	adc.w	r3, fp, r3
 8004be8:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8004bec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004bf0:	685b      	ldr	r3, [r3, #4]
 8004bf2:	2200      	movs	r2, #0
 8004bf4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004bf8:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8004bfc:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8004c00:	460b      	mov	r3, r1
 8004c02:	18db      	adds	r3, r3, r3
 8004c04:	643b      	str	r3, [r7, #64]	; 0x40
 8004c06:	4613      	mov	r3, r2
 8004c08:	eb42 0303 	adc.w	r3, r2, r3
 8004c0c:	647b      	str	r3, [r7, #68]	; 0x44
 8004c0e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8004c12:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8004c16:	f7fb ffcf 	bl	8000bb8 <__aeabi_uldivmod>
 8004c1a:	4602      	mov	r2, r0
 8004c1c:	460b      	mov	r3, r1
 8004c1e:	4611      	mov	r1, r2
 8004c20:	4b3b      	ldr	r3, [pc, #236]	; (8004d10 <UART_SetConfig+0x2d4>)
 8004c22:	fba3 2301 	umull	r2, r3, r3, r1
 8004c26:	095b      	lsrs	r3, r3, #5
 8004c28:	2264      	movs	r2, #100	; 0x64
 8004c2a:	fb02 f303 	mul.w	r3, r2, r3
 8004c2e:	1acb      	subs	r3, r1, r3
 8004c30:	00db      	lsls	r3, r3, #3
 8004c32:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8004c36:	4b36      	ldr	r3, [pc, #216]	; (8004d10 <UART_SetConfig+0x2d4>)
 8004c38:	fba3 2302 	umull	r2, r3, r3, r2
 8004c3c:	095b      	lsrs	r3, r3, #5
 8004c3e:	005b      	lsls	r3, r3, #1
 8004c40:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004c44:	441c      	add	r4, r3
 8004c46:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004c4a:	2200      	movs	r2, #0
 8004c4c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004c50:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8004c54:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8004c58:	4642      	mov	r2, r8
 8004c5a:	464b      	mov	r3, r9
 8004c5c:	1891      	adds	r1, r2, r2
 8004c5e:	63b9      	str	r1, [r7, #56]	; 0x38
 8004c60:	415b      	adcs	r3, r3
 8004c62:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004c64:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8004c68:	4641      	mov	r1, r8
 8004c6a:	1851      	adds	r1, r2, r1
 8004c6c:	6339      	str	r1, [r7, #48]	; 0x30
 8004c6e:	4649      	mov	r1, r9
 8004c70:	414b      	adcs	r3, r1
 8004c72:	637b      	str	r3, [r7, #52]	; 0x34
 8004c74:	f04f 0200 	mov.w	r2, #0
 8004c78:	f04f 0300 	mov.w	r3, #0
 8004c7c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8004c80:	4659      	mov	r1, fp
 8004c82:	00cb      	lsls	r3, r1, #3
 8004c84:	4651      	mov	r1, sl
 8004c86:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004c8a:	4651      	mov	r1, sl
 8004c8c:	00ca      	lsls	r2, r1, #3
 8004c8e:	4610      	mov	r0, r2
 8004c90:	4619      	mov	r1, r3
 8004c92:	4603      	mov	r3, r0
 8004c94:	4642      	mov	r2, r8
 8004c96:	189b      	adds	r3, r3, r2
 8004c98:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004c9c:	464b      	mov	r3, r9
 8004c9e:	460a      	mov	r2, r1
 8004ca0:	eb42 0303 	adc.w	r3, r2, r3
 8004ca4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004ca8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004cac:	685b      	ldr	r3, [r3, #4]
 8004cae:	2200      	movs	r2, #0
 8004cb0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8004cb4:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8004cb8:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8004cbc:	460b      	mov	r3, r1
 8004cbe:	18db      	adds	r3, r3, r3
 8004cc0:	62bb      	str	r3, [r7, #40]	; 0x28
 8004cc2:	4613      	mov	r3, r2
 8004cc4:	eb42 0303 	adc.w	r3, r2, r3
 8004cc8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004cca:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004cce:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8004cd2:	f7fb ff71 	bl	8000bb8 <__aeabi_uldivmod>
 8004cd6:	4602      	mov	r2, r0
 8004cd8:	460b      	mov	r3, r1
 8004cda:	4b0d      	ldr	r3, [pc, #52]	; (8004d10 <UART_SetConfig+0x2d4>)
 8004cdc:	fba3 1302 	umull	r1, r3, r3, r2
 8004ce0:	095b      	lsrs	r3, r3, #5
 8004ce2:	2164      	movs	r1, #100	; 0x64
 8004ce4:	fb01 f303 	mul.w	r3, r1, r3
 8004ce8:	1ad3      	subs	r3, r2, r3
 8004cea:	00db      	lsls	r3, r3, #3
 8004cec:	3332      	adds	r3, #50	; 0x32
 8004cee:	4a08      	ldr	r2, [pc, #32]	; (8004d10 <UART_SetConfig+0x2d4>)
 8004cf0:	fba2 2303 	umull	r2, r3, r2, r3
 8004cf4:	095b      	lsrs	r3, r3, #5
 8004cf6:	f003 0207 	and.w	r2, r3, #7
 8004cfa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	4422      	add	r2, r4
 8004d02:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004d04:	e105      	b.n	8004f12 <UART_SetConfig+0x4d6>
 8004d06:	bf00      	nop
 8004d08:	40011000 	.word	0x40011000
 8004d0c:	40011400 	.word	0x40011400
 8004d10:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004d14:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004d18:	2200      	movs	r2, #0
 8004d1a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8004d1e:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8004d22:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8004d26:	4642      	mov	r2, r8
 8004d28:	464b      	mov	r3, r9
 8004d2a:	1891      	adds	r1, r2, r2
 8004d2c:	6239      	str	r1, [r7, #32]
 8004d2e:	415b      	adcs	r3, r3
 8004d30:	627b      	str	r3, [r7, #36]	; 0x24
 8004d32:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004d36:	4641      	mov	r1, r8
 8004d38:	1854      	adds	r4, r2, r1
 8004d3a:	4649      	mov	r1, r9
 8004d3c:	eb43 0501 	adc.w	r5, r3, r1
 8004d40:	f04f 0200 	mov.w	r2, #0
 8004d44:	f04f 0300 	mov.w	r3, #0
 8004d48:	00eb      	lsls	r3, r5, #3
 8004d4a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004d4e:	00e2      	lsls	r2, r4, #3
 8004d50:	4614      	mov	r4, r2
 8004d52:	461d      	mov	r5, r3
 8004d54:	4643      	mov	r3, r8
 8004d56:	18e3      	adds	r3, r4, r3
 8004d58:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8004d5c:	464b      	mov	r3, r9
 8004d5e:	eb45 0303 	adc.w	r3, r5, r3
 8004d62:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8004d66:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004d6a:	685b      	ldr	r3, [r3, #4]
 8004d6c:	2200      	movs	r2, #0
 8004d6e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8004d72:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8004d76:	f04f 0200 	mov.w	r2, #0
 8004d7a:	f04f 0300 	mov.w	r3, #0
 8004d7e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8004d82:	4629      	mov	r1, r5
 8004d84:	008b      	lsls	r3, r1, #2
 8004d86:	4621      	mov	r1, r4
 8004d88:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004d8c:	4621      	mov	r1, r4
 8004d8e:	008a      	lsls	r2, r1, #2
 8004d90:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8004d94:	f7fb ff10 	bl	8000bb8 <__aeabi_uldivmod>
 8004d98:	4602      	mov	r2, r0
 8004d9a:	460b      	mov	r3, r1
 8004d9c:	4b60      	ldr	r3, [pc, #384]	; (8004f20 <UART_SetConfig+0x4e4>)
 8004d9e:	fba3 2302 	umull	r2, r3, r3, r2
 8004da2:	095b      	lsrs	r3, r3, #5
 8004da4:	011c      	lsls	r4, r3, #4
 8004da6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004daa:	2200      	movs	r2, #0
 8004dac:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004db0:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8004db4:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8004db8:	4642      	mov	r2, r8
 8004dba:	464b      	mov	r3, r9
 8004dbc:	1891      	adds	r1, r2, r2
 8004dbe:	61b9      	str	r1, [r7, #24]
 8004dc0:	415b      	adcs	r3, r3
 8004dc2:	61fb      	str	r3, [r7, #28]
 8004dc4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004dc8:	4641      	mov	r1, r8
 8004dca:	1851      	adds	r1, r2, r1
 8004dcc:	6139      	str	r1, [r7, #16]
 8004dce:	4649      	mov	r1, r9
 8004dd0:	414b      	adcs	r3, r1
 8004dd2:	617b      	str	r3, [r7, #20]
 8004dd4:	f04f 0200 	mov.w	r2, #0
 8004dd8:	f04f 0300 	mov.w	r3, #0
 8004ddc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004de0:	4659      	mov	r1, fp
 8004de2:	00cb      	lsls	r3, r1, #3
 8004de4:	4651      	mov	r1, sl
 8004de6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004dea:	4651      	mov	r1, sl
 8004dec:	00ca      	lsls	r2, r1, #3
 8004dee:	4610      	mov	r0, r2
 8004df0:	4619      	mov	r1, r3
 8004df2:	4603      	mov	r3, r0
 8004df4:	4642      	mov	r2, r8
 8004df6:	189b      	adds	r3, r3, r2
 8004df8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004dfc:	464b      	mov	r3, r9
 8004dfe:	460a      	mov	r2, r1
 8004e00:	eb42 0303 	adc.w	r3, r2, r3
 8004e04:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004e08:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004e0c:	685b      	ldr	r3, [r3, #4]
 8004e0e:	2200      	movs	r2, #0
 8004e10:	67bb      	str	r3, [r7, #120]	; 0x78
 8004e12:	67fa      	str	r2, [r7, #124]	; 0x7c
 8004e14:	f04f 0200 	mov.w	r2, #0
 8004e18:	f04f 0300 	mov.w	r3, #0
 8004e1c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8004e20:	4649      	mov	r1, r9
 8004e22:	008b      	lsls	r3, r1, #2
 8004e24:	4641      	mov	r1, r8
 8004e26:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004e2a:	4641      	mov	r1, r8
 8004e2c:	008a      	lsls	r2, r1, #2
 8004e2e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8004e32:	f7fb fec1 	bl	8000bb8 <__aeabi_uldivmod>
 8004e36:	4602      	mov	r2, r0
 8004e38:	460b      	mov	r3, r1
 8004e3a:	4b39      	ldr	r3, [pc, #228]	; (8004f20 <UART_SetConfig+0x4e4>)
 8004e3c:	fba3 1302 	umull	r1, r3, r3, r2
 8004e40:	095b      	lsrs	r3, r3, #5
 8004e42:	2164      	movs	r1, #100	; 0x64
 8004e44:	fb01 f303 	mul.w	r3, r1, r3
 8004e48:	1ad3      	subs	r3, r2, r3
 8004e4a:	011b      	lsls	r3, r3, #4
 8004e4c:	3332      	adds	r3, #50	; 0x32
 8004e4e:	4a34      	ldr	r2, [pc, #208]	; (8004f20 <UART_SetConfig+0x4e4>)
 8004e50:	fba2 2303 	umull	r2, r3, r2, r3
 8004e54:	095b      	lsrs	r3, r3, #5
 8004e56:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004e5a:	441c      	add	r4, r3
 8004e5c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004e60:	2200      	movs	r2, #0
 8004e62:	673b      	str	r3, [r7, #112]	; 0x70
 8004e64:	677a      	str	r2, [r7, #116]	; 0x74
 8004e66:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8004e6a:	4642      	mov	r2, r8
 8004e6c:	464b      	mov	r3, r9
 8004e6e:	1891      	adds	r1, r2, r2
 8004e70:	60b9      	str	r1, [r7, #8]
 8004e72:	415b      	adcs	r3, r3
 8004e74:	60fb      	str	r3, [r7, #12]
 8004e76:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004e7a:	4641      	mov	r1, r8
 8004e7c:	1851      	adds	r1, r2, r1
 8004e7e:	6039      	str	r1, [r7, #0]
 8004e80:	4649      	mov	r1, r9
 8004e82:	414b      	adcs	r3, r1
 8004e84:	607b      	str	r3, [r7, #4]
 8004e86:	f04f 0200 	mov.w	r2, #0
 8004e8a:	f04f 0300 	mov.w	r3, #0
 8004e8e:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004e92:	4659      	mov	r1, fp
 8004e94:	00cb      	lsls	r3, r1, #3
 8004e96:	4651      	mov	r1, sl
 8004e98:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004e9c:	4651      	mov	r1, sl
 8004e9e:	00ca      	lsls	r2, r1, #3
 8004ea0:	4610      	mov	r0, r2
 8004ea2:	4619      	mov	r1, r3
 8004ea4:	4603      	mov	r3, r0
 8004ea6:	4642      	mov	r2, r8
 8004ea8:	189b      	adds	r3, r3, r2
 8004eaa:	66bb      	str	r3, [r7, #104]	; 0x68
 8004eac:	464b      	mov	r3, r9
 8004eae:	460a      	mov	r2, r1
 8004eb0:	eb42 0303 	adc.w	r3, r2, r3
 8004eb4:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004eb6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004eba:	685b      	ldr	r3, [r3, #4]
 8004ebc:	2200      	movs	r2, #0
 8004ebe:	663b      	str	r3, [r7, #96]	; 0x60
 8004ec0:	667a      	str	r2, [r7, #100]	; 0x64
 8004ec2:	f04f 0200 	mov.w	r2, #0
 8004ec6:	f04f 0300 	mov.w	r3, #0
 8004eca:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8004ece:	4649      	mov	r1, r9
 8004ed0:	008b      	lsls	r3, r1, #2
 8004ed2:	4641      	mov	r1, r8
 8004ed4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004ed8:	4641      	mov	r1, r8
 8004eda:	008a      	lsls	r2, r1, #2
 8004edc:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8004ee0:	f7fb fe6a 	bl	8000bb8 <__aeabi_uldivmod>
 8004ee4:	4602      	mov	r2, r0
 8004ee6:	460b      	mov	r3, r1
 8004ee8:	4b0d      	ldr	r3, [pc, #52]	; (8004f20 <UART_SetConfig+0x4e4>)
 8004eea:	fba3 1302 	umull	r1, r3, r3, r2
 8004eee:	095b      	lsrs	r3, r3, #5
 8004ef0:	2164      	movs	r1, #100	; 0x64
 8004ef2:	fb01 f303 	mul.w	r3, r1, r3
 8004ef6:	1ad3      	subs	r3, r2, r3
 8004ef8:	011b      	lsls	r3, r3, #4
 8004efa:	3332      	adds	r3, #50	; 0x32
 8004efc:	4a08      	ldr	r2, [pc, #32]	; (8004f20 <UART_SetConfig+0x4e4>)
 8004efe:	fba2 2303 	umull	r2, r3, r2, r3
 8004f02:	095b      	lsrs	r3, r3, #5
 8004f04:	f003 020f 	and.w	r2, r3, #15
 8004f08:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	4422      	add	r2, r4
 8004f10:	609a      	str	r2, [r3, #8]
}
 8004f12:	bf00      	nop
 8004f14:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8004f18:	46bd      	mov	sp, r7
 8004f1a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004f1e:	bf00      	nop
 8004f20:	51eb851f 	.word	0x51eb851f

08004f24 <__NVIC_SetPriority>:
{
 8004f24:	b480      	push	{r7}
 8004f26:	b083      	sub	sp, #12
 8004f28:	af00      	add	r7, sp, #0
 8004f2a:	4603      	mov	r3, r0
 8004f2c:	6039      	str	r1, [r7, #0]
 8004f2e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004f30:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004f34:	2b00      	cmp	r3, #0
 8004f36:	db0a      	blt.n	8004f4e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004f38:	683b      	ldr	r3, [r7, #0]
 8004f3a:	b2da      	uxtb	r2, r3
 8004f3c:	490c      	ldr	r1, [pc, #48]	; (8004f70 <__NVIC_SetPriority+0x4c>)
 8004f3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004f42:	0112      	lsls	r2, r2, #4
 8004f44:	b2d2      	uxtb	r2, r2
 8004f46:	440b      	add	r3, r1
 8004f48:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8004f4c:	e00a      	b.n	8004f64 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004f4e:	683b      	ldr	r3, [r7, #0]
 8004f50:	b2da      	uxtb	r2, r3
 8004f52:	4908      	ldr	r1, [pc, #32]	; (8004f74 <__NVIC_SetPriority+0x50>)
 8004f54:	79fb      	ldrb	r3, [r7, #7]
 8004f56:	f003 030f 	and.w	r3, r3, #15
 8004f5a:	3b04      	subs	r3, #4
 8004f5c:	0112      	lsls	r2, r2, #4
 8004f5e:	b2d2      	uxtb	r2, r2
 8004f60:	440b      	add	r3, r1
 8004f62:	761a      	strb	r2, [r3, #24]
}
 8004f64:	bf00      	nop
 8004f66:	370c      	adds	r7, #12
 8004f68:	46bd      	mov	sp, r7
 8004f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f6e:	4770      	bx	lr
 8004f70:	e000e100 	.word	0xe000e100
 8004f74:	e000ed00 	.word	0xe000ed00

08004f78 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8004f78:	b580      	push	{r7, lr}
 8004f7a:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8004f7c:	4b05      	ldr	r3, [pc, #20]	; (8004f94 <SysTick_Handler+0x1c>)
 8004f7e:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8004f80:	f002 fc54 	bl	800782c <xTaskGetSchedulerState>
 8004f84:	4603      	mov	r3, r0
 8004f86:	2b01      	cmp	r3, #1
 8004f88:	d001      	beq.n	8004f8e <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8004f8a:	f003 fb75 	bl	8008678 <xPortSysTickHandler>
  }
}
 8004f8e:	bf00      	nop
 8004f90:	bd80      	pop	{r7, pc}
 8004f92:	bf00      	nop
 8004f94:	e000e010 	.word	0xe000e010

08004f98 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8004f98:	b580      	push	{r7, lr}
 8004f9a:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8004f9c:	2100      	movs	r1, #0
 8004f9e:	f06f 0004 	mvn.w	r0, #4
 8004fa2:	f7ff ffbf 	bl	8004f24 <__NVIC_SetPriority>
#endif
}
 8004fa6:	bf00      	nop
 8004fa8:	bd80      	pop	{r7, pc}
	...

08004fac <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8004fac:	b480      	push	{r7}
 8004fae:	b083      	sub	sp, #12
 8004fb0:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004fb2:	f3ef 8305 	mrs	r3, IPSR
 8004fb6:	603b      	str	r3, [r7, #0]
  return(result);
 8004fb8:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004fba:	2b00      	cmp	r3, #0
 8004fbc:	d003      	beq.n	8004fc6 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8004fbe:	f06f 0305 	mvn.w	r3, #5
 8004fc2:	607b      	str	r3, [r7, #4]
 8004fc4:	e00c      	b.n	8004fe0 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8004fc6:	4b0a      	ldr	r3, [pc, #40]	; (8004ff0 <osKernelInitialize+0x44>)
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	2b00      	cmp	r3, #0
 8004fcc:	d105      	bne.n	8004fda <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8004fce:	4b08      	ldr	r3, [pc, #32]	; (8004ff0 <osKernelInitialize+0x44>)
 8004fd0:	2201      	movs	r2, #1
 8004fd2:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8004fd4:	2300      	movs	r3, #0
 8004fd6:	607b      	str	r3, [r7, #4]
 8004fd8:	e002      	b.n	8004fe0 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8004fda:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004fde:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8004fe0:	687b      	ldr	r3, [r7, #4]
}
 8004fe2:	4618      	mov	r0, r3
 8004fe4:	370c      	adds	r7, #12
 8004fe6:	46bd      	mov	sp, r7
 8004fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fec:	4770      	bx	lr
 8004fee:	bf00      	nop
 8004ff0:	200001f0 	.word	0x200001f0

08004ff4 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8004ff4:	b580      	push	{r7, lr}
 8004ff6:	b082      	sub	sp, #8
 8004ff8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004ffa:	f3ef 8305 	mrs	r3, IPSR
 8004ffe:	603b      	str	r3, [r7, #0]
  return(result);
 8005000:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8005002:	2b00      	cmp	r3, #0
 8005004:	d003      	beq.n	800500e <osKernelStart+0x1a>
    stat = osErrorISR;
 8005006:	f06f 0305 	mvn.w	r3, #5
 800500a:	607b      	str	r3, [r7, #4]
 800500c:	e010      	b.n	8005030 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800500e:	4b0b      	ldr	r3, [pc, #44]	; (800503c <osKernelStart+0x48>)
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	2b01      	cmp	r3, #1
 8005014:	d109      	bne.n	800502a <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8005016:	f7ff ffbf 	bl	8004f98 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800501a:	4b08      	ldr	r3, [pc, #32]	; (800503c <osKernelStart+0x48>)
 800501c:	2202      	movs	r2, #2
 800501e:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8005020:	f001 ff0e 	bl	8006e40 <vTaskStartScheduler>
      stat = osOK;
 8005024:	2300      	movs	r3, #0
 8005026:	607b      	str	r3, [r7, #4]
 8005028:	e002      	b.n	8005030 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800502a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800502e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8005030:	687b      	ldr	r3, [r7, #4]
}
 8005032:	4618      	mov	r0, r3
 8005034:	3708      	adds	r7, #8
 8005036:	46bd      	mov	sp, r7
 8005038:	bd80      	pop	{r7, pc}
 800503a:	bf00      	nop
 800503c:	200001f0 	.word	0x200001f0

08005040 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8005040:	b580      	push	{r7, lr}
 8005042:	b08e      	sub	sp, #56	; 0x38
 8005044:	af04      	add	r7, sp, #16
 8005046:	60f8      	str	r0, [r7, #12]
 8005048:	60b9      	str	r1, [r7, #8]
 800504a:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800504c:	2300      	movs	r3, #0
 800504e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005050:	f3ef 8305 	mrs	r3, IPSR
 8005054:	617b      	str	r3, [r7, #20]
  return(result);
 8005056:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8005058:	2b00      	cmp	r3, #0
 800505a:	d17e      	bne.n	800515a <osThreadNew+0x11a>
 800505c:	68fb      	ldr	r3, [r7, #12]
 800505e:	2b00      	cmp	r3, #0
 8005060:	d07b      	beq.n	800515a <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8005062:	2380      	movs	r3, #128	; 0x80
 8005064:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8005066:	2318      	movs	r3, #24
 8005068:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800506a:	2300      	movs	r3, #0
 800506c:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 800506e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005072:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	2b00      	cmp	r3, #0
 8005078:	d045      	beq.n	8005106 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	2b00      	cmp	r3, #0
 8005080:	d002      	beq.n	8005088 <osThreadNew+0x48>
        name = attr->name;
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	699b      	ldr	r3, [r3, #24]
 800508c:	2b00      	cmp	r3, #0
 800508e:	d002      	beq.n	8005096 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	699b      	ldr	r3, [r3, #24]
 8005094:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8005096:	69fb      	ldr	r3, [r7, #28]
 8005098:	2b00      	cmp	r3, #0
 800509a:	d008      	beq.n	80050ae <osThreadNew+0x6e>
 800509c:	69fb      	ldr	r3, [r7, #28]
 800509e:	2b38      	cmp	r3, #56	; 0x38
 80050a0:	d805      	bhi.n	80050ae <osThreadNew+0x6e>
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	685b      	ldr	r3, [r3, #4]
 80050a6:	f003 0301 	and.w	r3, r3, #1
 80050aa:	2b00      	cmp	r3, #0
 80050ac:	d001      	beq.n	80050b2 <osThreadNew+0x72>
        return (NULL);
 80050ae:	2300      	movs	r3, #0
 80050b0:	e054      	b.n	800515c <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	695b      	ldr	r3, [r3, #20]
 80050b6:	2b00      	cmp	r3, #0
 80050b8:	d003      	beq.n	80050c2 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	695b      	ldr	r3, [r3, #20]
 80050be:	089b      	lsrs	r3, r3, #2
 80050c0:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	689b      	ldr	r3, [r3, #8]
 80050c6:	2b00      	cmp	r3, #0
 80050c8:	d00e      	beq.n	80050e8 <osThreadNew+0xa8>
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	68db      	ldr	r3, [r3, #12]
 80050ce:	2b5b      	cmp	r3, #91	; 0x5b
 80050d0:	d90a      	bls.n	80050e8 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80050d6:	2b00      	cmp	r3, #0
 80050d8:	d006      	beq.n	80050e8 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	695b      	ldr	r3, [r3, #20]
 80050de:	2b00      	cmp	r3, #0
 80050e0:	d002      	beq.n	80050e8 <osThreadNew+0xa8>
        mem = 1;
 80050e2:	2301      	movs	r3, #1
 80050e4:	61bb      	str	r3, [r7, #24]
 80050e6:	e010      	b.n	800510a <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	689b      	ldr	r3, [r3, #8]
 80050ec:	2b00      	cmp	r3, #0
 80050ee:	d10c      	bne.n	800510a <osThreadNew+0xca>
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	68db      	ldr	r3, [r3, #12]
 80050f4:	2b00      	cmp	r3, #0
 80050f6:	d108      	bne.n	800510a <osThreadNew+0xca>
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	691b      	ldr	r3, [r3, #16]
 80050fc:	2b00      	cmp	r3, #0
 80050fe:	d104      	bne.n	800510a <osThreadNew+0xca>
          mem = 0;
 8005100:	2300      	movs	r3, #0
 8005102:	61bb      	str	r3, [r7, #24]
 8005104:	e001      	b.n	800510a <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8005106:	2300      	movs	r3, #0
 8005108:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800510a:	69bb      	ldr	r3, [r7, #24]
 800510c:	2b01      	cmp	r3, #1
 800510e:	d110      	bne.n	8005132 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8005114:	687a      	ldr	r2, [r7, #4]
 8005116:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8005118:	9202      	str	r2, [sp, #8]
 800511a:	9301      	str	r3, [sp, #4]
 800511c:	69fb      	ldr	r3, [r7, #28]
 800511e:	9300      	str	r3, [sp, #0]
 8005120:	68bb      	ldr	r3, [r7, #8]
 8005122:	6a3a      	ldr	r2, [r7, #32]
 8005124:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005126:	68f8      	ldr	r0, [r7, #12]
 8005128:	f001 fcb4 	bl	8006a94 <xTaskCreateStatic>
 800512c:	4603      	mov	r3, r0
 800512e:	613b      	str	r3, [r7, #16]
 8005130:	e013      	b.n	800515a <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8005132:	69bb      	ldr	r3, [r7, #24]
 8005134:	2b00      	cmp	r3, #0
 8005136:	d110      	bne.n	800515a <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8005138:	6a3b      	ldr	r3, [r7, #32]
 800513a:	b29a      	uxth	r2, r3
 800513c:	f107 0310 	add.w	r3, r7, #16
 8005140:	9301      	str	r3, [sp, #4]
 8005142:	69fb      	ldr	r3, [r7, #28]
 8005144:	9300      	str	r3, [sp, #0]
 8005146:	68bb      	ldr	r3, [r7, #8]
 8005148:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800514a:	68f8      	ldr	r0, [r7, #12]
 800514c:	f001 fcff 	bl	8006b4e <xTaskCreate>
 8005150:	4603      	mov	r3, r0
 8005152:	2b01      	cmp	r3, #1
 8005154:	d001      	beq.n	800515a <osThreadNew+0x11a>
            hTask = NULL;
 8005156:	2300      	movs	r3, #0
 8005158:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800515a:	693b      	ldr	r3, [r7, #16]
}
 800515c:	4618      	mov	r0, r3
 800515e:	3728      	adds	r7, #40	; 0x28
 8005160:	46bd      	mov	sp, r7
 8005162:	bd80      	pop	{r7, pc}

08005164 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8005164:	b580      	push	{r7, lr}
 8005166:	b084      	sub	sp, #16
 8005168:	af00      	add	r7, sp, #0
 800516a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800516c:	f3ef 8305 	mrs	r3, IPSR
 8005170:	60bb      	str	r3, [r7, #8]
  return(result);
 8005172:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8005174:	2b00      	cmp	r3, #0
 8005176:	d003      	beq.n	8005180 <osDelay+0x1c>
    stat = osErrorISR;
 8005178:	f06f 0305 	mvn.w	r3, #5
 800517c:	60fb      	str	r3, [r7, #12]
 800517e:	e007      	b.n	8005190 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8005180:	2300      	movs	r3, #0
 8005182:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	2b00      	cmp	r3, #0
 8005188:	d002      	beq.n	8005190 <osDelay+0x2c>
      vTaskDelay(ticks);
 800518a:	6878      	ldr	r0, [r7, #4]
 800518c:	f001 fe24 	bl	8006dd8 <vTaskDelay>
    }
  }

  return (stat);
 8005190:	68fb      	ldr	r3, [r7, #12]
}
 8005192:	4618      	mov	r0, r3
 8005194:	3710      	adds	r7, #16
 8005196:	46bd      	mov	sp, r7
 8005198:	bd80      	pop	{r7, pc}

0800519a <osEventFlagsNew>:
}
#endif /* (configUSE_OS2_TIMER == 1) */

/*---------------------------------------------------------------------------*/

osEventFlagsId_t osEventFlagsNew (const osEventFlagsAttr_t *attr) {
 800519a:	b580      	push	{r7, lr}
 800519c:	b086      	sub	sp, #24
 800519e:	af00      	add	r7, sp, #0
 80051a0:	6078      	str	r0, [r7, #4]
  EventGroupHandle_t hEventGroup;
  int32_t mem;

  hEventGroup = NULL;
 80051a2:	2300      	movs	r3, #0
 80051a4:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80051a6:	f3ef 8305 	mrs	r3, IPSR
 80051aa:	60fb      	str	r3, [r7, #12]
  return(result);
 80051ac:	68fb      	ldr	r3, [r7, #12]

  if (!IS_IRQ()) {
 80051ae:	2b00      	cmp	r3, #0
 80051b0:	d12d      	bne.n	800520e <osEventFlagsNew+0x74>
    mem = -1;
 80051b2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80051b6:	613b      	str	r3, [r7, #16]

    if (attr != NULL) {
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	2b00      	cmp	r3, #0
 80051bc:	d015      	beq.n	80051ea <osEventFlagsNew+0x50>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticEventGroup_t))) {
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	689b      	ldr	r3, [r3, #8]
 80051c2:	2b00      	cmp	r3, #0
 80051c4:	d006      	beq.n	80051d4 <osEventFlagsNew+0x3a>
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	68db      	ldr	r3, [r3, #12]
 80051ca:	2b1f      	cmp	r3, #31
 80051cc:	d902      	bls.n	80051d4 <osEventFlagsNew+0x3a>
        mem = 1;
 80051ce:	2301      	movs	r3, #1
 80051d0:	613b      	str	r3, [r7, #16]
 80051d2:	e00c      	b.n	80051ee <osEventFlagsNew+0x54>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	689b      	ldr	r3, [r3, #8]
 80051d8:	2b00      	cmp	r3, #0
 80051da:	d108      	bne.n	80051ee <osEventFlagsNew+0x54>
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	68db      	ldr	r3, [r3, #12]
 80051e0:	2b00      	cmp	r3, #0
 80051e2:	d104      	bne.n	80051ee <osEventFlagsNew+0x54>
          mem = 0;
 80051e4:	2300      	movs	r3, #0
 80051e6:	613b      	str	r3, [r7, #16]
 80051e8:	e001      	b.n	80051ee <osEventFlagsNew+0x54>
        }
      }
    }
    else {
      mem = 0;
 80051ea:	2300      	movs	r3, #0
 80051ec:	613b      	str	r3, [r7, #16]
    }

    if (mem == 1) {
 80051ee:	693b      	ldr	r3, [r7, #16]
 80051f0:	2b01      	cmp	r3, #1
 80051f2:	d106      	bne.n	8005202 <osEventFlagsNew+0x68>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
      hEventGroup = xEventGroupCreateStatic (attr->cb_mem);
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	689b      	ldr	r3, [r3, #8]
 80051f8:	4618      	mov	r0, r3
 80051fa:	f000 fa2b 	bl	8005654 <xEventGroupCreateStatic>
 80051fe:	6178      	str	r0, [r7, #20]
 8005200:	e005      	b.n	800520e <osEventFlagsNew+0x74>
      #endif
    }
    else {
      if (mem == 0) {
 8005202:	693b      	ldr	r3, [r7, #16]
 8005204:	2b00      	cmp	r3, #0
 8005206:	d102      	bne.n	800520e <osEventFlagsNew+0x74>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hEventGroup = xEventGroupCreate();
 8005208:	f000 fa5b 	bl	80056c2 <xEventGroupCreate>
 800520c:	6178      	str	r0, [r7, #20]
        #endif
      }
    }
  }

  return ((osEventFlagsId_t)hEventGroup);
 800520e:	697b      	ldr	r3, [r7, #20]
}
 8005210:	4618      	mov	r0, r3
 8005212:	3718      	adds	r7, #24
 8005214:	46bd      	mov	sp, r7
 8005216:	bd80      	pop	{r7, pc}

08005218 <osEventFlagsSet>:

uint32_t osEventFlagsSet (osEventFlagsId_t ef_id, uint32_t flags) {
 8005218:	b580      	push	{r7, lr}
 800521a:	b086      	sub	sp, #24
 800521c:	af00      	add	r7, sp, #0
 800521e:	6078      	str	r0, [r7, #4]
 8005220:	6039      	str	r1, [r7, #0]
  EventGroupHandle_t hEventGroup = (EventGroupHandle_t)ef_id;
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	613b      	str	r3, [r7, #16]
  uint32_t rflags;
  BaseType_t yield;

  if ((hEventGroup == NULL) || ((flags & EVENT_FLAGS_INVALID_BITS) != 0U)) {
 8005226:	693b      	ldr	r3, [r7, #16]
 8005228:	2b00      	cmp	r3, #0
 800522a:	d004      	beq.n	8005236 <osEventFlagsSet+0x1e>
 800522c:	683b      	ldr	r3, [r7, #0]
 800522e:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8005232:	2b00      	cmp	r3, #0
 8005234:	d003      	beq.n	800523e <osEventFlagsSet+0x26>
    rflags = (uint32_t)osErrorParameter;
 8005236:	f06f 0303 	mvn.w	r3, #3
 800523a:	617b      	str	r3, [r7, #20]
 800523c:	e028      	b.n	8005290 <osEventFlagsSet+0x78>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800523e:	f3ef 8305 	mrs	r3, IPSR
 8005242:	60fb      	str	r3, [r7, #12]
  return(result);
 8005244:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 8005246:	2b00      	cmp	r3, #0
 8005248:	d01d      	beq.n	8005286 <osEventFlagsSet+0x6e>
  #if (configUSE_OS2_EVENTFLAGS_FROM_ISR == 0)
    (void)yield;
    /* Enable timers and xTimerPendFunctionCall function to support osEventFlagsSet from ISR */
    rflags = (uint32_t)osErrorResource;
  #else
    yield = pdFALSE;
 800524a:	2300      	movs	r3, #0
 800524c:	60bb      	str	r3, [r7, #8]

    if (xEventGroupSetBitsFromISR (hEventGroup, (EventBits_t)flags, &yield) == pdFAIL) {
 800524e:	f107 0308 	add.w	r3, r7, #8
 8005252:	461a      	mov	r2, r3
 8005254:	6839      	ldr	r1, [r7, #0]
 8005256:	6938      	ldr	r0, [r7, #16]
 8005258:	f000 fc54 	bl	8005b04 <xEventGroupSetBitsFromISR>
 800525c:	4603      	mov	r3, r0
 800525e:	2b00      	cmp	r3, #0
 8005260:	d103      	bne.n	800526a <osEventFlagsSet+0x52>
      rflags = (uint32_t)osErrorResource;
 8005262:	f06f 0302 	mvn.w	r3, #2
 8005266:	617b      	str	r3, [r7, #20]
 8005268:	e012      	b.n	8005290 <osEventFlagsSet+0x78>
    } else {
      rflags = flags;
 800526a:	683b      	ldr	r3, [r7, #0]
 800526c:	617b      	str	r3, [r7, #20]
      portYIELD_FROM_ISR (yield);
 800526e:	68bb      	ldr	r3, [r7, #8]
 8005270:	2b00      	cmp	r3, #0
 8005272:	d00d      	beq.n	8005290 <osEventFlagsSet+0x78>
 8005274:	4b09      	ldr	r3, [pc, #36]	; (800529c <osEventFlagsSet+0x84>)
 8005276:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800527a:	601a      	str	r2, [r3, #0]
 800527c:	f3bf 8f4f 	dsb	sy
 8005280:	f3bf 8f6f 	isb	sy
 8005284:	e004      	b.n	8005290 <osEventFlagsSet+0x78>
    }
  #endif
  }
  else {
    rflags = xEventGroupSetBits (hEventGroup, (EventBits_t)flags);
 8005286:	6839      	ldr	r1, [r7, #0]
 8005288:	6938      	ldr	r0, [r7, #16]
 800528a:	f000 fb73 	bl	8005974 <xEventGroupSetBits>
 800528e:	6178      	str	r0, [r7, #20]
  }

  return (rflags);
 8005290:	697b      	ldr	r3, [r7, #20]
}
 8005292:	4618      	mov	r0, r3
 8005294:	3718      	adds	r7, #24
 8005296:	46bd      	mov	sp, r7
 8005298:	bd80      	pop	{r7, pc}
 800529a:	bf00      	nop
 800529c:	e000ed04 	.word	0xe000ed04

080052a0 <osEventFlagsClear>:

uint32_t osEventFlagsClear (osEventFlagsId_t ef_id, uint32_t flags) {
 80052a0:	b580      	push	{r7, lr}
 80052a2:	b086      	sub	sp, #24
 80052a4:	af00      	add	r7, sp, #0
 80052a6:	6078      	str	r0, [r7, #4]
 80052a8:	6039      	str	r1, [r7, #0]
  EventGroupHandle_t hEventGroup = (EventGroupHandle_t)ef_id;
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	613b      	str	r3, [r7, #16]
  uint32_t rflags;

  if ((hEventGroup == NULL) || ((flags & EVENT_FLAGS_INVALID_BITS) != 0U)) {
 80052ae:	693b      	ldr	r3, [r7, #16]
 80052b0:	2b00      	cmp	r3, #0
 80052b2:	d004      	beq.n	80052be <osEventFlagsClear+0x1e>
 80052b4:	683b      	ldr	r3, [r7, #0]
 80052b6:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 80052ba:	2b00      	cmp	r3, #0
 80052bc:	d003      	beq.n	80052c6 <osEventFlagsClear+0x26>
    rflags = (uint32_t)osErrorParameter;
 80052be:	f06f 0303 	mvn.w	r3, #3
 80052c2:	617b      	str	r3, [r7, #20]
 80052c4:	e019      	b.n	80052fa <osEventFlagsClear+0x5a>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80052c6:	f3ef 8305 	mrs	r3, IPSR
 80052ca:	60fb      	str	r3, [r7, #12]
  return(result);
 80052cc:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 80052ce:	2b00      	cmp	r3, #0
 80052d0:	d00e      	beq.n	80052f0 <osEventFlagsClear+0x50>
  #if (configUSE_OS2_EVENTFLAGS_FROM_ISR == 0)
    /* Enable timers and xTimerPendFunctionCall function to support osEventFlagsSet from ISR */
    rflags = (uint32_t)osErrorResource;
  #else
    rflags = xEventGroupGetBitsFromISR (hEventGroup);
 80052d2:	6938      	ldr	r0, [r7, #16]
 80052d4:	f000 fb2a 	bl	800592c <xEventGroupGetBitsFromISR>
 80052d8:	6178      	str	r0, [r7, #20]

    if (xEventGroupClearBitsFromISR (hEventGroup, (EventBits_t)flags) == pdFAIL) {
 80052da:	6839      	ldr	r1, [r7, #0]
 80052dc:	6938      	ldr	r0, [r7, #16]
 80052de:	f000 fb11 	bl	8005904 <xEventGroupClearBitsFromISR>
 80052e2:	4603      	mov	r3, r0
 80052e4:	2b00      	cmp	r3, #0
 80052e6:	d108      	bne.n	80052fa <osEventFlagsClear+0x5a>
      rflags = (uint32_t)osErrorResource;
 80052e8:	f06f 0302 	mvn.w	r3, #2
 80052ec:	617b      	str	r3, [r7, #20]
 80052ee:	e004      	b.n	80052fa <osEventFlagsClear+0x5a>
    }
  #endif
  }
  else {
    rflags = xEventGroupClearBits (hEventGroup, (EventBits_t)flags);
 80052f0:	6839      	ldr	r1, [r7, #0]
 80052f2:	6938      	ldr	r0, [r7, #16]
 80052f4:	f000 face 	bl	8005894 <xEventGroupClearBits>
 80052f8:	6178      	str	r0, [r7, #20]
  }

  return (rflags);
 80052fa:	697b      	ldr	r3, [r7, #20]
}
 80052fc:	4618      	mov	r0, r3
 80052fe:	3718      	adds	r7, #24
 8005300:	46bd      	mov	sp, r7
 8005302:	bd80      	pop	{r7, pc}

08005304 <osEventFlagsWait>:
  }

  return (rflags);
}

uint32_t osEventFlagsWait (osEventFlagsId_t ef_id, uint32_t flags, uint32_t options, uint32_t timeout) {
 8005304:	b580      	push	{r7, lr}
 8005306:	b08c      	sub	sp, #48	; 0x30
 8005308:	af02      	add	r7, sp, #8
 800530a:	60f8      	str	r0, [r7, #12]
 800530c:	60b9      	str	r1, [r7, #8]
 800530e:	607a      	str	r2, [r7, #4]
 8005310:	603b      	str	r3, [r7, #0]
  EventGroupHandle_t hEventGroup = (EventGroupHandle_t)ef_id;
 8005312:	68fb      	ldr	r3, [r7, #12]
 8005314:	61bb      	str	r3, [r7, #24]
  BaseType_t wait_all;
  BaseType_t exit_clr;
  uint32_t rflags;

  if ((hEventGroup == NULL) || ((flags & EVENT_FLAGS_INVALID_BITS) != 0U)) {
 8005316:	69bb      	ldr	r3, [r7, #24]
 8005318:	2b00      	cmp	r3, #0
 800531a:	d004      	beq.n	8005326 <osEventFlagsWait+0x22>
 800531c:	68bb      	ldr	r3, [r7, #8]
 800531e:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8005322:	2b00      	cmp	r3, #0
 8005324:	d003      	beq.n	800532e <osEventFlagsWait+0x2a>
    rflags = (uint32_t)osErrorParameter;
 8005326:	f06f 0303 	mvn.w	r3, #3
 800532a:	61fb      	str	r3, [r7, #28]
 800532c:	e04b      	b.n	80053c6 <osEventFlagsWait+0xc2>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800532e:	f3ef 8305 	mrs	r3, IPSR
 8005332:	617b      	str	r3, [r7, #20]
  return(result);
 8005334:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 8005336:	2b00      	cmp	r3, #0
 8005338:	d003      	beq.n	8005342 <osEventFlagsWait+0x3e>
    rflags = (uint32_t)osErrorISR;
 800533a:	f06f 0305 	mvn.w	r3, #5
 800533e:	61fb      	str	r3, [r7, #28]
 8005340:	e041      	b.n	80053c6 <osEventFlagsWait+0xc2>
  }
  else {
    if (options & osFlagsWaitAll) {
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	f003 0301 	and.w	r3, r3, #1
 8005348:	2b00      	cmp	r3, #0
 800534a:	d002      	beq.n	8005352 <osEventFlagsWait+0x4e>
      wait_all = pdTRUE;
 800534c:	2301      	movs	r3, #1
 800534e:	627b      	str	r3, [r7, #36]	; 0x24
 8005350:	e001      	b.n	8005356 <osEventFlagsWait+0x52>
    } else {
      wait_all = pdFAIL;
 8005352:	2300      	movs	r3, #0
 8005354:	627b      	str	r3, [r7, #36]	; 0x24
    }

    if (options & osFlagsNoClear) {
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	f003 0302 	and.w	r3, r3, #2
 800535c:	2b00      	cmp	r3, #0
 800535e:	d002      	beq.n	8005366 <osEventFlagsWait+0x62>
      exit_clr = pdFAIL;
 8005360:	2300      	movs	r3, #0
 8005362:	623b      	str	r3, [r7, #32]
 8005364:	e001      	b.n	800536a <osEventFlagsWait+0x66>
    } else {
      exit_clr = pdTRUE;
 8005366:	2301      	movs	r3, #1
 8005368:	623b      	str	r3, [r7, #32]
    }

    rflags = xEventGroupWaitBits (hEventGroup, (EventBits_t)flags, exit_clr, wait_all, (TickType_t)timeout);
 800536a:	683b      	ldr	r3, [r7, #0]
 800536c:	9300      	str	r3, [sp, #0]
 800536e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005370:	6a3a      	ldr	r2, [r7, #32]
 8005372:	68b9      	ldr	r1, [r7, #8]
 8005374:	69b8      	ldr	r0, [r7, #24]
 8005376:	f000 f9bf 	bl	80056f8 <xEventGroupWaitBits>
 800537a:	61f8      	str	r0, [r7, #28]

    if (options & osFlagsWaitAll) {
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	f003 0301 	and.w	r3, r3, #1
 8005382:	2b00      	cmp	r3, #0
 8005384:	d010      	beq.n	80053a8 <osEventFlagsWait+0xa4>
      if ((flags & rflags) != flags) {
 8005386:	68ba      	ldr	r2, [r7, #8]
 8005388:	69fb      	ldr	r3, [r7, #28]
 800538a:	4013      	ands	r3, r2
 800538c:	68ba      	ldr	r2, [r7, #8]
 800538e:	429a      	cmp	r2, r3
 8005390:	d019      	beq.n	80053c6 <osEventFlagsWait+0xc2>
        if (timeout > 0U) {
 8005392:	683b      	ldr	r3, [r7, #0]
 8005394:	2b00      	cmp	r3, #0
 8005396:	d003      	beq.n	80053a0 <osEventFlagsWait+0x9c>
          rflags = (uint32_t)osErrorTimeout;
 8005398:	f06f 0301 	mvn.w	r3, #1
 800539c:	61fb      	str	r3, [r7, #28]
 800539e:	e012      	b.n	80053c6 <osEventFlagsWait+0xc2>
        } else {
          rflags = (uint32_t)osErrorResource;
 80053a0:	f06f 0302 	mvn.w	r3, #2
 80053a4:	61fb      	str	r3, [r7, #28]
 80053a6:	e00e      	b.n	80053c6 <osEventFlagsWait+0xc2>
        }
      }
    }
    else {
      if ((flags & rflags) == 0U) {
 80053a8:	68ba      	ldr	r2, [r7, #8]
 80053aa:	69fb      	ldr	r3, [r7, #28]
 80053ac:	4013      	ands	r3, r2
 80053ae:	2b00      	cmp	r3, #0
 80053b0:	d109      	bne.n	80053c6 <osEventFlagsWait+0xc2>
        if (timeout > 0U) {
 80053b2:	683b      	ldr	r3, [r7, #0]
 80053b4:	2b00      	cmp	r3, #0
 80053b6:	d003      	beq.n	80053c0 <osEventFlagsWait+0xbc>
          rflags = (uint32_t)osErrorTimeout;
 80053b8:	f06f 0301 	mvn.w	r3, #1
 80053bc:	61fb      	str	r3, [r7, #28]
 80053be:	e002      	b.n	80053c6 <osEventFlagsWait+0xc2>
        } else {
          rflags = (uint32_t)osErrorResource;
 80053c0:	f06f 0302 	mvn.w	r3, #2
 80053c4:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (rflags);
 80053c6:	69fb      	ldr	r3, [r7, #28]
}
 80053c8:	4618      	mov	r0, r3
 80053ca:	3728      	adds	r7, #40	; 0x28
 80053cc:	46bd      	mov	sp, r7
 80053ce:	bd80      	pop	{r7, pc}

080053d0 <osMutexNew>:
}

/*---------------------------------------------------------------------------*/
#if (configUSE_OS2_MUTEX == 1)

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 80053d0:	b580      	push	{r7, lr}
 80053d2:	b088      	sub	sp, #32
 80053d4:	af00      	add	r7, sp, #0
 80053d6:	6078      	str	r0, [r7, #4]
  int32_t  mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hMutex = NULL;
 80053d8:	2300      	movs	r3, #0
 80053da:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80053dc:	f3ef 8305 	mrs	r3, IPSR
 80053e0:	60bb      	str	r3, [r7, #8]
  return(result);
 80053e2:	68bb      	ldr	r3, [r7, #8]

  if (!IS_IRQ()) {
 80053e4:	2b00      	cmp	r3, #0
 80053e6:	d174      	bne.n	80054d2 <osMutexNew+0x102>
    if (attr != NULL) {
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	2b00      	cmp	r3, #0
 80053ec:	d003      	beq.n	80053f6 <osMutexNew+0x26>
      type = attr->attr_bits;
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	685b      	ldr	r3, [r3, #4]
 80053f2:	61bb      	str	r3, [r7, #24]
 80053f4:	e001      	b.n	80053fa <osMutexNew+0x2a>
    } else {
      type = 0U;
 80053f6:	2300      	movs	r3, #0
 80053f8:	61bb      	str	r3, [r7, #24]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 80053fa:	69bb      	ldr	r3, [r7, #24]
 80053fc:	f003 0301 	and.w	r3, r3, #1
 8005400:	2b00      	cmp	r3, #0
 8005402:	d002      	beq.n	800540a <osMutexNew+0x3a>
      rmtx = 1U;
 8005404:	2301      	movs	r3, #1
 8005406:	617b      	str	r3, [r7, #20]
 8005408:	e001      	b.n	800540e <osMutexNew+0x3e>
    } else {
      rmtx = 0U;
 800540a:	2300      	movs	r3, #0
 800540c:	617b      	str	r3, [r7, #20]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 800540e:	69bb      	ldr	r3, [r7, #24]
 8005410:	f003 0308 	and.w	r3, r3, #8
 8005414:	2b00      	cmp	r3, #0
 8005416:	d15c      	bne.n	80054d2 <osMutexNew+0x102>
      mem = -1;
 8005418:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800541c:	613b      	str	r3, [r7, #16]

      if (attr != NULL) {
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	2b00      	cmp	r3, #0
 8005422:	d015      	beq.n	8005450 <osMutexNew+0x80>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	689b      	ldr	r3, [r3, #8]
 8005428:	2b00      	cmp	r3, #0
 800542a:	d006      	beq.n	800543a <osMutexNew+0x6a>
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	68db      	ldr	r3, [r3, #12]
 8005430:	2b4f      	cmp	r3, #79	; 0x4f
 8005432:	d902      	bls.n	800543a <osMutexNew+0x6a>
          mem = 1;
 8005434:	2301      	movs	r3, #1
 8005436:	613b      	str	r3, [r7, #16]
 8005438:	e00c      	b.n	8005454 <osMutexNew+0x84>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	689b      	ldr	r3, [r3, #8]
 800543e:	2b00      	cmp	r3, #0
 8005440:	d108      	bne.n	8005454 <osMutexNew+0x84>
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	68db      	ldr	r3, [r3, #12]
 8005446:	2b00      	cmp	r3, #0
 8005448:	d104      	bne.n	8005454 <osMutexNew+0x84>
            mem = 0;
 800544a:	2300      	movs	r3, #0
 800544c:	613b      	str	r3, [r7, #16]
 800544e:	e001      	b.n	8005454 <osMutexNew+0x84>
          }
        }
      }
      else {
        mem = 0;
 8005450:	2300      	movs	r3, #0
 8005452:	613b      	str	r3, [r7, #16]
      }

      if (mem == 1) {
 8005454:	693b      	ldr	r3, [r7, #16]
 8005456:	2b01      	cmp	r3, #1
 8005458:	d112      	bne.n	8005480 <osMutexNew+0xb0>
        #if (configSUPPORT_STATIC_ALLOCATION == 1)
          if (rmtx != 0U) {
 800545a:	697b      	ldr	r3, [r7, #20]
 800545c:	2b00      	cmp	r3, #0
 800545e:	d007      	beq.n	8005470 <osMutexNew+0xa0>
            #if (configUSE_RECURSIVE_MUTEXES == 1)
            hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	689b      	ldr	r3, [r3, #8]
 8005464:	4619      	mov	r1, r3
 8005466:	2004      	movs	r0, #4
 8005468:	f000 fd83 	bl	8005f72 <xQueueCreateMutexStatic>
 800546c:	61f8      	str	r0, [r7, #28]
 800546e:	e016      	b.n	800549e <osMutexNew+0xce>
            #endif
          }
          else {
            hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	689b      	ldr	r3, [r3, #8]
 8005474:	4619      	mov	r1, r3
 8005476:	2001      	movs	r0, #1
 8005478:	f000 fd7b 	bl	8005f72 <xQueueCreateMutexStatic>
 800547c:	61f8      	str	r0, [r7, #28]
 800547e:	e00e      	b.n	800549e <osMutexNew+0xce>
          }
        #endif
      }
      else {
        if (mem == 0) {
 8005480:	693b      	ldr	r3, [r7, #16]
 8005482:	2b00      	cmp	r3, #0
 8005484:	d10b      	bne.n	800549e <osMutexNew+0xce>
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            if (rmtx != 0U) {
 8005486:	697b      	ldr	r3, [r7, #20]
 8005488:	2b00      	cmp	r3, #0
 800548a:	d004      	beq.n	8005496 <osMutexNew+0xc6>
              #if (configUSE_RECURSIVE_MUTEXES == 1)
              hMutex = xSemaphoreCreateRecursiveMutex ();
 800548c:	2004      	movs	r0, #4
 800548e:	f000 fd58 	bl	8005f42 <xQueueCreateMutex>
 8005492:	61f8      	str	r0, [r7, #28]
 8005494:	e003      	b.n	800549e <osMutexNew+0xce>
              #endif
            } else {
              hMutex = xSemaphoreCreateMutex ();
 8005496:	2001      	movs	r0, #1
 8005498:	f000 fd53 	bl	8005f42 <xQueueCreateMutex>
 800549c:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 800549e:	69fb      	ldr	r3, [r7, #28]
 80054a0:	2b00      	cmp	r3, #0
 80054a2:	d00c      	beq.n	80054be <osMutexNew+0xee>
        if (attr != NULL) {
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	2b00      	cmp	r3, #0
 80054a8:	d003      	beq.n	80054b2 <osMutexNew+0xe2>
          name = attr->name;
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	60fb      	str	r3, [r7, #12]
 80054b0:	e001      	b.n	80054b6 <osMutexNew+0xe6>
        } else {
          name = NULL;
 80054b2:	2300      	movs	r3, #0
 80054b4:	60fb      	str	r3, [r7, #12]
        }
        vQueueAddToRegistry (hMutex, name);
 80054b6:	68f9      	ldr	r1, [r7, #12]
 80054b8:	69f8      	ldr	r0, [r7, #28]
 80054ba:	f001 fa8d 	bl	80069d8 <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 80054be:	69fb      	ldr	r3, [r7, #28]
 80054c0:	2b00      	cmp	r3, #0
 80054c2:	d006      	beq.n	80054d2 <osMutexNew+0x102>
 80054c4:	697b      	ldr	r3, [r7, #20]
 80054c6:	2b00      	cmp	r3, #0
 80054c8:	d003      	beq.n	80054d2 <osMutexNew+0x102>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 80054ca:	69fb      	ldr	r3, [r7, #28]
 80054cc:	f043 0301 	orr.w	r3, r3, #1
 80054d0:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  return ((osMutexId_t)hMutex);
 80054d2:	69fb      	ldr	r3, [r7, #28]
}
 80054d4:	4618      	mov	r0, r3
 80054d6:	3720      	adds	r7, #32
 80054d8:	46bd      	mov	sp, r7
 80054da:	bd80      	pop	{r7, pc}

080054dc <osMutexAcquire>:

osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 80054dc:	b580      	push	{r7, lr}
 80054de:	b086      	sub	sp, #24
 80054e0:	af00      	add	r7, sp, #0
 80054e2:	6078      	str	r0, [r7, #4]
 80054e4:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	f023 0301 	bic.w	r3, r3, #1
 80054ec:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	f003 0301 	and.w	r3, r3, #1
 80054f4:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 80054f6:	2300      	movs	r3, #0
 80054f8:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80054fa:	f3ef 8305 	mrs	r3, IPSR
 80054fe:	60bb      	str	r3, [r7, #8]
  return(result);
 8005500:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 8005502:	2b00      	cmp	r3, #0
 8005504:	d003      	beq.n	800550e <osMutexAcquire+0x32>
    stat = osErrorISR;
 8005506:	f06f 0305 	mvn.w	r3, #5
 800550a:	617b      	str	r3, [r7, #20]
 800550c:	e02c      	b.n	8005568 <osMutexAcquire+0x8c>
  }
  else if (hMutex == NULL) {
 800550e:	693b      	ldr	r3, [r7, #16]
 8005510:	2b00      	cmp	r3, #0
 8005512:	d103      	bne.n	800551c <osMutexAcquire+0x40>
    stat = osErrorParameter;
 8005514:	f06f 0303 	mvn.w	r3, #3
 8005518:	617b      	str	r3, [r7, #20]
 800551a:	e025      	b.n	8005568 <osMutexAcquire+0x8c>
  }
  else {
    if (rmtx != 0U) {
 800551c:	68fb      	ldr	r3, [r7, #12]
 800551e:	2b00      	cmp	r3, #0
 8005520:	d011      	beq.n	8005546 <osMutexAcquire+0x6a>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 8005522:	6839      	ldr	r1, [r7, #0]
 8005524:	6938      	ldr	r0, [r7, #16]
 8005526:	f000 fd73 	bl	8006010 <xQueueTakeMutexRecursive>
 800552a:	4603      	mov	r3, r0
 800552c:	2b01      	cmp	r3, #1
 800552e:	d01b      	beq.n	8005568 <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 8005530:	683b      	ldr	r3, [r7, #0]
 8005532:	2b00      	cmp	r3, #0
 8005534:	d003      	beq.n	800553e <osMutexAcquire+0x62>
          stat = osErrorTimeout;
 8005536:	f06f 0301 	mvn.w	r3, #1
 800553a:	617b      	str	r3, [r7, #20]
 800553c:	e014      	b.n	8005568 <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 800553e:	f06f 0302 	mvn.w	r3, #2
 8005542:	617b      	str	r3, [r7, #20]
 8005544:	e010      	b.n	8005568 <osMutexAcquire+0x8c>
        }
      }
      #endif
    }
    else {
      if (xSemaphoreTake (hMutex, timeout) != pdPASS) {
 8005546:	6839      	ldr	r1, [r7, #0]
 8005548:	6938      	ldr	r0, [r7, #16]
 800554a:	f001 f811 	bl	8006570 <xQueueSemaphoreTake>
 800554e:	4603      	mov	r3, r0
 8005550:	2b01      	cmp	r3, #1
 8005552:	d009      	beq.n	8005568 <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 8005554:	683b      	ldr	r3, [r7, #0]
 8005556:	2b00      	cmp	r3, #0
 8005558:	d003      	beq.n	8005562 <osMutexAcquire+0x86>
          stat = osErrorTimeout;
 800555a:	f06f 0301 	mvn.w	r3, #1
 800555e:	617b      	str	r3, [r7, #20]
 8005560:	e002      	b.n	8005568 <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 8005562:	f06f 0302 	mvn.w	r3, #2
 8005566:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return (stat);
 8005568:	697b      	ldr	r3, [r7, #20]
}
 800556a:	4618      	mov	r0, r3
 800556c:	3718      	adds	r7, #24
 800556e:	46bd      	mov	sp, r7
 8005570:	bd80      	pop	{r7, pc}

08005572 <osMutexRelease>:

osStatus_t osMutexRelease (osMutexId_t mutex_id) {
 8005572:	b580      	push	{r7, lr}
 8005574:	b086      	sub	sp, #24
 8005576:	af00      	add	r7, sp, #0
 8005578:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	f023 0301 	bic.w	r3, r3, #1
 8005580:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	f003 0301 	and.w	r3, r3, #1
 8005588:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 800558a:	2300      	movs	r3, #0
 800558c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800558e:	f3ef 8305 	mrs	r3, IPSR
 8005592:	60bb      	str	r3, [r7, #8]
  return(result);
 8005594:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 8005596:	2b00      	cmp	r3, #0
 8005598:	d003      	beq.n	80055a2 <osMutexRelease+0x30>
    stat = osErrorISR;
 800559a:	f06f 0305 	mvn.w	r3, #5
 800559e:	617b      	str	r3, [r7, #20]
 80055a0:	e01f      	b.n	80055e2 <osMutexRelease+0x70>
  }
  else if (hMutex == NULL) {
 80055a2:	693b      	ldr	r3, [r7, #16]
 80055a4:	2b00      	cmp	r3, #0
 80055a6:	d103      	bne.n	80055b0 <osMutexRelease+0x3e>
    stat = osErrorParameter;
 80055a8:	f06f 0303 	mvn.w	r3, #3
 80055ac:	617b      	str	r3, [r7, #20]
 80055ae:	e018      	b.n	80055e2 <osMutexRelease+0x70>
  }
  else {
    if (rmtx != 0U) {
 80055b0:	68fb      	ldr	r3, [r7, #12]
 80055b2:	2b00      	cmp	r3, #0
 80055b4:	d009      	beq.n	80055ca <osMutexRelease+0x58>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreGiveRecursive (hMutex) != pdPASS) {
 80055b6:	6938      	ldr	r0, [r7, #16]
 80055b8:	f000 fcf6 	bl	8005fa8 <xQueueGiveMutexRecursive>
 80055bc:	4603      	mov	r3, r0
 80055be:	2b01      	cmp	r3, #1
 80055c0:	d00f      	beq.n	80055e2 <osMutexRelease+0x70>
        stat = osErrorResource;
 80055c2:	f06f 0302 	mvn.w	r3, #2
 80055c6:	617b      	str	r3, [r7, #20]
 80055c8:	e00b      	b.n	80055e2 <osMutexRelease+0x70>
      }
      #endif
    }
    else {
      if (xSemaphoreGive (hMutex) != pdPASS) {
 80055ca:	2300      	movs	r3, #0
 80055cc:	2200      	movs	r2, #0
 80055ce:	2100      	movs	r1, #0
 80055d0:	6938      	ldr	r0, [r7, #16]
 80055d2:	f000 fd53 	bl	800607c <xQueueGenericSend>
 80055d6:	4603      	mov	r3, r0
 80055d8:	2b01      	cmp	r3, #1
 80055da:	d002      	beq.n	80055e2 <osMutexRelease+0x70>
        stat = osErrorResource;
 80055dc:	f06f 0302 	mvn.w	r3, #2
 80055e0:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 80055e2:	697b      	ldr	r3, [r7, #20]
}
 80055e4:	4618      	mov	r0, r3
 80055e6:	3718      	adds	r7, #24
 80055e8:	46bd      	mov	sp, r7
 80055ea:	bd80      	pop	{r7, pc}

080055ec <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80055ec:	b480      	push	{r7}
 80055ee:	b085      	sub	sp, #20
 80055f0:	af00      	add	r7, sp, #0
 80055f2:	60f8      	str	r0, [r7, #12]
 80055f4:	60b9      	str	r1, [r7, #8]
 80055f6:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80055f8:	68fb      	ldr	r3, [r7, #12]
 80055fa:	4a07      	ldr	r2, [pc, #28]	; (8005618 <vApplicationGetIdleTaskMemory+0x2c>)
 80055fc:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80055fe:	68bb      	ldr	r3, [r7, #8]
 8005600:	4a06      	ldr	r2, [pc, #24]	; (800561c <vApplicationGetIdleTaskMemory+0x30>)
 8005602:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	2280      	movs	r2, #128	; 0x80
 8005608:	601a      	str	r2, [r3, #0]
}
 800560a:	bf00      	nop
 800560c:	3714      	adds	r7, #20
 800560e:	46bd      	mov	sp, r7
 8005610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005614:	4770      	bx	lr
 8005616:	bf00      	nop
 8005618:	200001f4 	.word	0x200001f4
 800561c:	20000250 	.word	0x20000250

08005620 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8005620:	b480      	push	{r7}
 8005622:	b085      	sub	sp, #20
 8005624:	af00      	add	r7, sp, #0
 8005626:	60f8      	str	r0, [r7, #12]
 8005628:	60b9      	str	r1, [r7, #8]
 800562a:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800562c:	68fb      	ldr	r3, [r7, #12]
 800562e:	4a07      	ldr	r2, [pc, #28]	; (800564c <vApplicationGetTimerTaskMemory+0x2c>)
 8005630:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8005632:	68bb      	ldr	r3, [r7, #8]
 8005634:	4a06      	ldr	r2, [pc, #24]	; (8005650 <vApplicationGetTimerTaskMemory+0x30>)
 8005636:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800563e:	601a      	str	r2, [r3, #0]
}
 8005640:	bf00      	nop
 8005642:	3714      	adds	r7, #20
 8005644:	46bd      	mov	sp, r7
 8005646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800564a:	4770      	bx	lr
 800564c:	20000450 	.word	0x20000450
 8005650:	200004ac 	.word	0x200004ac

08005654 <xEventGroupCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	EventGroupHandle_t xEventGroupCreateStatic( StaticEventGroup_t *pxEventGroupBuffer )
	{
 8005654:	b580      	push	{r7, lr}
 8005656:	b086      	sub	sp, #24
 8005658:	af00      	add	r7, sp, #0
 800565a:	6078      	str	r0, [r7, #4]
	EventGroup_t *pxEventBits;

		/* A StaticEventGroup_t object must be provided. */
		configASSERT( pxEventGroupBuffer );
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	2b00      	cmp	r3, #0
 8005660:	d10a      	bne.n	8005678 <xEventGroupCreateStatic+0x24>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8005662:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005666:	f383 8811 	msr	BASEPRI, r3
 800566a:	f3bf 8f6f 	isb	sy
 800566e:	f3bf 8f4f 	dsb	sy
 8005672:	613b      	str	r3, [r7, #16]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8005674:	bf00      	nop
 8005676:	e7fe      	b.n	8005676 <xEventGroupCreateStatic+0x22>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticEventGroup_t equals the size of the real
			event group structure. */
			volatile size_t xSize = sizeof( StaticEventGroup_t );
 8005678:	2320      	movs	r3, #32
 800567a:	60bb      	str	r3, [r7, #8]
			configASSERT( xSize == sizeof( EventGroup_t ) );
 800567c:	68bb      	ldr	r3, [r7, #8]
 800567e:	2b20      	cmp	r3, #32
 8005680:	d00a      	beq.n	8005698 <xEventGroupCreateStatic+0x44>
	__asm volatile
 8005682:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005686:	f383 8811 	msr	BASEPRI, r3
 800568a:	f3bf 8f6f 	isb	sy
 800568e:	f3bf 8f4f 	dsb	sy
 8005692:	60fb      	str	r3, [r7, #12]
}
 8005694:	bf00      	nop
 8005696:	e7fe      	b.n	8005696 <xEventGroupCreateStatic+0x42>
		} /*lint !e529 xSize is referenced if configASSERT() is defined. */
		#endif /* configASSERT_DEFINED */

		/* The user has provided a statically allocated event group - use it. */
		pxEventBits = ( EventGroup_t * ) pxEventGroupBuffer; /*lint !e740 !e9087 EventGroup_t and StaticEventGroup_t are deliberately aliased for data hiding purposes and guaranteed to have the same size and alignment requirement - checked by configASSERT(). */
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	617b      	str	r3, [r7, #20]

		if( pxEventBits != NULL )
 800569c:	697b      	ldr	r3, [r7, #20]
 800569e:	2b00      	cmp	r3, #0
 80056a0:	d00a      	beq.n	80056b8 <xEventGroupCreateStatic+0x64>
		{
			pxEventBits->uxEventBits = 0;
 80056a2:	697b      	ldr	r3, [r7, #20]
 80056a4:	2200      	movs	r2, #0
 80056a6:	601a      	str	r2, [r3, #0]
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 80056a8:	697b      	ldr	r3, [r7, #20]
 80056aa:	3304      	adds	r3, #4
 80056ac:	4618      	mov	r0, r3
 80056ae:	f000 fa3d 	bl	8005b2c <vListInitialise>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Both static and dynamic allocation can be used, so note that
				this event group was created statically in case the event group
				is later deleted. */
				pxEventBits->ucStaticallyAllocated = pdTRUE;
 80056b2:	697b      	ldr	r3, [r7, #20]
 80056b4:	2201      	movs	r2, #1
 80056b6:	771a      	strb	r2, [r3, #28]
			pxEventGroupBuffer pointing to a pre-allocated (compile time
			allocated) StaticEventGroup_t variable. */
			traceEVENT_GROUP_CREATE_FAILED();
		}

		return pxEventBits;
 80056b8:	697b      	ldr	r3, [r7, #20]
	}
 80056ba:	4618      	mov	r0, r3
 80056bc:	3718      	adds	r7, #24
 80056be:	46bd      	mov	sp, r7
 80056c0:	bd80      	pop	{r7, pc}

080056c2 <xEventGroupCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	EventGroupHandle_t xEventGroupCreate( void )
	{
 80056c2:	b580      	push	{r7, lr}
 80056c4:	b082      	sub	sp, #8
 80056c6:	af00      	add	r7, sp, #0
		TickType_t alignment requirements the cast is safe.  In other cases,
		where the natural word size of the architecture is less than
		sizeof( TickType_t ), the TickType_t variables will be accessed in two
		or more reads operations, and the alignment requirements is only that
		of each individual read. */
		pxEventBits = ( EventGroup_t * ) pvPortMalloc( sizeof( EventGroup_t ) ); /*lint !e9087 !e9079 see comment above. */
 80056c8:	2020      	movs	r0, #32
 80056ca:	f003 f865 	bl	8008798 <pvPortMalloc>
 80056ce:	6078      	str	r0, [r7, #4]

		if( pxEventBits != NULL )
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	2b00      	cmp	r3, #0
 80056d4:	d00a      	beq.n	80056ec <xEventGroupCreate+0x2a>
		{
			pxEventBits->uxEventBits = 0;
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	2200      	movs	r2, #0
 80056da:	601a      	str	r2, [r3, #0]
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	3304      	adds	r3, #4
 80056e0:	4618      	mov	r0, r3
 80056e2:	f000 fa23 	bl	8005b2c <vListInitialise>
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Both static and dynamic allocation can be used, so note this
				event group was allocated statically in case the event group is
				later deleted. */
				pxEventBits->ucStaticallyAllocated = pdFALSE;
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	2200      	movs	r2, #0
 80056ea:	771a      	strb	r2, [r3, #28]
		else
		{
			traceEVENT_GROUP_CREATE_FAILED(); /*lint !e9063 Else branch only exists to allow tracing and does not generate code if trace macros are not defined. */
		}

		return pxEventBits;
 80056ec:	687b      	ldr	r3, [r7, #4]
	}
 80056ee:	4618      	mov	r0, r3
 80056f0:	3708      	adds	r7, #8
 80056f2:	46bd      	mov	sp, r7
 80056f4:	bd80      	pop	{r7, pc}
	...

080056f8 <xEventGroupWaitBits>:
	return uxReturn;
}
/*-----------------------------------------------------------*/

EventBits_t xEventGroupWaitBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToWaitFor, const BaseType_t xClearOnExit, const BaseType_t xWaitForAllBits, TickType_t xTicksToWait )
{
 80056f8:	b580      	push	{r7, lr}
 80056fa:	b090      	sub	sp, #64	; 0x40
 80056fc:	af00      	add	r7, sp, #0
 80056fe:	60f8      	str	r0, [r7, #12]
 8005700:	60b9      	str	r1, [r7, #8]
 8005702:	607a      	str	r2, [r7, #4]
 8005704:	603b      	str	r3, [r7, #0]
EventGroup_t *pxEventBits = xEventGroup;
 8005706:	68fb      	ldr	r3, [r7, #12]
 8005708:	637b      	str	r3, [r7, #52]	; 0x34
EventBits_t uxReturn, uxControlBits = 0;
 800570a:	2300      	movs	r3, #0
 800570c:	63bb      	str	r3, [r7, #56]	; 0x38
BaseType_t xWaitConditionMet, xAlreadyYielded;
BaseType_t xTimeoutOccurred = pdFALSE;
 800570e:	2300      	movs	r3, #0
 8005710:	633b      	str	r3, [r7, #48]	; 0x30

	/* Check the user is not attempting to wait on the bits used by the kernel
	itself, and that at least one bit is being requested. */
	configASSERT( xEventGroup );
 8005712:	68fb      	ldr	r3, [r7, #12]
 8005714:	2b00      	cmp	r3, #0
 8005716:	d10a      	bne.n	800572e <xEventGroupWaitBits+0x36>
	__asm volatile
 8005718:	f04f 0350 	mov.w	r3, #80	; 0x50
 800571c:	f383 8811 	msr	BASEPRI, r3
 8005720:	f3bf 8f6f 	isb	sy
 8005724:	f3bf 8f4f 	dsb	sy
 8005728:	623b      	str	r3, [r7, #32]
}
 800572a:	bf00      	nop
 800572c:	e7fe      	b.n	800572c <xEventGroupWaitBits+0x34>
	configASSERT( ( uxBitsToWaitFor & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 800572e:	68bb      	ldr	r3, [r7, #8]
 8005730:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8005734:	2b00      	cmp	r3, #0
 8005736:	d00a      	beq.n	800574e <xEventGroupWaitBits+0x56>
	__asm volatile
 8005738:	f04f 0350 	mov.w	r3, #80	; 0x50
 800573c:	f383 8811 	msr	BASEPRI, r3
 8005740:	f3bf 8f6f 	isb	sy
 8005744:	f3bf 8f4f 	dsb	sy
 8005748:	61fb      	str	r3, [r7, #28]
}
 800574a:	bf00      	nop
 800574c:	e7fe      	b.n	800574c <xEventGroupWaitBits+0x54>
	configASSERT( uxBitsToWaitFor != 0 );
 800574e:	68bb      	ldr	r3, [r7, #8]
 8005750:	2b00      	cmp	r3, #0
 8005752:	d10a      	bne.n	800576a <xEventGroupWaitBits+0x72>
	__asm volatile
 8005754:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005758:	f383 8811 	msr	BASEPRI, r3
 800575c:	f3bf 8f6f 	isb	sy
 8005760:	f3bf 8f4f 	dsb	sy
 8005764:	61bb      	str	r3, [r7, #24]
}
 8005766:	bf00      	nop
 8005768:	e7fe      	b.n	8005768 <xEventGroupWaitBits+0x70>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800576a:	f002 f85f 	bl	800782c <xTaskGetSchedulerState>
 800576e:	4603      	mov	r3, r0
 8005770:	2b00      	cmp	r3, #0
 8005772:	d102      	bne.n	800577a <xEventGroupWaitBits+0x82>
 8005774:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005776:	2b00      	cmp	r3, #0
 8005778:	d101      	bne.n	800577e <xEventGroupWaitBits+0x86>
 800577a:	2301      	movs	r3, #1
 800577c:	e000      	b.n	8005780 <xEventGroupWaitBits+0x88>
 800577e:	2300      	movs	r3, #0
 8005780:	2b00      	cmp	r3, #0
 8005782:	d10a      	bne.n	800579a <xEventGroupWaitBits+0xa2>
	__asm volatile
 8005784:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005788:	f383 8811 	msr	BASEPRI, r3
 800578c:	f3bf 8f6f 	isb	sy
 8005790:	f3bf 8f4f 	dsb	sy
 8005794:	617b      	str	r3, [r7, #20]
}
 8005796:	bf00      	nop
 8005798:	e7fe      	b.n	8005798 <xEventGroupWaitBits+0xa0>
	}
	#endif

	vTaskSuspendAll();
 800579a:	f001 fbb7 	bl	8006f0c <vTaskSuspendAll>
	{
		const EventBits_t uxCurrentEventBits = pxEventBits->uxEventBits;
 800579e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* Check to see if the wait condition is already met or not. */
		xWaitConditionMet = prvTestWaitCondition( uxCurrentEventBits, uxBitsToWaitFor, xWaitForAllBits );
 80057a4:	683a      	ldr	r2, [r7, #0]
 80057a6:	68b9      	ldr	r1, [r7, #8]
 80057a8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80057aa:	f000 f988 	bl	8005abe <prvTestWaitCondition>
 80057ae:	62b8      	str	r0, [r7, #40]	; 0x28

		if( xWaitConditionMet != pdFALSE )
 80057b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80057b2:	2b00      	cmp	r3, #0
 80057b4:	d00e      	beq.n	80057d4 <xEventGroupWaitBits+0xdc>
		{
			/* The wait condition has already been met so there is no need to
			block. */
			uxReturn = uxCurrentEventBits;
 80057b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80057b8:	63fb      	str	r3, [r7, #60]	; 0x3c
			xTicksToWait = ( TickType_t ) 0;
 80057ba:	2300      	movs	r3, #0
 80057bc:	64bb      	str	r3, [r7, #72]	; 0x48

			/* Clear the wait bits if requested to do so. */
			if( xClearOnExit != pdFALSE )
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	2b00      	cmp	r3, #0
 80057c2:	d028      	beq.n	8005816 <xEventGroupWaitBits+0x11e>
			{
				pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 80057c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80057c6:	681a      	ldr	r2, [r3, #0]
 80057c8:	68bb      	ldr	r3, [r7, #8]
 80057ca:	43db      	mvns	r3, r3
 80057cc:	401a      	ands	r2, r3
 80057ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80057d0:	601a      	str	r2, [r3, #0]
 80057d2:	e020      	b.n	8005816 <xEventGroupWaitBits+0x11e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		else if( xTicksToWait == ( TickType_t ) 0 )
 80057d4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80057d6:	2b00      	cmp	r3, #0
 80057d8:	d104      	bne.n	80057e4 <xEventGroupWaitBits+0xec>
		{
			/* The wait condition has not been met, but no block time was
			specified, so just return the current value. */
			uxReturn = uxCurrentEventBits;
 80057da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80057dc:	63fb      	str	r3, [r7, #60]	; 0x3c
			xTimeoutOccurred = pdTRUE;
 80057de:	2301      	movs	r3, #1
 80057e0:	633b      	str	r3, [r7, #48]	; 0x30
 80057e2:	e018      	b.n	8005816 <xEventGroupWaitBits+0x11e>
		{
			/* The task is going to block to wait for its required bits to be
			set.  uxControlBits are used to remember the specified behaviour of
			this call to xEventGroupWaitBits() - for use when the event bits
			unblock the task. */
			if( xClearOnExit != pdFALSE )
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	2b00      	cmp	r3, #0
 80057e8:	d003      	beq.n	80057f2 <xEventGroupWaitBits+0xfa>
			{
				uxControlBits |= eventCLEAR_EVENTS_ON_EXIT_BIT;
 80057ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80057ec:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80057f0:	63bb      	str	r3, [r7, #56]	; 0x38
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( xWaitForAllBits != pdFALSE )
 80057f2:	683b      	ldr	r3, [r7, #0]
 80057f4:	2b00      	cmp	r3, #0
 80057f6:	d003      	beq.n	8005800 <xEventGroupWaitBits+0x108>
			{
				uxControlBits |= eventWAIT_FOR_ALL_BITS;
 80057f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80057fa:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80057fe:	63bb      	str	r3, [r7, #56]	; 0x38
			}

			/* Store the bits that the calling task is waiting for in the
			task's event list item so the kernel knows when a match is
			found.  Then enter the blocked state. */
			vTaskPlaceOnUnorderedEventList( &( pxEventBits->xTasksWaitingForBits ), ( uxBitsToWaitFor | uxControlBits ), xTicksToWait );
 8005800:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005802:	1d18      	adds	r0, r3, #4
 8005804:	68ba      	ldr	r2, [r7, #8]
 8005806:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005808:	4313      	orrs	r3, r2
 800580a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800580c:	4619      	mov	r1, r3
 800580e:	f001 fd75 	bl	80072fc <vTaskPlaceOnUnorderedEventList>

			/* This is obsolete as it will get set after the task unblocks, but
			some compilers mistakenly generate a warning about the variable
			being returned without being set if it is not done. */
			uxReturn = 0;
 8005812:	2300      	movs	r3, #0
 8005814:	63fb      	str	r3, [r7, #60]	; 0x3c

			traceEVENT_GROUP_WAIT_BITS_BLOCK( xEventGroup, uxBitsToWaitFor );
		}
	}
	xAlreadyYielded = xTaskResumeAll();
 8005816:	f001 fb87 	bl	8006f28 <xTaskResumeAll>
 800581a:	6278      	str	r0, [r7, #36]	; 0x24

	if( xTicksToWait != ( TickType_t ) 0 )
 800581c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800581e:	2b00      	cmp	r3, #0
 8005820:	d031      	beq.n	8005886 <xEventGroupWaitBits+0x18e>
	{
		if( xAlreadyYielded == pdFALSE )
 8005822:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005824:	2b00      	cmp	r3, #0
 8005826:	d107      	bne.n	8005838 <xEventGroupWaitBits+0x140>
		{
			portYIELD_WITHIN_API();
 8005828:	4b19      	ldr	r3, [pc, #100]	; (8005890 <xEventGroupWaitBits+0x198>)
 800582a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800582e:	601a      	str	r2, [r3, #0]
 8005830:	f3bf 8f4f 	dsb	sy
 8005834:	f3bf 8f6f 	isb	sy

		/* The task blocked to wait for its required bits to be set - at this
		point either the required bits were set or the block time expired.  If
		the required bits were set they will have been stored in the task's
		event list item, and they should now be retrieved then cleared. */
		uxReturn = uxTaskResetEventItemValue();
 8005838:	f002 f96e 	bl	8007b18 <uxTaskResetEventItemValue>
 800583c:	63f8      	str	r0, [r7, #60]	; 0x3c

		if( ( uxReturn & eventUNBLOCKED_DUE_TO_BIT_SET ) == ( EventBits_t ) 0 )
 800583e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005840:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005844:	2b00      	cmp	r3, #0
 8005846:	d11a      	bne.n	800587e <xEventGroupWaitBits+0x186>
		{
			taskENTER_CRITICAL();
 8005848:	f002 fe84 	bl	8008554 <vPortEnterCritical>
			{
				/* The task timed out, just return the current event bit value. */
				uxReturn = pxEventBits->uxEventBits;
 800584c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	63fb      	str	r3, [r7, #60]	; 0x3c

				/* It is possible that the event bits were updated between this
				task leaving the Blocked state and running again. */
				if( prvTestWaitCondition( uxReturn, uxBitsToWaitFor, xWaitForAllBits ) != pdFALSE )
 8005852:	683a      	ldr	r2, [r7, #0]
 8005854:	68b9      	ldr	r1, [r7, #8]
 8005856:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8005858:	f000 f931 	bl	8005abe <prvTestWaitCondition>
 800585c:	4603      	mov	r3, r0
 800585e:	2b00      	cmp	r3, #0
 8005860:	d009      	beq.n	8005876 <xEventGroupWaitBits+0x17e>
				{
					if( xClearOnExit != pdFALSE )
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	2b00      	cmp	r3, #0
 8005866:	d006      	beq.n	8005876 <xEventGroupWaitBits+0x17e>
					{
						pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 8005868:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800586a:	681a      	ldr	r2, [r3, #0]
 800586c:	68bb      	ldr	r3, [r7, #8]
 800586e:	43db      	mvns	r3, r3
 8005870:	401a      	ands	r2, r3
 8005872:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005874:	601a      	str	r2, [r3, #0]
				}
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
				xTimeoutOccurred = pdTRUE;
 8005876:	2301      	movs	r3, #1
 8005878:	633b      	str	r3, [r7, #48]	; 0x30
			}
			taskEXIT_CRITICAL();
 800587a:	f002 fe9b 	bl	80085b4 <vPortExitCritical>
		{
			/* The task unblocked because the bits were set. */
		}

		/* The task blocked so control bits may have been set. */
		uxReturn &= ~eventEVENT_BITS_CONTROL_BYTES;
 800587e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005880:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8005884:	63fb      	str	r3, [r7, #60]	; 0x3c
	traceEVENT_GROUP_WAIT_BITS_END( xEventGroup, uxBitsToWaitFor, xTimeoutOccurred );

	/* Prevent compiler warnings when trace macros are not used. */
	( void ) xTimeoutOccurred;

	return uxReturn;
 8005886:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8005888:	4618      	mov	r0, r3
 800588a:	3740      	adds	r7, #64	; 0x40
 800588c:	46bd      	mov	sp, r7
 800588e:	bd80      	pop	{r7, pc}
 8005890:	e000ed04 	.word	0xe000ed04

08005894 <xEventGroupClearBits>:
/*-----------------------------------------------------------*/

EventBits_t xEventGroupClearBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToClear )
{
 8005894:	b580      	push	{r7, lr}
 8005896:	b086      	sub	sp, #24
 8005898:	af00      	add	r7, sp, #0
 800589a:	6078      	str	r0, [r7, #4]
 800589c:	6039      	str	r1, [r7, #0]
EventGroup_t *pxEventBits = xEventGroup;
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	617b      	str	r3, [r7, #20]
EventBits_t uxReturn;

	/* Check the user is not attempting to clear the bits used by the kernel
	itself. */
	configASSERT( xEventGroup );
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	2b00      	cmp	r3, #0
 80058a6:	d10a      	bne.n	80058be <xEventGroupClearBits+0x2a>
	__asm volatile
 80058a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058ac:	f383 8811 	msr	BASEPRI, r3
 80058b0:	f3bf 8f6f 	isb	sy
 80058b4:	f3bf 8f4f 	dsb	sy
 80058b8:	60fb      	str	r3, [r7, #12]
}
 80058ba:	bf00      	nop
 80058bc:	e7fe      	b.n	80058bc <xEventGroupClearBits+0x28>
	configASSERT( ( uxBitsToClear & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 80058be:	683b      	ldr	r3, [r7, #0]
 80058c0:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 80058c4:	2b00      	cmp	r3, #0
 80058c6:	d00a      	beq.n	80058de <xEventGroupClearBits+0x4a>
	__asm volatile
 80058c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058cc:	f383 8811 	msr	BASEPRI, r3
 80058d0:	f3bf 8f6f 	isb	sy
 80058d4:	f3bf 8f4f 	dsb	sy
 80058d8:	60bb      	str	r3, [r7, #8]
}
 80058da:	bf00      	nop
 80058dc:	e7fe      	b.n	80058dc <xEventGroupClearBits+0x48>

	taskENTER_CRITICAL();
 80058de:	f002 fe39 	bl	8008554 <vPortEnterCritical>
	{
		traceEVENT_GROUP_CLEAR_BITS( xEventGroup, uxBitsToClear );

		/* The value returned is the event group value prior to the bits being
		cleared. */
		uxReturn = pxEventBits->uxEventBits;
 80058e2:	697b      	ldr	r3, [r7, #20]
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	613b      	str	r3, [r7, #16]

		/* Clear the bits. */
		pxEventBits->uxEventBits &= ~uxBitsToClear;
 80058e8:	697b      	ldr	r3, [r7, #20]
 80058ea:	681a      	ldr	r2, [r3, #0]
 80058ec:	683b      	ldr	r3, [r7, #0]
 80058ee:	43db      	mvns	r3, r3
 80058f0:	401a      	ands	r2, r3
 80058f2:	697b      	ldr	r3, [r7, #20]
 80058f4:	601a      	str	r2, [r3, #0]
	}
	taskEXIT_CRITICAL();
 80058f6:	f002 fe5d 	bl	80085b4 <vPortExitCritical>

	return uxReturn;
 80058fa:	693b      	ldr	r3, [r7, #16]
}
 80058fc:	4618      	mov	r0, r3
 80058fe:	3718      	adds	r7, #24
 8005900:	46bd      	mov	sp, r7
 8005902:	bd80      	pop	{r7, pc}

08005904 <xEventGroupClearBitsFromISR>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) && ( INCLUDE_xTimerPendFunctionCall == 1 ) && ( configUSE_TIMERS == 1 ) )

	BaseType_t xEventGroupClearBitsFromISR( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToClear )
	{
 8005904:	b580      	push	{r7, lr}
 8005906:	b084      	sub	sp, #16
 8005908:	af00      	add	r7, sp, #0
 800590a:	6078      	str	r0, [r7, #4]
 800590c:	6039      	str	r1, [r7, #0]
		BaseType_t xReturn;

		traceEVENT_GROUP_CLEAR_BITS_FROM_ISR( xEventGroup, uxBitsToClear );
		xReturn = xTimerPendFunctionCallFromISR( vEventGroupClearBitsCallback, ( void * ) xEventGroup, ( uint32_t ) uxBitsToClear, NULL ); /*lint !e9087 Can't avoid cast to void* as a generic callback function not specific to this use case. Callback casts back to original type so safe. */
 800590e:	2300      	movs	r3, #0
 8005910:	683a      	ldr	r2, [r7, #0]
 8005912:	6879      	ldr	r1, [r7, #4]
 8005914:	4804      	ldr	r0, [pc, #16]	; (8005928 <xEventGroupClearBitsFromISR+0x24>)
 8005916:	f002 fccd 	bl	80082b4 <xTimerPendFunctionCallFromISR>
 800591a:	60f8      	str	r0, [r7, #12]

		return xReturn;
 800591c:	68fb      	ldr	r3, [r7, #12]
	}
 800591e:	4618      	mov	r0, r3
 8005920:	3710      	adds	r7, #16
 8005922:	46bd      	mov	sp, r7
 8005924:	bd80      	pop	{r7, pc}
 8005926:	bf00      	nop
 8005928:	08005aa5 	.word	0x08005aa5

0800592c <xEventGroupGetBitsFromISR>:

#endif
/*-----------------------------------------------------------*/

EventBits_t xEventGroupGetBitsFromISR( EventGroupHandle_t xEventGroup )
{
 800592c:	b480      	push	{r7}
 800592e:	b089      	sub	sp, #36	; 0x24
 8005930:	af00      	add	r7, sp, #0
 8005932:	6078      	str	r0, [r7, #4]
UBaseType_t uxSavedInterruptStatus;
EventGroup_t const * const pxEventBits = xEventGroup;
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	61fb      	str	r3, [r7, #28]

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8005938:	f3ef 8211 	mrs	r2, BASEPRI
 800593c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005940:	f383 8811 	msr	BASEPRI, r3
 8005944:	f3bf 8f6f 	isb	sy
 8005948:	f3bf 8f4f 	dsb	sy
 800594c:	60fa      	str	r2, [r7, #12]
 800594e:	60bb      	str	r3, [r7, #8]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8005950:	68fb      	ldr	r3, [r7, #12]
EventBits_t uxReturn;

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8005952:	61bb      	str	r3, [r7, #24]
	{
		uxReturn = pxEventBits->uxEventBits;
 8005954:	69fb      	ldr	r3, [r7, #28]
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	617b      	str	r3, [r7, #20]
 800595a:	69bb      	ldr	r3, [r7, #24]
 800595c:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800595e:	693b      	ldr	r3, [r7, #16]
 8005960:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8005964:	bf00      	nop
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return uxReturn;
 8005966:	697b      	ldr	r3, [r7, #20]
} /*lint !e818 EventGroupHandle_t is a typedef used in other functions to so can't be pointer to const. */
 8005968:	4618      	mov	r0, r3
 800596a:	3724      	adds	r7, #36	; 0x24
 800596c:	46bd      	mov	sp, r7
 800596e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005972:	4770      	bx	lr

08005974 <xEventGroupSetBits>:
/*-----------------------------------------------------------*/

EventBits_t xEventGroupSetBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet )
{
 8005974:	b580      	push	{r7, lr}
 8005976:	b08e      	sub	sp, #56	; 0x38
 8005978:	af00      	add	r7, sp, #0
 800597a:	6078      	str	r0, [r7, #4]
 800597c:	6039      	str	r1, [r7, #0]
ListItem_t *pxListItem, *pxNext;
ListItem_t const *pxListEnd;
List_t const * pxList;
EventBits_t uxBitsToClear = 0, uxBitsWaitedFor, uxControlBits;
 800597e:	2300      	movs	r3, #0
 8005980:	633b      	str	r3, [r7, #48]	; 0x30
EventGroup_t *pxEventBits = xEventGroup;
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	62bb      	str	r3, [r7, #40]	; 0x28
BaseType_t xMatchFound = pdFALSE;
 8005986:	2300      	movs	r3, #0
 8005988:	62fb      	str	r3, [r7, #44]	; 0x2c

	/* Check the user is not attempting to set the bits used by the kernel
	itself. */
	configASSERT( xEventGroup );
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	2b00      	cmp	r3, #0
 800598e:	d10a      	bne.n	80059a6 <xEventGroupSetBits+0x32>
	__asm volatile
 8005990:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005994:	f383 8811 	msr	BASEPRI, r3
 8005998:	f3bf 8f6f 	isb	sy
 800599c:	f3bf 8f4f 	dsb	sy
 80059a0:	613b      	str	r3, [r7, #16]
}
 80059a2:	bf00      	nop
 80059a4:	e7fe      	b.n	80059a4 <xEventGroupSetBits+0x30>
	configASSERT( ( uxBitsToSet & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 80059a6:	683b      	ldr	r3, [r7, #0]
 80059a8:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 80059ac:	2b00      	cmp	r3, #0
 80059ae:	d00a      	beq.n	80059c6 <xEventGroupSetBits+0x52>
	__asm volatile
 80059b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059b4:	f383 8811 	msr	BASEPRI, r3
 80059b8:	f3bf 8f6f 	isb	sy
 80059bc:	f3bf 8f4f 	dsb	sy
 80059c0:	60fb      	str	r3, [r7, #12]
}
 80059c2:	bf00      	nop
 80059c4:	e7fe      	b.n	80059c4 <xEventGroupSetBits+0x50>

	pxList = &( pxEventBits->xTasksWaitingForBits );
 80059c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80059c8:	3304      	adds	r3, #4
 80059ca:	627b      	str	r3, [r7, #36]	; 0x24
	pxListEnd = listGET_END_MARKER( pxList ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80059cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059ce:	3308      	adds	r3, #8
 80059d0:	623b      	str	r3, [r7, #32]
	vTaskSuspendAll();
 80059d2:	f001 fa9b 	bl	8006f0c <vTaskSuspendAll>
	{
		traceEVENT_GROUP_SET_BITS( xEventGroup, uxBitsToSet );

		pxListItem = listGET_HEAD_ENTRY( pxList );
 80059d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059d8:	68db      	ldr	r3, [r3, #12]
 80059da:	637b      	str	r3, [r7, #52]	; 0x34

		/* Set the bits. */
		pxEventBits->uxEventBits |= uxBitsToSet;
 80059dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80059de:	681a      	ldr	r2, [r3, #0]
 80059e0:	683b      	ldr	r3, [r7, #0]
 80059e2:	431a      	orrs	r2, r3
 80059e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80059e6:	601a      	str	r2, [r3, #0]

		/* See if the new bit value should unblock any tasks. */
		while( pxListItem != pxListEnd )
 80059e8:	e03c      	b.n	8005a64 <xEventGroupSetBits+0xf0>
		{
			pxNext = listGET_NEXT( pxListItem );
 80059ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80059ec:	685b      	ldr	r3, [r3, #4]
 80059ee:	61fb      	str	r3, [r7, #28]
			uxBitsWaitedFor = listGET_LIST_ITEM_VALUE( pxListItem );
 80059f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	61bb      	str	r3, [r7, #24]
			xMatchFound = pdFALSE;
 80059f6:	2300      	movs	r3, #0
 80059f8:	62fb      	str	r3, [r7, #44]	; 0x2c

			/* Split the bits waited for from the control bits. */
			uxControlBits = uxBitsWaitedFor & eventEVENT_BITS_CONTROL_BYTES;
 80059fa:	69bb      	ldr	r3, [r7, #24]
 80059fc:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8005a00:	617b      	str	r3, [r7, #20]
			uxBitsWaitedFor &= ~eventEVENT_BITS_CONTROL_BYTES;
 8005a02:	69bb      	ldr	r3, [r7, #24]
 8005a04:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8005a08:	61bb      	str	r3, [r7, #24]

			if( ( uxControlBits & eventWAIT_FOR_ALL_BITS ) == ( EventBits_t ) 0 )
 8005a0a:	697b      	ldr	r3, [r7, #20]
 8005a0c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8005a10:	2b00      	cmp	r3, #0
 8005a12:	d108      	bne.n	8005a26 <xEventGroupSetBits+0xb2>
			{
				/* Just looking for single bit being set. */
				if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) != ( EventBits_t ) 0 )
 8005a14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a16:	681a      	ldr	r2, [r3, #0]
 8005a18:	69bb      	ldr	r3, [r7, #24]
 8005a1a:	4013      	ands	r3, r2
 8005a1c:	2b00      	cmp	r3, #0
 8005a1e:	d00b      	beq.n	8005a38 <xEventGroupSetBits+0xc4>
				{
					xMatchFound = pdTRUE;
 8005a20:	2301      	movs	r3, #1
 8005a22:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005a24:	e008      	b.n	8005a38 <xEventGroupSetBits+0xc4>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			else if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) == uxBitsWaitedFor )
 8005a26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a28:	681a      	ldr	r2, [r3, #0]
 8005a2a:	69bb      	ldr	r3, [r7, #24]
 8005a2c:	4013      	ands	r3, r2
 8005a2e:	69ba      	ldr	r2, [r7, #24]
 8005a30:	429a      	cmp	r2, r3
 8005a32:	d101      	bne.n	8005a38 <xEventGroupSetBits+0xc4>
			{
				/* All bits are set. */
				xMatchFound = pdTRUE;
 8005a34:	2301      	movs	r3, #1
 8005a36:	62fb      	str	r3, [r7, #44]	; 0x2c
			else
			{
				/* Need all bits to be set, but not all the bits were set. */
			}

			if( xMatchFound != pdFALSE )
 8005a38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a3a:	2b00      	cmp	r3, #0
 8005a3c:	d010      	beq.n	8005a60 <xEventGroupSetBits+0xec>
			{
				/* The bits match.  Should the bits be cleared on exit? */
				if( ( uxControlBits & eventCLEAR_EVENTS_ON_EXIT_BIT ) != ( EventBits_t ) 0 )
 8005a3e:	697b      	ldr	r3, [r7, #20]
 8005a40:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005a44:	2b00      	cmp	r3, #0
 8005a46:	d003      	beq.n	8005a50 <xEventGroupSetBits+0xdc>
				{
					uxBitsToClear |= uxBitsWaitedFor;
 8005a48:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005a4a:	69bb      	ldr	r3, [r7, #24]
 8005a4c:	4313      	orrs	r3, r2
 8005a4e:	633b      	str	r3, [r7, #48]	; 0x30
				/* Store the actual event flag value in the task's event list
				item before removing the task from the event list.  The
				eventUNBLOCKED_DUE_TO_BIT_SET bit is set so the task knows
				that is was unblocked due to its required bits matching, rather
				than because it timed out. */
				vTaskRemoveFromUnorderedEventList( pxListItem, pxEventBits->uxEventBits | eventUNBLOCKED_DUE_TO_BIT_SET );
 8005a50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8005a58:	4619      	mov	r1, r3
 8005a5a:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8005a5c:	f001 fd1a 	bl	8007494 <vTaskRemoveFromUnorderedEventList>
			}

			/* Move onto the next list item.  Note pxListItem->pxNext is not
			used here as the list item may have been removed from the event list
			and inserted into the ready/pending reading list. */
			pxListItem = pxNext;
 8005a60:	69fb      	ldr	r3, [r7, #28]
 8005a62:	637b      	str	r3, [r7, #52]	; 0x34
		while( pxListItem != pxListEnd )
 8005a64:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005a66:	6a3b      	ldr	r3, [r7, #32]
 8005a68:	429a      	cmp	r2, r3
 8005a6a:	d1be      	bne.n	80059ea <xEventGroupSetBits+0x76>
		}

		/* Clear any bits that matched when the eventCLEAR_EVENTS_ON_EXIT_BIT
		bit was set in the control word. */
		pxEventBits->uxEventBits &= ~uxBitsToClear;
 8005a6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a6e:	681a      	ldr	r2, [r3, #0]
 8005a70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a72:	43db      	mvns	r3, r3
 8005a74:	401a      	ands	r2, r3
 8005a76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a78:	601a      	str	r2, [r3, #0]
	}
	( void ) xTaskResumeAll();
 8005a7a:	f001 fa55 	bl	8006f28 <xTaskResumeAll>

	return pxEventBits->uxEventBits;
 8005a7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a80:	681b      	ldr	r3, [r3, #0]
}
 8005a82:	4618      	mov	r0, r3
 8005a84:	3738      	adds	r7, #56	; 0x38
 8005a86:	46bd      	mov	sp, r7
 8005a88:	bd80      	pop	{r7, pc}

08005a8a <vEventGroupSetBitsCallback>:
/*-----------------------------------------------------------*/

/* For internal use only - execute a 'set bits' command that was pended from
an interrupt. */
void vEventGroupSetBitsCallback( void *pvEventGroup, const uint32_t ulBitsToSet )
{
 8005a8a:	b580      	push	{r7, lr}
 8005a8c:	b082      	sub	sp, #8
 8005a8e:	af00      	add	r7, sp, #0
 8005a90:	6078      	str	r0, [r7, #4]
 8005a92:	6039      	str	r1, [r7, #0]
	( void ) xEventGroupSetBits( pvEventGroup, ( EventBits_t ) ulBitsToSet ); /*lint !e9079 Can't avoid cast to void* as a generic timer callback prototype. Callback casts back to original type so safe. */
 8005a94:	6839      	ldr	r1, [r7, #0]
 8005a96:	6878      	ldr	r0, [r7, #4]
 8005a98:	f7ff ff6c 	bl	8005974 <xEventGroupSetBits>
}
 8005a9c:	bf00      	nop
 8005a9e:	3708      	adds	r7, #8
 8005aa0:	46bd      	mov	sp, r7
 8005aa2:	bd80      	pop	{r7, pc}

08005aa4 <vEventGroupClearBitsCallback>:
/*-----------------------------------------------------------*/

/* For internal use only - execute a 'clear bits' command that was pended from
an interrupt. */
void vEventGroupClearBitsCallback( void *pvEventGroup, const uint32_t ulBitsToClear )
{
 8005aa4:	b580      	push	{r7, lr}
 8005aa6:	b082      	sub	sp, #8
 8005aa8:	af00      	add	r7, sp, #0
 8005aaa:	6078      	str	r0, [r7, #4]
 8005aac:	6039      	str	r1, [r7, #0]
	( void ) xEventGroupClearBits( pvEventGroup, ( EventBits_t ) ulBitsToClear ); /*lint !e9079 Can't avoid cast to void* as a generic timer callback prototype. Callback casts back to original type so safe. */
 8005aae:	6839      	ldr	r1, [r7, #0]
 8005ab0:	6878      	ldr	r0, [r7, #4]
 8005ab2:	f7ff feef 	bl	8005894 <xEventGroupClearBits>
}
 8005ab6:	bf00      	nop
 8005ab8:	3708      	adds	r7, #8
 8005aba:	46bd      	mov	sp, r7
 8005abc:	bd80      	pop	{r7, pc}

08005abe <prvTestWaitCondition>:
/*-----------------------------------------------------------*/

static BaseType_t prvTestWaitCondition( const EventBits_t uxCurrentEventBits, const EventBits_t uxBitsToWaitFor, const BaseType_t xWaitForAllBits )
{
 8005abe:	b480      	push	{r7}
 8005ac0:	b087      	sub	sp, #28
 8005ac2:	af00      	add	r7, sp, #0
 8005ac4:	60f8      	str	r0, [r7, #12]
 8005ac6:	60b9      	str	r1, [r7, #8]
 8005ac8:	607a      	str	r2, [r7, #4]
BaseType_t xWaitConditionMet = pdFALSE;
 8005aca:	2300      	movs	r3, #0
 8005acc:	617b      	str	r3, [r7, #20]

	if( xWaitForAllBits == pdFALSE )
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	2b00      	cmp	r3, #0
 8005ad2:	d107      	bne.n	8005ae4 <prvTestWaitCondition+0x26>
	{
		/* Task only has to wait for one bit within uxBitsToWaitFor to be
		set.  Is one already set? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) != ( EventBits_t ) 0 )
 8005ad4:	68fa      	ldr	r2, [r7, #12]
 8005ad6:	68bb      	ldr	r3, [r7, #8]
 8005ad8:	4013      	ands	r3, r2
 8005ada:	2b00      	cmp	r3, #0
 8005adc:	d00a      	beq.n	8005af4 <prvTestWaitCondition+0x36>
		{
			xWaitConditionMet = pdTRUE;
 8005ade:	2301      	movs	r3, #1
 8005ae0:	617b      	str	r3, [r7, #20]
 8005ae2:	e007      	b.n	8005af4 <prvTestWaitCondition+0x36>
	}
	else
	{
		/* Task has to wait for all the bits in uxBitsToWaitFor to be set.
		Are they set already? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) == uxBitsToWaitFor )
 8005ae4:	68fa      	ldr	r2, [r7, #12]
 8005ae6:	68bb      	ldr	r3, [r7, #8]
 8005ae8:	4013      	ands	r3, r2
 8005aea:	68ba      	ldr	r2, [r7, #8]
 8005aec:	429a      	cmp	r2, r3
 8005aee:	d101      	bne.n	8005af4 <prvTestWaitCondition+0x36>
		{
			xWaitConditionMet = pdTRUE;
 8005af0:	2301      	movs	r3, #1
 8005af2:	617b      	str	r3, [r7, #20]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	return xWaitConditionMet;
 8005af4:	697b      	ldr	r3, [r7, #20]
}
 8005af6:	4618      	mov	r0, r3
 8005af8:	371c      	adds	r7, #28
 8005afa:	46bd      	mov	sp, r7
 8005afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b00:	4770      	bx	lr
	...

08005b04 <xEventGroupSetBitsFromISR>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) && ( INCLUDE_xTimerPendFunctionCall == 1 ) && ( configUSE_TIMERS == 1 ) )

	BaseType_t xEventGroupSetBitsFromISR( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet, BaseType_t *pxHigherPriorityTaskWoken )
	{
 8005b04:	b580      	push	{r7, lr}
 8005b06:	b086      	sub	sp, #24
 8005b08:	af00      	add	r7, sp, #0
 8005b0a:	60f8      	str	r0, [r7, #12]
 8005b0c:	60b9      	str	r1, [r7, #8]
 8005b0e:	607a      	str	r2, [r7, #4]
	BaseType_t xReturn;

		traceEVENT_GROUP_SET_BITS_FROM_ISR( xEventGroup, uxBitsToSet );
		xReturn = xTimerPendFunctionCallFromISR( vEventGroupSetBitsCallback, ( void * ) xEventGroup, ( uint32_t ) uxBitsToSet, pxHigherPriorityTaskWoken ); /*lint !e9087 Can't avoid cast to void* as a generic callback function not specific to this use case. Callback casts back to original type so safe. */
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	68ba      	ldr	r2, [r7, #8]
 8005b14:	68f9      	ldr	r1, [r7, #12]
 8005b16:	4804      	ldr	r0, [pc, #16]	; (8005b28 <xEventGroupSetBitsFromISR+0x24>)
 8005b18:	f002 fbcc 	bl	80082b4 <xTimerPendFunctionCallFromISR>
 8005b1c:	6178      	str	r0, [r7, #20]

		return xReturn;
 8005b1e:	697b      	ldr	r3, [r7, #20]
	}
 8005b20:	4618      	mov	r0, r3
 8005b22:	3718      	adds	r7, #24
 8005b24:	46bd      	mov	sp, r7
 8005b26:	bd80      	pop	{r7, pc}
 8005b28:	08005a8b 	.word	0x08005a8b

08005b2c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8005b2c:	b480      	push	{r7}
 8005b2e:	b083      	sub	sp, #12
 8005b30:	af00      	add	r7, sp, #0
 8005b32:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	f103 0208 	add.w	r2, r3, #8
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005b44:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	f103 0208 	add.w	r2, r3, #8
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	f103 0208 	add.w	r2, r3, #8
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	2200      	movs	r2, #0
 8005b5e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8005b60:	bf00      	nop
 8005b62:	370c      	adds	r7, #12
 8005b64:	46bd      	mov	sp, r7
 8005b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b6a:	4770      	bx	lr

08005b6c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8005b6c:	b480      	push	{r7}
 8005b6e:	b083      	sub	sp, #12
 8005b70:	af00      	add	r7, sp, #0
 8005b72:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	2200      	movs	r2, #0
 8005b78:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8005b7a:	bf00      	nop
 8005b7c:	370c      	adds	r7, #12
 8005b7e:	46bd      	mov	sp, r7
 8005b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b84:	4770      	bx	lr

08005b86 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005b86:	b480      	push	{r7}
 8005b88:	b085      	sub	sp, #20
 8005b8a:	af00      	add	r7, sp, #0
 8005b8c:	6078      	str	r0, [r7, #4]
 8005b8e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	685b      	ldr	r3, [r3, #4]
 8005b94:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8005b96:	683b      	ldr	r3, [r7, #0]
 8005b98:	68fa      	ldr	r2, [r7, #12]
 8005b9a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8005b9c:	68fb      	ldr	r3, [r7, #12]
 8005b9e:	689a      	ldr	r2, [r3, #8]
 8005ba0:	683b      	ldr	r3, [r7, #0]
 8005ba2:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8005ba4:	68fb      	ldr	r3, [r7, #12]
 8005ba6:	689b      	ldr	r3, [r3, #8]
 8005ba8:	683a      	ldr	r2, [r7, #0]
 8005baa:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8005bac:	68fb      	ldr	r3, [r7, #12]
 8005bae:	683a      	ldr	r2, [r7, #0]
 8005bb0:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8005bb2:	683b      	ldr	r3, [r7, #0]
 8005bb4:	687a      	ldr	r2, [r7, #4]
 8005bb6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	1c5a      	adds	r2, r3, #1
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	601a      	str	r2, [r3, #0]
}
 8005bc2:	bf00      	nop
 8005bc4:	3714      	adds	r7, #20
 8005bc6:	46bd      	mov	sp, r7
 8005bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bcc:	4770      	bx	lr

08005bce <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005bce:	b480      	push	{r7}
 8005bd0:	b085      	sub	sp, #20
 8005bd2:	af00      	add	r7, sp, #0
 8005bd4:	6078      	str	r0, [r7, #4]
 8005bd6:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8005bd8:	683b      	ldr	r3, [r7, #0]
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8005bde:	68bb      	ldr	r3, [r7, #8]
 8005be0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005be4:	d103      	bne.n	8005bee <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	691b      	ldr	r3, [r3, #16]
 8005bea:	60fb      	str	r3, [r7, #12]
 8005bec:	e00c      	b.n	8005c08 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	3308      	adds	r3, #8
 8005bf2:	60fb      	str	r3, [r7, #12]
 8005bf4:	e002      	b.n	8005bfc <vListInsert+0x2e>
 8005bf6:	68fb      	ldr	r3, [r7, #12]
 8005bf8:	685b      	ldr	r3, [r3, #4]
 8005bfa:	60fb      	str	r3, [r7, #12]
 8005bfc:	68fb      	ldr	r3, [r7, #12]
 8005bfe:	685b      	ldr	r3, [r3, #4]
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	68ba      	ldr	r2, [r7, #8]
 8005c04:	429a      	cmp	r2, r3
 8005c06:	d2f6      	bcs.n	8005bf6 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8005c08:	68fb      	ldr	r3, [r7, #12]
 8005c0a:	685a      	ldr	r2, [r3, #4]
 8005c0c:	683b      	ldr	r3, [r7, #0]
 8005c0e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8005c10:	683b      	ldr	r3, [r7, #0]
 8005c12:	685b      	ldr	r3, [r3, #4]
 8005c14:	683a      	ldr	r2, [r7, #0]
 8005c16:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8005c18:	683b      	ldr	r3, [r7, #0]
 8005c1a:	68fa      	ldr	r2, [r7, #12]
 8005c1c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8005c1e:	68fb      	ldr	r3, [r7, #12]
 8005c20:	683a      	ldr	r2, [r7, #0]
 8005c22:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8005c24:	683b      	ldr	r3, [r7, #0]
 8005c26:	687a      	ldr	r2, [r7, #4]
 8005c28:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	1c5a      	adds	r2, r3, #1
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	601a      	str	r2, [r3, #0]
}
 8005c34:	bf00      	nop
 8005c36:	3714      	adds	r7, #20
 8005c38:	46bd      	mov	sp, r7
 8005c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c3e:	4770      	bx	lr

08005c40 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8005c40:	b480      	push	{r7}
 8005c42:	b085      	sub	sp, #20
 8005c44:	af00      	add	r7, sp, #0
 8005c46:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	691b      	ldr	r3, [r3, #16]
 8005c4c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	685b      	ldr	r3, [r3, #4]
 8005c52:	687a      	ldr	r2, [r7, #4]
 8005c54:	6892      	ldr	r2, [r2, #8]
 8005c56:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	689b      	ldr	r3, [r3, #8]
 8005c5c:	687a      	ldr	r2, [r7, #4]
 8005c5e:	6852      	ldr	r2, [r2, #4]
 8005c60:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8005c62:	68fb      	ldr	r3, [r7, #12]
 8005c64:	685b      	ldr	r3, [r3, #4]
 8005c66:	687a      	ldr	r2, [r7, #4]
 8005c68:	429a      	cmp	r2, r3
 8005c6a:	d103      	bne.n	8005c74 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	689a      	ldr	r2, [r3, #8]
 8005c70:	68fb      	ldr	r3, [r7, #12]
 8005c72:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	2200      	movs	r2, #0
 8005c78:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8005c7a:	68fb      	ldr	r3, [r7, #12]
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	1e5a      	subs	r2, r3, #1
 8005c80:	68fb      	ldr	r3, [r7, #12]
 8005c82:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8005c84:	68fb      	ldr	r3, [r7, #12]
 8005c86:	681b      	ldr	r3, [r3, #0]
}
 8005c88:	4618      	mov	r0, r3
 8005c8a:	3714      	adds	r7, #20
 8005c8c:	46bd      	mov	sp, r7
 8005c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c92:	4770      	bx	lr

08005c94 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8005c94:	b580      	push	{r7, lr}
 8005c96:	b084      	sub	sp, #16
 8005c98:	af00      	add	r7, sp, #0
 8005c9a:	6078      	str	r0, [r7, #4]
 8005c9c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8005ca2:	68fb      	ldr	r3, [r7, #12]
 8005ca4:	2b00      	cmp	r3, #0
 8005ca6:	d10a      	bne.n	8005cbe <xQueueGenericReset+0x2a>
	__asm volatile
 8005ca8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005cac:	f383 8811 	msr	BASEPRI, r3
 8005cb0:	f3bf 8f6f 	isb	sy
 8005cb4:	f3bf 8f4f 	dsb	sy
 8005cb8:	60bb      	str	r3, [r7, #8]
}
 8005cba:	bf00      	nop
 8005cbc:	e7fe      	b.n	8005cbc <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8005cbe:	f002 fc49 	bl	8008554 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005cc2:	68fb      	ldr	r3, [r7, #12]
 8005cc4:	681a      	ldr	r2, [r3, #0]
 8005cc6:	68fb      	ldr	r3, [r7, #12]
 8005cc8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005cca:	68f9      	ldr	r1, [r7, #12]
 8005ccc:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8005cce:	fb01 f303 	mul.w	r3, r1, r3
 8005cd2:	441a      	add	r2, r3
 8005cd4:	68fb      	ldr	r3, [r7, #12]
 8005cd6:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8005cd8:	68fb      	ldr	r3, [r7, #12]
 8005cda:	2200      	movs	r2, #0
 8005cdc:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8005cde:	68fb      	ldr	r3, [r7, #12]
 8005ce0:	681a      	ldr	r2, [r3, #0]
 8005ce2:	68fb      	ldr	r3, [r7, #12]
 8005ce4:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005ce6:	68fb      	ldr	r3, [r7, #12]
 8005ce8:	681a      	ldr	r2, [r3, #0]
 8005cea:	68fb      	ldr	r3, [r7, #12]
 8005cec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005cee:	3b01      	subs	r3, #1
 8005cf0:	68f9      	ldr	r1, [r7, #12]
 8005cf2:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8005cf4:	fb01 f303 	mul.w	r3, r1, r3
 8005cf8:	441a      	add	r2, r3
 8005cfa:	68fb      	ldr	r3, [r7, #12]
 8005cfc:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8005cfe:	68fb      	ldr	r3, [r7, #12]
 8005d00:	22ff      	movs	r2, #255	; 0xff
 8005d02:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8005d06:	68fb      	ldr	r3, [r7, #12]
 8005d08:	22ff      	movs	r2, #255	; 0xff
 8005d0a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8005d0e:	683b      	ldr	r3, [r7, #0]
 8005d10:	2b00      	cmp	r3, #0
 8005d12:	d114      	bne.n	8005d3e <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005d14:	68fb      	ldr	r3, [r7, #12]
 8005d16:	691b      	ldr	r3, [r3, #16]
 8005d18:	2b00      	cmp	r3, #0
 8005d1a:	d01a      	beq.n	8005d52 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005d1c:	68fb      	ldr	r3, [r7, #12]
 8005d1e:	3310      	adds	r3, #16
 8005d20:	4618      	mov	r0, r3
 8005d22:	f001 fb53 	bl	80073cc <xTaskRemoveFromEventList>
 8005d26:	4603      	mov	r3, r0
 8005d28:	2b00      	cmp	r3, #0
 8005d2a:	d012      	beq.n	8005d52 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8005d2c:	4b0c      	ldr	r3, [pc, #48]	; (8005d60 <xQueueGenericReset+0xcc>)
 8005d2e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005d32:	601a      	str	r2, [r3, #0]
 8005d34:	f3bf 8f4f 	dsb	sy
 8005d38:	f3bf 8f6f 	isb	sy
 8005d3c:	e009      	b.n	8005d52 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8005d3e:	68fb      	ldr	r3, [r7, #12]
 8005d40:	3310      	adds	r3, #16
 8005d42:	4618      	mov	r0, r3
 8005d44:	f7ff fef2 	bl	8005b2c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8005d48:	68fb      	ldr	r3, [r7, #12]
 8005d4a:	3324      	adds	r3, #36	; 0x24
 8005d4c:	4618      	mov	r0, r3
 8005d4e:	f7ff feed 	bl	8005b2c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8005d52:	f002 fc2f 	bl	80085b4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8005d56:	2301      	movs	r3, #1
}
 8005d58:	4618      	mov	r0, r3
 8005d5a:	3710      	adds	r7, #16
 8005d5c:	46bd      	mov	sp, r7
 8005d5e:	bd80      	pop	{r7, pc}
 8005d60:	e000ed04 	.word	0xe000ed04

08005d64 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8005d64:	b580      	push	{r7, lr}
 8005d66:	b08e      	sub	sp, #56	; 0x38
 8005d68:	af02      	add	r7, sp, #8
 8005d6a:	60f8      	str	r0, [r7, #12]
 8005d6c:	60b9      	str	r1, [r7, #8]
 8005d6e:	607a      	str	r2, [r7, #4]
 8005d70:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8005d72:	68fb      	ldr	r3, [r7, #12]
 8005d74:	2b00      	cmp	r3, #0
 8005d76:	d10a      	bne.n	8005d8e <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8005d78:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d7c:	f383 8811 	msr	BASEPRI, r3
 8005d80:	f3bf 8f6f 	isb	sy
 8005d84:	f3bf 8f4f 	dsb	sy
 8005d88:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8005d8a:	bf00      	nop
 8005d8c:	e7fe      	b.n	8005d8c <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8005d8e:	683b      	ldr	r3, [r7, #0]
 8005d90:	2b00      	cmp	r3, #0
 8005d92:	d10a      	bne.n	8005daa <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8005d94:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d98:	f383 8811 	msr	BASEPRI, r3
 8005d9c:	f3bf 8f6f 	isb	sy
 8005da0:	f3bf 8f4f 	dsb	sy
 8005da4:	627b      	str	r3, [r7, #36]	; 0x24
}
 8005da6:	bf00      	nop
 8005da8:	e7fe      	b.n	8005da8 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	2b00      	cmp	r3, #0
 8005dae:	d002      	beq.n	8005db6 <xQueueGenericCreateStatic+0x52>
 8005db0:	68bb      	ldr	r3, [r7, #8]
 8005db2:	2b00      	cmp	r3, #0
 8005db4:	d001      	beq.n	8005dba <xQueueGenericCreateStatic+0x56>
 8005db6:	2301      	movs	r3, #1
 8005db8:	e000      	b.n	8005dbc <xQueueGenericCreateStatic+0x58>
 8005dba:	2300      	movs	r3, #0
 8005dbc:	2b00      	cmp	r3, #0
 8005dbe:	d10a      	bne.n	8005dd6 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8005dc0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005dc4:	f383 8811 	msr	BASEPRI, r3
 8005dc8:	f3bf 8f6f 	isb	sy
 8005dcc:	f3bf 8f4f 	dsb	sy
 8005dd0:	623b      	str	r3, [r7, #32]
}
 8005dd2:	bf00      	nop
 8005dd4:	e7fe      	b.n	8005dd4 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	2b00      	cmp	r3, #0
 8005dda:	d102      	bne.n	8005de2 <xQueueGenericCreateStatic+0x7e>
 8005ddc:	68bb      	ldr	r3, [r7, #8]
 8005dde:	2b00      	cmp	r3, #0
 8005de0:	d101      	bne.n	8005de6 <xQueueGenericCreateStatic+0x82>
 8005de2:	2301      	movs	r3, #1
 8005de4:	e000      	b.n	8005de8 <xQueueGenericCreateStatic+0x84>
 8005de6:	2300      	movs	r3, #0
 8005de8:	2b00      	cmp	r3, #0
 8005dea:	d10a      	bne.n	8005e02 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8005dec:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005df0:	f383 8811 	msr	BASEPRI, r3
 8005df4:	f3bf 8f6f 	isb	sy
 8005df8:	f3bf 8f4f 	dsb	sy
 8005dfc:	61fb      	str	r3, [r7, #28]
}
 8005dfe:	bf00      	nop
 8005e00:	e7fe      	b.n	8005e00 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8005e02:	2350      	movs	r3, #80	; 0x50
 8005e04:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8005e06:	697b      	ldr	r3, [r7, #20]
 8005e08:	2b50      	cmp	r3, #80	; 0x50
 8005e0a:	d00a      	beq.n	8005e22 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8005e0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e10:	f383 8811 	msr	BASEPRI, r3
 8005e14:	f3bf 8f6f 	isb	sy
 8005e18:	f3bf 8f4f 	dsb	sy
 8005e1c:	61bb      	str	r3, [r7, #24]
}
 8005e1e:	bf00      	nop
 8005e20:	e7fe      	b.n	8005e20 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8005e22:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005e24:	683b      	ldr	r3, [r7, #0]
 8005e26:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8005e28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e2a:	2b00      	cmp	r3, #0
 8005e2c:	d00d      	beq.n	8005e4a <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8005e2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e30:	2201      	movs	r2, #1
 8005e32:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8005e36:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8005e3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e3c:	9300      	str	r3, [sp, #0]
 8005e3e:	4613      	mov	r3, r2
 8005e40:	687a      	ldr	r2, [r7, #4]
 8005e42:	68b9      	ldr	r1, [r7, #8]
 8005e44:	68f8      	ldr	r0, [r7, #12]
 8005e46:	f000 f83f 	bl	8005ec8 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8005e4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8005e4c:	4618      	mov	r0, r3
 8005e4e:	3730      	adds	r7, #48	; 0x30
 8005e50:	46bd      	mov	sp, r7
 8005e52:	bd80      	pop	{r7, pc}

08005e54 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8005e54:	b580      	push	{r7, lr}
 8005e56:	b08a      	sub	sp, #40	; 0x28
 8005e58:	af02      	add	r7, sp, #8
 8005e5a:	60f8      	str	r0, [r7, #12]
 8005e5c:	60b9      	str	r1, [r7, #8]
 8005e5e:	4613      	mov	r3, r2
 8005e60:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8005e62:	68fb      	ldr	r3, [r7, #12]
 8005e64:	2b00      	cmp	r3, #0
 8005e66:	d10a      	bne.n	8005e7e <xQueueGenericCreate+0x2a>
	__asm volatile
 8005e68:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e6c:	f383 8811 	msr	BASEPRI, r3
 8005e70:	f3bf 8f6f 	isb	sy
 8005e74:	f3bf 8f4f 	dsb	sy
 8005e78:	613b      	str	r3, [r7, #16]
}
 8005e7a:	bf00      	nop
 8005e7c:	e7fe      	b.n	8005e7c <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005e7e:	68fb      	ldr	r3, [r7, #12]
 8005e80:	68ba      	ldr	r2, [r7, #8]
 8005e82:	fb02 f303 	mul.w	r3, r2, r3
 8005e86:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8005e88:	69fb      	ldr	r3, [r7, #28]
 8005e8a:	3350      	adds	r3, #80	; 0x50
 8005e8c:	4618      	mov	r0, r3
 8005e8e:	f002 fc83 	bl	8008798 <pvPortMalloc>
 8005e92:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8005e94:	69bb      	ldr	r3, [r7, #24]
 8005e96:	2b00      	cmp	r3, #0
 8005e98:	d011      	beq.n	8005ebe <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8005e9a:	69bb      	ldr	r3, [r7, #24]
 8005e9c:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005e9e:	697b      	ldr	r3, [r7, #20]
 8005ea0:	3350      	adds	r3, #80	; 0x50
 8005ea2:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8005ea4:	69bb      	ldr	r3, [r7, #24]
 8005ea6:	2200      	movs	r2, #0
 8005ea8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8005eac:	79fa      	ldrb	r2, [r7, #7]
 8005eae:	69bb      	ldr	r3, [r7, #24]
 8005eb0:	9300      	str	r3, [sp, #0]
 8005eb2:	4613      	mov	r3, r2
 8005eb4:	697a      	ldr	r2, [r7, #20]
 8005eb6:	68b9      	ldr	r1, [r7, #8]
 8005eb8:	68f8      	ldr	r0, [r7, #12]
 8005eba:	f000 f805 	bl	8005ec8 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8005ebe:	69bb      	ldr	r3, [r7, #24]
	}
 8005ec0:	4618      	mov	r0, r3
 8005ec2:	3720      	adds	r7, #32
 8005ec4:	46bd      	mov	sp, r7
 8005ec6:	bd80      	pop	{r7, pc}

08005ec8 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8005ec8:	b580      	push	{r7, lr}
 8005eca:	b084      	sub	sp, #16
 8005ecc:	af00      	add	r7, sp, #0
 8005ece:	60f8      	str	r0, [r7, #12]
 8005ed0:	60b9      	str	r1, [r7, #8]
 8005ed2:	607a      	str	r2, [r7, #4]
 8005ed4:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8005ed6:	68bb      	ldr	r3, [r7, #8]
 8005ed8:	2b00      	cmp	r3, #0
 8005eda:	d103      	bne.n	8005ee4 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8005edc:	69bb      	ldr	r3, [r7, #24]
 8005ede:	69ba      	ldr	r2, [r7, #24]
 8005ee0:	601a      	str	r2, [r3, #0]
 8005ee2:	e002      	b.n	8005eea <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8005ee4:	69bb      	ldr	r3, [r7, #24]
 8005ee6:	687a      	ldr	r2, [r7, #4]
 8005ee8:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8005eea:	69bb      	ldr	r3, [r7, #24]
 8005eec:	68fa      	ldr	r2, [r7, #12]
 8005eee:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8005ef0:	69bb      	ldr	r3, [r7, #24]
 8005ef2:	68ba      	ldr	r2, [r7, #8]
 8005ef4:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8005ef6:	2101      	movs	r1, #1
 8005ef8:	69b8      	ldr	r0, [r7, #24]
 8005efa:	f7ff fecb 	bl	8005c94 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8005efe:	69bb      	ldr	r3, [r7, #24]
 8005f00:	78fa      	ldrb	r2, [r7, #3]
 8005f02:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8005f06:	bf00      	nop
 8005f08:	3710      	adds	r7, #16
 8005f0a:	46bd      	mov	sp, r7
 8005f0c:	bd80      	pop	{r7, pc}

08005f0e <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 8005f0e:	b580      	push	{r7, lr}
 8005f10:	b082      	sub	sp, #8
 8005f12:	af00      	add	r7, sp, #0
 8005f14:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	2b00      	cmp	r3, #0
 8005f1a:	d00e      	beq.n	8005f3a <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	2200      	movs	r2, #0
 8005f20:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	2200      	movs	r2, #0
 8005f26:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	2200      	movs	r2, #0
 8005f2c:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8005f2e:	2300      	movs	r3, #0
 8005f30:	2200      	movs	r2, #0
 8005f32:	2100      	movs	r1, #0
 8005f34:	6878      	ldr	r0, [r7, #4]
 8005f36:	f000 f8a1 	bl	800607c <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 8005f3a:	bf00      	nop
 8005f3c:	3708      	adds	r7, #8
 8005f3e:	46bd      	mov	sp, r7
 8005f40:	bd80      	pop	{r7, pc}

08005f42 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 8005f42:	b580      	push	{r7, lr}
 8005f44:	b086      	sub	sp, #24
 8005f46:	af00      	add	r7, sp, #0
 8005f48:	4603      	mov	r3, r0
 8005f4a:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8005f4c:	2301      	movs	r3, #1
 8005f4e:	617b      	str	r3, [r7, #20]
 8005f50:	2300      	movs	r3, #0
 8005f52:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8005f54:	79fb      	ldrb	r3, [r7, #7]
 8005f56:	461a      	mov	r2, r3
 8005f58:	6939      	ldr	r1, [r7, #16]
 8005f5a:	6978      	ldr	r0, [r7, #20]
 8005f5c:	f7ff ff7a 	bl	8005e54 <xQueueGenericCreate>
 8005f60:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8005f62:	68f8      	ldr	r0, [r7, #12]
 8005f64:	f7ff ffd3 	bl	8005f0e <prvInitialiseMutex>

		return xNewQueue;
 8005f68:	68fb      	ldr	r3, [r7, #12]
	}
 8005f6a:	4618      	mov	r0, r3
 8005f6c:	3718      	adds	r7, #24
 8005f6e:	46bd      	mov	sp, r7
 8005f70:	bd80      	pop	{r7, pc}

08005f72 <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 8005f72:	b580      	push	{r7, lr}
 8005f74:	b088      	sub	sp, #32
 8005f76:	af02      	add	r7, sp, #8
 8005f78:	4603      	mov	r3, r0
 8005f7a:	6039      	str	r1, [r7, #0]
 8005f7c:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8005f7e:	2301      	movs	r3, #1
 8005f80:	617b      	str	r3, [r7, #20]
 8005f82:	2300      	movs	r3, #0
 8005f84:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 8005f86:	79fb      	ldrb	r3, [r7, #7]
 8005f88:	9300      	str	r3, [sp, #0]
 8005f8a:	683b      	ldr	r3, [r7, #0]
 8005f8c:	2200      	movs	r2, #0
 8005f8e:	6939      	ldr	r1, [r7, #16]
 8005f90:	6978      	ldr	r0, [r7, #20]
 8005f92:	f7ff fee7 	bl	8005d64 <xQueueGenericCreateStatic>
 8005f96:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8005f98:	68f8      	ldr	r0, [r7, #12]
 8005f9a:	f7ff ffb8 	bl	8005f0e <prvInitialiseMutex>

		return xNewQueue;
 8005f9e:	68fb      	ldr	r3, [r7, #12]
	}
 8005fa0:	4618      	mov	r0, r3
 8005fa2:	3718      	adds	r7, #24
 8005fa4:	46bd      	mov	sp, r7
 8005fa6:	bd80      	pop	{r7, pc}

08005fa8 <xQueueGiveMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueGiveMutexRecursive( QueueHandle_t xMutex )
	{
 8005fa8:	b590      	push	{r4, r7, lr}
 8005faa:	b087      	sub	sp, #28
 8005fac:	af00      	add	r7, sp, #0
 8005fae:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 8005fb4:	693b      	ldr	r3, [r7, #16]
 8005fb6:	2b00      	cmp	r3, #0
 8005fb8:	d10a      	bne.n	8005fd0 <xQueueGiveMutexRecursive+0x28>
	__asm volatile
 8005fba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005fbe:	f383 8811 	msr	BASEPRI, r3
 8005fc2:	f3bf 8f6f 	isb	sy
 8005fc6:	f3bf 8f4f 	dsb	sy
 8005fca:	60fb      	str	r3, [r7, #12]
}
 8005fcc:	bf00      	nop
 8005fce:	e7fe      	b.n	8005fce <xQueueGiveMutexRecursive+0x26>
		change outside of this task.  If this task does not hold the mutex then
		pxMutexHolder can never coincidentally equal the tasks handle, and as
		this is the only condition we are interested in it does not matter if
		pxMutexHolder is accessed simultaneously by another task.  Therefore no
		mutual exclusion is required to test the pxMutexHolder variable. */
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 8005fd0:	693b      	ldr	r3, [r7, #16]
 8005fd2:	689c      	ldr	r4, [r3, #8]
 8005fd4:	f001 fc1a 	bl	800780c <xTaskGetCurrentTaskHandle>
 8005fd8:	4603      	mov	r3, r0
 8005fda:	429c      	cmp	r4, r3
 8005fdc:	d111      	bne.n	8006002 <xQueueGiveMutexRecursive+0x5a>
			/* uxRecursiveCallCount cannot be zero if xMutexHolder is equal to
			the task handle, therefore no underflow check is required.  Also,
			uxRecursiveCallCount is only modified by the mutex holder, and as
			there can only be one, no mutual exclusion is required to modify the
			uxRecursiveCallCount member. */
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )--;
 8005fde:	693b      	ldr	r3, [r7, #16]
 8005fe0:	68db      	ldr	r3, [r3, #12]
 8005fe2:	1e5a      	subs	r2, r3, #1
 8005fe4:	693b      	ldr	r3, [r7, #16]
 8005fe6:	60da      	str	r2, [r3, #12]

			/* Has the recursive call count unwound to 0? */
			if( pxMutex->u.xSemaphore.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 8005fe8:	693b      	ldr	r3, [r7, #16]
 8005fea:	68db      	ldr	r3, [r3, #12]
 8005fec:	2b00      	cmp	r3, #0
 8005fee:	d105      	bne.n	8005ffc <xQueueGiveMutexRecursive+0x54>
			{
				/* Return the mutex.  This will automatically unblock any other
				task that might be waiting to access the mutex. */
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 8005ff0:	2300      	movs	r3, #0
 8005ff2:	2200      	movs	r2, #0
 8005ff4:	2100      	movs	r1, #0
 8005ff6:	6938      	ldr	r0, [r7, #16]
 8005ff8:	f000 f840 	bl	800607c <xQueueGenericSend>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			xReturn = pdPASS;
 8005ffc:	2301      	movs	r3, #1
 8005ffe:	617b      	str	r3, [r7, #20]
 8006000:	e001      	b.n	8006006 <xQueueGiveMutexRecursive+0x5e>
		}
		else
		{
			/* The mutex cannot be given because the calling task is not the
			holder. */
			xReturn = pdFAIL;
 8006002:	2300      	movs	r3, #0
 8006004:	617b      	str	r3, [r7, #20]

			traceGIVE_MUTEX_RECURSIVE_FAILED( pxMutex );
		}

		return xReturn;
 8006006:	697b      	ldr	r3, [r7, #20]
	}
 8006008:	4618      	mov	r0, r3
 800600a:	371c      	adds	r7, #28
 800600c:	46bd      	mov	sp, r7
 800600e:	bd90      	pop	{r4, r7, pc}

08006010 <xQueueTakeMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueTakeMutexRecursive( QueueHandle_t xMutex, TickType_t xTicksToWait )
	{
 8006010:	b590      	push	{r4, r7, lr}
 8006012:	b087      	sub	sp, #28
 8006014:	af00      	add	r7, sp, #0
 8006016:	6078      	str	r0, [r7, #4]
 8006018:	6039      	str	r1, [r7, #0]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 800601e:	693b      	ldr	r3, [r7, #16]
 8006020:	2b00      	cmp	r3, #0
 8006022:	d10a      	bne.n	800603a <xQueueTakeMutexRecursive+0x2a>
	__asm volatile
 8006024:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006028:	f383 8811 	msr	BASEPRI, r3
 800602c:	f3bf 8f6f 	isb	sy
 8006030:	f3bf 8f4f 	dsb	sy
 8006034:	60fb      	str	r3, [r7, #12]
}
 8006036:	bf00      	nop
 8006038:	e7fe      	b.n	8006038 <xQueueTakeMutexRecursive+0x28>
		/* Comments regarding mutual exclusion as per those within
		xQueueGiveMutexRecursive(). */

		traceTAKE_MUTEX_RECURSIVE( pxMutex );

		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 800603a:	693b      	ldr	r3, [r7, #16]
 800603c:	689c      	ldr	r4, [r3, #8]
 800603e:	f001 fbe5 	bl	800780c <xTaskGetCurrentTaskHandle>
 8006042:	4603      	mov	r3, r0
 8006044:	429c      	cmp	r4, r3
 8006046:	d107      	bne.n	8006058 <xQueueTakeMutexRecursive+0x48>
		{
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 8006048:	693b      	ldr	r3, [r7, #16]
 800604a:	68db      	ldr	r3, [r3, #12]
 800604c:	1c5a      	adds	r2, r3, #1
 800604e:	693b      	ldr	r3, [r7, #16]
 8006050:	60da      	str	r2, [r3, #12]
			xReturn = pdPASS;
 8006052:	2301      	movs	r3, #1
 8006054:	617b      	str	r3, [r7, #20]
 8006056:	e00c      	b.n	8006072 <xQueueTakeMutexRecursive+0x62>
		}
		else
		{
			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 8006058:	6839      	ldr	r1, [r7, #0]
 800605a:	6938      	ldr	r0, [r7, #16]
 800605c:	f000 fa88 	bl	8006570 <xQueueSemaphoreTake>
 8006060:	6178      	str	r0, [r7, #20]

			/* pdPASS will only be returned if the mutex was successfully
			obtained.  The calling task may have entered the Blocked state
			before reaching here. */
			if( xReturn != pdFAIL )
 8006062:	697b      	ldr	r3, [r7, #20]
 8006064:	2b00      	cmp	r3, #0
 8006066:	d004      	beq.n	8006072 <xQueueTakeMutexRecursive+0x62>
			{
				( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 8006068:	693b      	ldr	r3, [r7, #16]
 800606a:	68db      	ldr	r3, [r3, #12]
 800606c:	1c5a      	adds	r2, r3, #1
 800606e:	693b      	ldr	r3, [r7, #16]
 8006070:	60da      	str	r2, [r3, #12]
			{
				traceTAKE_MUTEX_RECURSIVE_FAILED( pxMutex );
			}
		}

		return xReturn;
 8006072:	697b      	ldr	r3, [r7, #20]
	}
 8006074:	4618      	mov	r0, r3
 8006076:	371c      	adds	r7, #28
 8006078:	46bd      	mov	sp, r7
 800607a:	bd90      	pop	{r4, r7, pc}

0800607c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800607c:	b580      	push	{r7, lr}
 800607e:	b08e      	sub	sp, #56	; 0x38
 8006080:	af00      	add	r7, sp, #0
 8006082:	60f8      	str	r0, [r7, #12]
 8006084:	60b9      	str	r1, [r7, #8]
 8006086:	607a      	str	r2, [r7, #4]
 8006088:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800608a:	2300      	movs	r3, #0
 800608c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800608e:	68fb      	ldr	r3, [r7, #12]
 8006090:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8006092:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006094:	2b00      	cmp	r3, #0
 8006096:	d10a      	bne.n	80060ae <xQueueGenericSend+0x32>
	__asm volatile
 8006098:	f04f 0350 	mov.w	r3, #80	; 0x50
 800609c:	f383 8811 	msr	BASEPRI, r3
 80060a0:	f3bf 8f6f 	isb	sy
 80060a4:	f3bf 8f4f 	dsb	sy
 80060a8:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80060aa:	bf00      	nop
 80060ac:	e7fe      	b.n	80060ac <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80060ae:	68bb      	ldr	r3, [r7, #8]
 80060b0:	2b00      	cmp	r3, #0
 80060b2:	d103      	bne.n	80060bc <xQueueGenericSend+0x40>
 80060b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80060b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060b8:	2b00      	cmp	r3, #0
 80060ba:	d101      	bne.n	80060c0 <xQueueGenericSend+0x44>
 80060bc:	2301      	movs	r3, #1
 80060be:	e000      	b.n	80060c2 <xQueueGenericSend+0x46>
 80060c0:	2300      	movs	r3, #0
 80060c2:	2b00      	cmp	r3, #0
 80060c4:	d10a      	bne.n	80060dc <xQueueGenericSend+0x60>
	__asm volatile
 80060c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80060ca:	f383 8811 	msr	BASEPRI, r3
 80060ce:	f3bf 8f6f 	isb	sy
 80060d2:	f3bf 8f4f 	dsb	sy
 80060d6:	627b      	str	r3, [r7, #36]	; 0x24
}
 80060d8:	bf00      	nop
 80060da:	e7fe      	b.n	80060da <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80060dc:	683b      	ldr	r3, [r7, #0]
 80060de:	2b02      	cmp	r3, #2
 80060e0:	d103      	bne.n	80060ea <xQueueGenericSend+0x6e>
 80060e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80060e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80060e6:	2b01      	cmp	r3, #1
 80060e8:	d101      	bne.n	80060ee <xQueueGenericSend+0x72>
 80060ea:	2301      	movs	r3, #1
 80060ec:	e000      	b.n	80060f0 <xQueueGenericSend+0x74>
 80060ee:	2300      	movs	r3, #0
 80060f0:	2b00      	cmp	r3, #0
 80060f2:	d10a      	bne.n	800610a <xQueueGenericSend+0x8e>
	__asm volatile
 80060f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80060f8:	f383 8811 	msr	BASEPRI, r3
 80060fc:	f3bf 8f6f 	isb	sy
 8006100:	f3bf 8f4f 	dsb	sy
 8006104:	623b      	str	r3, [r7, #32]
}
 8006106:	bf00      	nop
 8006108:	e7fe      	b.n	8006108 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800610a:	f001 fb8f 	bl	800782c <xTaskGetSchedulerState>
 800610e:	4603      	mov	r3, r0
 8006110:	2b00      	cmp	r3, #0
 8006112:	d102      	bne.n	800611a <xQueueGenericSend+0x9e>
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	2b00      	cmp	r3, #0
 8006118:	d101      	bne.n	800611e <xQueueGenericSend+0xa2>
 800611a:	2301      	movs	r3, #1
 800611c:	e000      	b.n	8006120 <xQueueGenericSend+0xa4>
 800611e:	2300      	movs	r3, #0
 8006120:	2b00      	cmp	r3, #0
 8006122:	d10a      	bne.n	800613a <xQueueGenericSend+0xbe>
	__asm volatile
 8006124:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006128:	f383 8811 	msr	BASEPRI, r3
 800612c:	f3bf 8f6f 	isb	sy
 8006130:	f3bf 8f4f 	dsb	sy
 8006134:	61fb      	str	r3, [r7, #28]
}
 8006136:	bf00      	nop
 8006138:	e7fe      	b.n	8006138 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800613a:	f002 fa0b 	bl	8008554 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800613e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006140:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006142:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006144:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006146:	429a      	cmp	r2, r3
 8006148:	d302      	bcc.n	8006150 <xQueueGenericSend+0xd4>
 800614a:	683b      	ldr	r3, [r7, #0]
 800614c:	2b02      	cmp	r3, #2
 800614e:	d129      	bne.n	80061a4 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006150:	683a      	ldr	r2, [r7, #0]
 8006152:	68b9      	ldr	r1, [r7, #8]
 8006154:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006156:	f000 fb2f 	bl	80067b8 <prvCopyDataToQueue>
 800615a:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800615c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800615e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006160:	2b00      	cmp	r3, #0
 8006162:	d010      	beq.n	8006186 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006164:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006166:	3324      	adds	r3, #36	; 0x24
 8006168:	4618      	mov	r0, r3
 800616a:	f001 f92f 	bl	80073cc <xTaskRemoveFromEventList>
 800616e:	4603      	mov	r3, r0
 8006170:	2b00      	cmp	r3, #0
 8006172:	d013      	beq.n	800619c <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8006174:	4b3f      	ldr	r3, [pc, #252]	; (8006274 <xQueueGenericSend+0x1f8>)
 8006176:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800617a:	601a      	str	r2, [r3, #0]
 800617c:	f3bf 8f4f 	dsb	sy
 8006180:	f3bf 8f6f 	isb	sy
 8006184:	e00a      	b.n	800619c <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8006186:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006188:	2b00      	cmp	r3, #0
 800618a:	d007      	beq.n	800619c <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800618c:	4b39      	ldr	r3, [pc, #228]	; (8006274 <xQueueGenericSend+0x1f8>)
 800618e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006192:	601a      	str	r2, [r3, #0]
 8006194:	f3bf 8f4f 	dsb	sy
 8006198:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800619c:	f002 fa0a 	bl	80085b4 <vPortExitCritical>
				return pdPASS;
 80061a0:	2301      	movs	r3, #1
 80061a2:	e063      	b.n	800626c <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	2b00      	cmp	r3, #0
 80061a8:	d103      	bne.n	80061b2 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80061aa:	f002 fa03 	bl	80085b4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80061ae:	2300      	movs	r3, #0
 80061b0:	e05c      	b.n	800626c <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 80061b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80061b4:	2b00      	cmp	r3, #0
 80061b6:	d106      	bne.n	80061c6 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80061b8:	f107 0314 	add.w	r3, r7, #20
 80061bc:	4618      	mov	r0, r3
 80061be:	f001 f9cb 	bl	8007558 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80061c2:	2301      	movs	r3, #1
 80061c4:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80061c6:	f002 f9f5 	bl	80085b4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80061ca:	f000 fe9f 	bl	8006f0c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80061ce:	f002 f9c1 	bl	8008554 <vPortEnterCritical>
 80061d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80061d4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80061d8:	b25b      	sxtb	r3, r3
 80061da:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80061de:	d103      	bne.n	80061e8 <xQueueGenericSend+0x16c>
 80061e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80061e2:	2200      	movs	r2, #0
 80061e4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80061e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80061ea:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80061ee:	b25b      	sxtb	r3, r3
 80061f0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80061f4:	d103      	bne.n	80061fe <xQueueGenericSend+0x182>
 80061f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80061f8:	2200      	movs	r2, #0
 80061fa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80061fe:	f002 f9d9 	bl	80085b4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006202:	1d3a      	adds	r2, r7, #4
 8006204:	f107 0314 	add.w	r3, r7, #20
 8006208:	4611      	mov	r1, r2
 800620a:	4618      	mov	r0, r3
 800620c:	f001 f9ba 	bl	8007584 <xTaskCheckForTimeOut>
 8006210:	4603      	mov	r3, r0
 8006212:	2b00      	cmp	r3, #0
 8006214:	d124      	bne.n	8006260 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8006216:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006218:	f000 fbc6 	bl	80069a8 <prvIsQueueFull>
 800621c:	4603      	mov	r3, r0
 800621e:	2b00      	cmp	r3, #0
 8006220:	d018      	beq.n	8006254 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8006222:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006224:	3310      	adds	r3, #16
 8006226:	687a      	ldr	r2, [r7, #4]
 8006228:	4611      	mov	r1, r2
 800622a:	4618      	mov	r0, r3
 800622c:	f001 f842 	bl	80072b4 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8006230:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006232:	f000 fb51 	bl	80068d8 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8006236:	f000 fe77 	bl	8006f28 <xTaskResumeAll>
 800623a:	4603      	mov	r3, r0
 800623c:	2b00      	cmp	r3, #0
 800623e:	f47f af7c 	bne.w	800613a <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8006242:	4b0c      	ldr	r3, [pc, #48]	; (8006274 <xQueueGenericSend+0x1f8>)
 8006244:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006248:	601a      	str	r2, [r3, #0]
 800624a:	f3bf 8f4f 	dsb	sy
 800624e:	f3bf 8f6f 	isb	sy
 8006252:	e772      	b.n	800613a <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8006254:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006256:	f000 fb3f 	bl	80068d8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800625a:	f000 fe65 	bl	8006f28 <xTaskResumeAll>
 800625e:	e76c      	b.n	800613a <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8006260:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006262:	f000 fb39 	bl	80068d8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006266:	f000 fe5f 	bl	8006f28 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800626a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800626c:	4618      	mov	r0, r3
 800626e:	3738      	adds	r7, #56	; 0x38
 8006270:	46bd      	mov	sp, r7
 8006272:	bd80      	pop	{r7, pc}
 8006274:	e000ed04 	.word	0xe000ed04

08006278 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8006278:	b580      	push	{r7, lr}
 800627a:	b090      	sub	sp, #64	; 0x40
 800627c:	af00      	add	r7, sp, #0
 800627e:	60f8      	str	r0, [r7, #12]
 8006280:	60b9      	str	r1, [r7, #8]
 8006282:	607a      	str	r2, [r7, #4]
 8006284:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8006286:	68fb      	ldr	r3, [r7, #12]
 8006288:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800628a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800628c:	2b00      	cmp	r3, #0
 800628e:	d10a      	bne.n	80062a6 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8006290:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006294:	f383 8811 	msr	BASEPRI, r3
 8006298:	f3bf 8f6f 	isb	sy
 800629c:	f3bf 8f4f 	dsb	sy
 80062a0:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80062a2:	bf00      	nop
 80062a4:	e7fe      	b.n	80062a4 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80062a6:	68bb      	ldr	r3, [r7, #8]
 80062a8:	2b00      	cmp	r3, #0
 80062aa:	d103      	bne.n	80062b4 <xQueueGenericSendFromISR+0x3c>
 80062ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80062ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80062b0:	2b00      	cmp	r3, #0
 80062b2:	d101      	bne.n	80062b8 <xQueueGenericSendFromISR+0x40>
 80062b4:	2301      	movs	r3, #1
 80062b6:	e000      	b.n	80062ba <xQueueGenericSendFromISR+0x42>
 80062b8:	2300      	movs	r3, #0
 80062ba:	2b00      	cmp	r3, #0
 80062bc:	d10a      	bne.n	80062d4 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 80062be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80062c2:	f383 8811 	msr	BASEPRI, r3
 80062c6:	f3bf 8f6f 	isb	sy
 80062ca:	f3bf 8f4f 	dsb	sy
 80062ce:	627b      	str	r3, [r7, #36]	; 0x24
}
 80062d0:	bf00      	nop
 80062d2:	e7fe      	b.n	80062d2 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80062d4:	683b      	ldr	r3, [r7, #0]
 80062d6:	2b02      	cmp	r3, #2
 80062d8:	d103      	bne.n	80062e2 <xQueueGenericSendFromISR+0x6a>
 80062da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80062dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80062de:	2b01      	cmp	r3, #1
 80062e0:	d101      	bne.n	80062e6 <xQueueGenericSendFromISR+0x6e>
 80062e2:	2301      	movs	r3, #1
 80062e4:	e000      	b.n	80062e8 <xQueueGenericSendFromISR+0x70>
 80062e6:	2300      	movs	r3, #0
 80062e8:	2b00      	cmp	r3, #0
 80062ea:	d10a      	bne.n	8006302 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 80062ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80062f0:	f383 8811 	msr	BASEPRI, r3
 80062f4:	f3bf 8f6f 	isb	sy
 80062f8:	f3bf 8f4f 	dsb	sy
 80062fc:	623b      	str	r3, [r7, #32]
}
 80062fe:	bf00      	nop
 8006300:	e7fe      	b.n	8006300 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8006302:	f002 fa09 	bl	8008718 <vPortValidateInterruptPriority>
	__asm volatile
 8006306:	f3ef 8211 	mrs	r2, BASEPRI
 800630a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800630e:	f383 8811 	msr	BASEPRI, r3
 8006312:	f3bf 8f6f 	isb	sy
 8006316:	f3bf 8f4f 	dsb	sy
 800631a:	61fa      	str	r2, [r7, #28]
 800631c:	61bb      	str	r3, [r7, #24]
	return ulOriginalBASEPRI;
 800631e:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8006320:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8006322:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006324:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006326:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006328:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800632a:	429a      	cmp	r2, r3
 800632c:	d302      	bcc.n	8006334 <xQueueGenericSendFromISR+0xbc>
 800632e:	683b      	ldr	r3, [r7, #0]
 8006330:	2b02      	cmp	r3, #2
 8006332:	d12f      	bne.n	8006394 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8006334:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006336:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800633a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800633e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006340:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006342:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006344:	683a      	ldr	r2, [r7, #0]
 8006346:	68b9      	ldr	r1, [r7, #8]
 8006348:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800634a:	f000 fa35 	bl	80067b8 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800634e:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8006352:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006356:	d112      	bne.n	800637e <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006358:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800635a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800635c:	2b00      	cmp	r3, #0
 800635e:	d016      	beq.n	800638e <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006360:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006362:	3324      	adds	r3, #36	; 0x24
 8006364:	4618      	mov	r0, r3
 8006366:	f001 f831 	bl	80073cc <xTaskRemoveFromEventList>
 800636a:	4603      	mov	r3, r0
 800636c:	2b00      	cmp	r3, #0
 800636e:	d00e      	beq.n	800638e <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	2b00      	cmp	r3, #0
 8006374:	d00b      	beq.n	800638e <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	2201      	movs	r2, #1
 800637a:	601a      	str	r2, [r3, #0]
 800637c:	e007      	b.n	800638e <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800637e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8006382:	3301      	adds	r3, #1
 8006384:	b2db      	uxtb	r3, r3
 8006386:	b25a      	sxtb	r2, r3
 8006388:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800638a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800638e:	2301      	movs	r3, #1
 8006390:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8006392:	e001      	b.n	8006398 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8006394:	2300      	movs	r3, #0
 8006396:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006398:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800639a:	617b      	str	r3, [r7, #20]
	__asm volatile
 800639c:	697b      	ldr	r3, [r7, #20]
 800639e:	f383 8811 	msr	BASEPRI, r3
}
 80063a2:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80063a4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 80063a6:	4618      	mov	r0, r3
 80063a8:	3740      	adds	r7, #64	; 0x40
 80063aa:	46bd      	mov	sp, r7
 80063ac:	bd80      	pop	{r7, pc}
	...

080063b0 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80063b0:	b580      	push	{r7, lr}
 80063b2:	b08c      	sub	sp, #48	; 0x30
 80063b4:	af00      	add	r7, sp, #0
 80063b6:	60f8      	str	r0, [r7, #12]
 80063b8:	60b9      	str	r1, [r7, #8]
 80063ba:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80063bc:	2300      	movs	r3, #0
 80063be:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80063c0:	68fb      	ldr	r3, [r7, #12]
 80063c2:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80063c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80063c6:	2b00      	cmp	r3, #0
 80063c8:	d10a      	bne.n	80063e0 <xQueueReceive+0x30>
	__asm volatile
 80063ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063ce:	f383 8811 	msr	BASEPRI, r3
 80063d2:	f3bf 8f6f 	isb	sy
 80063d6:	f3bf 8f4f 	dsb	sy
 80063da:	623b      	str	r3, [r7, #32]
}
 80063dc:	bf00      	nop
 80063de:	e7fe      	b.n	80063de <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80063e0:	68bb      	ldr	r3, [r7, #8]
 80063e2:	2b00      	cmp	r3, #0
 80063e4:	d103      	bne.n	80063ee <xQueueReceive+0x3e>
 80063e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80063e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80063ea:	2b00      	cmp	r3, #0
 80063ec:	d101      	bne.n	80063f2 <xQueueReceive+0x42>
 80063ee:	2301      	movs	r3, #1
 80063f0:	e000      	b.n	80063f4 <xQueueReceive+0x44>
 80063f2:	2300      	movs	r3, #0
 80063f4:	2b00      	cmp	r3, #0
 80063f6:	d10a      	bne.n	800640e <xQueueReceive+0x5e>
	__asm volatile
 80063f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063fc:	f383 8811 	msr	BASEPRI, r3
 8006400:	f3bf 8f6f 	isb	sy
 8006404:	f3bf 8f4f 	dsb	sy
 8006408:	61fb      	str	r3, [r7, #28]
}
 800640a:	bf00      	nop
 800640c:	e7fe      	b.n	800640c <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800640e:	f001 fa0d 	bl	800782c <xTaskGetSchedulerState>
 8006412:	4603      	mov	r3, r0
 8006414:	2b00      	cmp	r3, #0
 8006416:	d102      	bne.n	800641e <xQueueReceive+0x6e>
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	2b00      	cmp	r3, #0
 800641c:	d101      	bne.n	8006422 <xQueueReceive+0x72>
 800641e:	2301      	movs	r3, #1
 8006420:	e000      	b.n	8006424 <xQueueReceive+0x74>
 8006422:	2300      	movs	r3, #0
 8006424:	2b00      	cmp	r3, #0
 8006426:	d10a      	bne.n	800643e <xQueueReceive+0x8e>
	__asm volatile
 8006428:	f04f 0350 	mov.w	r3, #80	; 0x50
 800642c:	f383 8811 	msr	BASEPRI, r3
 8006430:	f3bf 8f6f 	isb	sy
 8006434:	f3bf 8f4f 	dsb	sy
 8006438:	61bb      	str	r3, [r7, #24]
}
 800643a:	bf00      	nop
 800643c:	e7fe      	b.n	800643c <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800643e:	f002 f889 	bl	8008554 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006442:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006444:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006446:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006448:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800644a:	2b00      	cmp	r3, #0
 800644c:	d01f      	beq.n	800648e <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800644e:	68b9      	ldr	r1, [r7, #8]
 8006450:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006452:	f000 fa1b 	bl	800688c <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8006456:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006458:	1e5a      	subs	r2, r3, #1
 800645a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800645c:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800645e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006460:	691b      	ldr	r3, [r3, #16]
 8006462:	2b00      	cmp	r3, #0
 8006464:	d00f      	beq.n	8006486 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006466:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006468:	3310      	adds	r3, #16
 800646a:	4618      	mov	r0, r3
 800646c:	f000 ffae 	bl	80073cc <xTaskRemoveFromEventList>
 8006470:	4603      	mov	r3, r0
 8006472:	2b00      	cmp	r3, #0
 8006474:	d007      	beq.n	8006486 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8006476:	4b3d      	ldr	r3, [pc, #244]	; (800656c <xQueueReceive+0x1bc>)
 8006478:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800647c:	601a      	str	r2, [r3, #0]
 800647e:	f3bf 8f4f 	dsb	sy
 8006482:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8006486:	f002 f895 	bl	80085b4 <vPortExitCritical>
				return pdPASS;
 800648a:	2301      	movs	r3, #1
 800648c:	e069      	b.n	8006562 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	2b00      	cmp	r3, #0
 8006492:	d103      	bne.n	800649c <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8006494:	f002 f88e 	bl	80085b4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8006498:	2300      	movs	r3, #0
 800649a:	e062      	b.n	8006562 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800649c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800649e:	2b00      	cmp	r3, #0
 80064a0:	d106      	bne.n	80064b0 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80064a2:	f107 0310 	add.w	r3, r7, #16
 80064a6:	4618      	mov	r0, r3
 80064a8:	f001 f856 	bl	8007558 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80064ac:	2301      	movs	r3, #1
 80064ae:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80064b0:	f002 f880 	bl	80085b4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80064b4:	f000 fd2a 	bl	8006f0c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80064b8:	f002 f84c 	bl	8008554 <vPortEnterCritical>
 80064bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80064be:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80064c2:	b25b      	sxtb	r3, r3
 80064c4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80064c8:	d103      	bne.n	80064d2 <xQueueReceive+0x122>
 80064ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80064cc:	2200      	movs	r2, #0
 80064ce:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80064d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80064d4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80064d8:	b25b      	sxtb	r3, r3
 80064da:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80064de:	d103      	bne.n	80064e8 <xQueueReceive+0x138>
 80064e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80064e2:	2200      	movs	r2, #0
 80064e4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80064e8:	f002 f864 	bl	80085b4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80064ec:	1d3a      	adds	r2, r7, #4
 80064ee:	f107 0310 	add.w	r3, r7, #16
 80064f2:	4611      	mov	r1, r2
 80064f4:	4618      	mov	r0, r3
 80064f6:	f001 f845 	bl	8007584 <xTaskCheckForTimeOut>
 80064fa:	4603      	mov	r3, r0
 80064fc:	2b00      	cmp	r3, #0
 80064fe:	d123      	bne.n	8006548 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006500:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006502:	f000 fa3b 	bl	800697c <prvIsQueueEmpty>
 8006506:	4603      	mov	r3, r0
 8006508:	2b00      	cmp	r3, #0
 800650a:	d017      	beq.n	800653c <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800650c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800650e:	3324      	adds	r3, #36	; 0x24
 8006510:	687a      	ldr	r2, [r7, #4]
 8006512:	4611      	mov	r1, r2
 8006514:	4618      	mov	r0, r3
 8006516:	f000 fecd 	bl	80072b4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800651a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800651c:	f000 f9dc 	bl	80068d8 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8006520:	f000 fd02 	bl	8006f28 <xTaskResumeAll>
 8006524:	4603      	mov	r3, r0
 8006526:	2b00      	cmp	r3, #0
 8006528:	d189      	bne.n	800643e <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800652a:	4b10      	ldr	r3, [pc, #64]	; (800656c <xQueueReceive+0x1bc>)
 800652c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006530:	601a      	str	r2, [r3, #0]
 8006532:	f3bf 8f4f 	dsb	sy
 8006536:	f3bf 8f6f 	isb	sy
 800653a:	e780      	b.n	800643e <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800653c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800653e:	f000 f9cb 	bl	80068d8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006542:	f000 fcf1 	bl	8006f28 <xTaskResumeAll>
 8006546:	e77a      	b.n	800643e <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8006548:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800654a:	f000 f9c5 	bl	80068d8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800654e:	f000 fceb 	bl	8006f28 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006552:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006554:	f000 fa12 	bl	800697c <prvIsQueueEmpty>
 8006558:	4603      	mov	r3, r0
 800655a:	2b00      	cmp	r3, #0
 800655c:	f43f af6f 	beq.w	800643e <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8006560:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8006562:	4618      	mov	r0, r3
 8006564:	3730      	adds	r7, #48	; 0x30
 8006566:	46bd      	mov	sp, r7
 8006568:	bd80      	pop	{r7, pc}
 800656a:	bf00      	nop
 800656c:	e000ed04 	.word	0xe000ed04

08006570 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8006570:	b580      	push	{r7, lr}
 8006572:	b08e      	sub	sp, #56	; 0x38
 8006574:	af00      	add	r7, sp, #0
 8006576:	6078      	str	r0, [r7, #4]
 8006578:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800657a:	2300      	movs	r3, #0
 800657c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8006582:	2300      	movs	r3, #0
 8006584:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8006586:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006588:	2b00      	cmp	r3, #0
 800658a:	d10a      	bne.n	80065a2 <xQueueSemaphoreTake+0x32>
	__asm volatile
 800658c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006590:	f383 8811 	msr	BASEPRI, r3
 8006594:	f3bf 8f6f 	isb	sy
 8006598:	f3bf 8f4f 	dsb	sy
 800659c:	623b      	str	r3, [r7, #32]
}
 800659e:	bf00      	nop
 80065a0:	e7fe      	b.n	80065a0 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 80065a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80065a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80065a6:	2b00      	cmp	r3, #0
 80065a8:	d00a      	beq.n	80065c0 <xQueueSemaphoreTake+0x50>
	__asm volatile
 80065aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80065ae:	f383 8811 	msr	BASEPRI, r3
 80065b2:	f3bf 8f6f 	isb	sy
 80065b6:	f3bf 8f4f 	dsb	sy
 80065ba:	61fb      	str	r3, [r7, #28]
}
 80065bc:	bf00      	nop
 80065be:	e7fe      	b.n	80065be <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80065c0:	f001 f934 	bl	800782c <xTaskGetSchedulerState>
 80065c4:	4603      	mov	r3, r0
 80065c6:	2b00      	cmp	r3, #0
 80065c8:	d102      	bne.n	80065d0 <xQueueSemaphoreTake+0x60>
 80065ca:	683b      	ldr	r3, [r7, #0]
 80065cc:	2b00      	cmp	r3, #0
 80065ce:	d101      	bne.n	80065d4 <xQueueSemaphoreTake+0x64>
 80065d0:	2301      	movs	r3, #1
 80065d2:	e000      	b.n	80065d6 <xQueueSemaphoreTake+0x66>
 80065d4:	2300      	movs	r3, #0
 80065d6:	2b00      	cmp	r3, #0
 80065d8:	d10a      	bne.n	80065f0 <xQueueSemaphoreTake+0x80>
	__asm volatile
 80065da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80065de:	f383 8811 	msr	BASEPRI, r3
 80065e2:	f3bf 8f6f 	isb	sy
 80065e6:	f3bf 8f4f 	dsb	sy
 80065ea:	61bb      	str	r3, [r7, #24]
}
 80065ec:	bf00      	nop
 80065ee:	e7fe      	b.n	80065ee <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80065f0:	f001 ffb0 	bl	8008554 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 80065f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80065f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80065f8:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 80065fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065fc:	2b00      	cmp	r3, #0
 80065fe:	d024      	beq.n	800664a <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8006600:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006602:	1e5a      	subs	r2, r3, #1
 8006604:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006606:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8006608:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800660a:	681b      	ldr	r3, [r3, #0]
 800660c:	2b00      	cmp	r3, #0
 800660e:	d104      	bne.n	800661a <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8006610:	f001 fa9a 	bl	8007b48 <pvTaskIncrementMutexHeldCount>
 8006614:	4602      	mov	r2, r0
 8006616:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006618:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800661a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800661c:	691b      	ldr	r3, [r3, #16]
 800661e:	2b00      	cmp	r3, #0
 8006620:	d00f      	beq.n	8006642 <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006622:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006624:	3310      	adds	r3, #16
 8006626:	4618      	mov	r0, r3
 8006628:	f000 fed0 	bl	80073cc <xTaskRemoveFromEventList>
 800662c:	4603      	mov	r3, r0
 800662e:	2b00      	cmp	r3, #0
 8006630:	d007      	beq.n	8006642 <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8006632:	4b54      	ldr	r3, [pc, #336]	; (8006784 <xQueueSemaphoreTake+0x214>)
 8006634:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006638:	601a      	str	r2, [r3, #0]
 800663a:	f3bf 8f4f 	dsb	sy
 800663e:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8006642:	f001 ffb7 	bl	80085b4 <vPortExitCritical>
				return pdPASS;
 8006646:	2301      	movs	r3, #1
 8006648:	e097      	b.n	800677a <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800664a:	683b      	ldr	r3, [r7, #0]
 800664c:	2b00      	cmp	r3, #0
 800664e:	d111      	bne.n	8006674 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8006650:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006652:	2b00      	cmp	r3, #0
 8006654:	d00a      	beq.n	800666c <xQueueSemaphoreTake+0xfc>
	__asm volatile
 8006656:	f04f 0350 	mov.w	r3, #80	; 0x50
 800665a:	f383 8811 	msr	BASEPRI, r3
 800665e:	f3bf 8f6f 	isb	sy
 8006662:	f3bf 8f4f 	dsb	sy
 8006666:	617b      	str	r3, [r7, #20]
}
 8006668:	bf00      	nop
 800666a:	e7fe      	b.n	800666a <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800666c:	f001 ffa2 	bl	80085b4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8006670:	2300      	movs	r3, #0
 8006672:	e082      	b.n	800677a <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006674:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006676:	2b00      	cmp	r3, #0
 8006678:	d106      	bne.n	8006688 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800667a:	f107 030c 	add.w	r3, r7, #12
 800667e:	4618      	mov	r0, r3
 8006680:	f000 ff6a 	bl	8007558 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006684:	2301      	movs	r3, #1
 8006686:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006688:	f001 ff94 	bl	80085b4 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800668c:	f000 fc3e 	bl	8006f0c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006690:	f001 ff60 	bl	8008554 <vPortEnterCritical>
 8006694:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006696:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800669a:	b25b      	sxtb	r3, r3
 800669c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80066a0:	d103      	bne.n	80066aa <xQueueSemaphoreTake+0x13a>
 80066a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80066a4:	2200      	movs	r2, #0
 80066a6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80066aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80066ac:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80066b0:	b25b      	sxtb	r3, r3
 80066b2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80066b6:	d103      	bne.n	80066c0 <xQueueSemaphoreTake+0x150>
 80066b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80066ba:	2200      	movs	r2, #0
 80066bc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80066c0:	f001 ff78 	bl	80085b4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80066c4:	463a      	mov	r2, r7
 80066c6:	f107 030c 	add.w	r3, r7, #12
 80066ca:	4611      	mov	r1, r2
 80066cc:	4618      	mov	r0, r3
 80066ce:	f000 ff59 	bl	8007584 <xTaskCheckForTimeOut>
 80066d2:	4603      	mov	r3, r0
 80066d4:	2b00      	cmp	r3, #0
 80066d6:	d132      	bne.n	800673e <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80066d8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80066da:	f000 f94f 	bl	800697c <prvIsQueueEmpty>
 80066de:	4603      	mov	r3, r0
 80066e0:	2b00      	cmp	r3, #0
 80066e2:	d026      	beq.n	8006732 <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80066e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80066e6:	681b      	ldr	r3, [r3, #0]
 80066e8:	2b00      	cmp	r3, #0
 80066ea:	d109      	bne.n	8006700 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 80066ec:	f001 ff32 	bl	8008554 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 80066f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80066f2:	689b      	ldr	r3, [r3, #8]
 80066f4:	4618      	mov	r0, r3
 80066f6:	f001 f8b7 	bl	8007868 <xTaskPriorityInherit>
 80066fa:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 80066fc:	f001 ff5a 	bl	80085b4 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8006700:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006702:	3324      	adds	r3, #36	; 0x24
 8006704:	683a      	ldr	r2, [r7, #0]
 8006706:	4611      	mov	r1, r2
 8006708:	4618      	mov	r0, r3
 800670a:	f000 fdd3 	bl	80072b4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800670e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006710:	f000 f8e2 	bl	80068d8 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8006714:	f000 fc08 	bl	8006f28 <xTaskResumeAll>
 8006718:	4603      	mov	r3, r0
 800671a:	2b00      	cmp	r3, #0
 800671c:	f47f af68 	bne.w	80065f0 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 8006720:	4b18      	ldr	r3, [pc, #96]	; (8006784 <xQueueSemaphoreTake+0x214>)
 8006722:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006726:	601a      	str	r2, [r3, #0]
 8006728:	f3bf 8f4f 	dsb	sy
 800672c:	f3bf 8f6f 	isb	sy
 8006730:	e75e      	b.n	80065f0 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8006732:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006734:	f000 f8d0 	bl	80068d8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006738:	f000 fbf6 	bl	8006f28 <xTaskResumeAll>
 800673c:	e758      	b.n	80065f0 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800673e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006740:	f000 f8ca 	bl	80068d8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006744:	f000 fbf0 	bl	8006f28 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006748:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800674a:	f000 f917 	bl	800697c <prvIsQueueEmpty>
 800674e:	4603      	mov	r3, r0
 8006750:	2b00      	cmp	r3, #0
 8006752:	f43f af4d 	beq.w	80065f0 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8006756:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006758:	2b00      	cmp	r3, #0
 800675a:	d00d      	beq.n	8006778 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 800675c:	f001 fefa 	bl	8008554 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8006760:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006762:	f000 f811 	bl	8006788 <prvGetDisinheritPriorityAfterTimeout>
 8006766:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8006768:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800676a:	689b      	ldr	r3, [r3, #8]
 800676c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800676e:	4618      	mov	r0, r3
 8006770:	f001 f950 	bl	8007a14 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8006774:	f001 ff1e 	bl	80085b4 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8006778:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800677a:	4618      	mov	r0, r3
 800677c:	3738      	adds	r7, #56	; 0x38
 800677e:	46bd      	mov	sp, r7
 8006780:	bd80      	pop	{r7, pc}
 8006782:	bf00      	nop
 8006784:	e000ed04 	.word	0xe000ed04

08006788 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8006788:	b480      	push	{r7}
 800678a:	b085      	sub	sp, #20
 800678c:	af00      	add	r7, sp, #0
 800678e:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006794:	2b00      	cmp	r3, #0
 8006796:	d006      	beq.n	80067a6 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800679c:	681b      	ldr	r3, [r3, #0]
 800679e:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 80067a2:	60fb      	str	r3, [r7, #12]
 80067a4:	e001      	b.n	80067aa <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 80067a6:	2300      	movs	r3, #0
 80067a8:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 80067aa:	68fb      	ldr	r3, [r7, #12]
	}
 80067ac:	4618      	mov	r0, r3
 80067ae:	3714      	adds	r7, #20
 80067b0:	46bd      	mov	sp, r7
 80067b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067b6:	4770      	bx	lr

080067b8 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80067b8:	b580      	push	{r7, lr}
 80067ba:	b086      	sub	sp, #24
 80067bc:	af00      	add	r7, sp, #0
 80067be:	60f8      	str	r0, [r7, #12]
 80067c0:	60b9      	str	r1, [r7, #8]
 80067c2:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80067c4:	2300      	movs	r3, #0
 80067c6:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80067c8:	68fb      	ldr	r3, [r7, #12]
 80067ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80067cc:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80067ce:	68fb      	ldr	r3, [r7, #12]
 80067d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80067d2:	2b00      	cmp	r3, #0
 80067d4:	d10d      	bne.n	80067f2 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80067d6:	68fb      	ldr	r3, [r7, #12]
 80067d8:	681b      	ldr	r3, [r3, #0]
 80067da:	2b00      	cmp	r3, #0
 80067dc:	d14d      	bne.n	800687a <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80067de:	68fb      	ldr	r3, [r7, #12]
 80067e0:	689b      	ldr	r3, [r3, #8]
 80067e2:	4618      	mov	r0, r3
 80067e4:	f001 f8a8 	bl	8007938 <xTaskPriorityDisinherit>
 80067e8:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80067ea:	68fb      	ldr	r3, [r7, #12]
 80067ec:	2200      	movs	r2, #0
 80067ee:	609a      	str	r2, [r3, #8]
 80067f0:	e043      	b.n	800687a <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	2b00      	cmp	r3, #0
 80067f6:	d119      	bne.n	800682c <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80067f8:	68fb      	ldr	r3, [r7, #12]
 80067fa:	6858      	ldr	r0, [r3, #4]
 80067fc:	68fb      	ldr	r3, [r7, #12]
 80067fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006800:	461a      	mov	r2, r3
 8006802:	68b9      	ldr	r1, [r7, #8]
 8006804:	f002 f9dc 	bl	8008bc0 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8006808:	68fb      	ldr	r3, [r7, #12]
 800680a:	685a      	ldr	r2, [r3, #4]
 800680c:	68fb      	ldr	r3, [r7, #12]
 800680e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006810:	441a      	add	r2, r3
 8006812:	68fb      	ldr	r3, [r7, #12]
 8006814:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8006816:	68fb      	ldr	r3, [r7, #12]
 8006818:	685a      	ldr	r2, [r3, #4]
 800681a:	68fb      	ldr	r3, [r7, #12]
 800681c:	689b      	ldr	r3, [r3, #8]
 800681e:	429a      	cmp	r2, r3
 8006820:	d32b      	bcc.n	800687a <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8006822:	68fb      	ldr	r3, [r7, #12]
 8006824:	681a      	ldr	r2, [r3, #0]
 8006826:	68fb      	ldr	r3, [r7, #12]
 8006828:	605a      	str	r2, [r3, #4]
 800682a:	e026      	b.n	800687a <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800682c:	68fb      	ldr	r3, [r7, #12]
 800682e:	68d8      	ldr	r0, [r3, #12]
 8006830:	68fb      	ldr	r3, [r7, #12]
 8006832:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006834:	461a      	mov	r2, r3
 8006836:	68b9      	ldr	r1, [r7, #8]
 8006838:	f002 f9c2 	bl	8008bc0 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800683c:	68fb      	ldr	r3, [r7, #12]
 800683e:	68da      	ldr	r2, [r3, #12]
 8006840:	68fb      	ldr	r3, [r7, #12]
 8006842:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006844:	425b      	negs	r3, r3
 8006846:	441a      	add	r2, r3
 8006848:	68fb      	ldr	r3, [r7, #12]
 800684a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800684c:	68fb      	ldr	r3, [r7, #12]
 800684e:	68da      	ldr	r2, [r3, #12]
 8006850:	68fb      	ldr	r3, [r7, #12]
 8006852:	681b      	ldr	r3, [r3, #0]
 8006854:	429a      	cmp	r2, r3
 8006856:	d207      	bcs.n	8006868 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8006858:	68fb      	ldr	r3, [r7, #12]
 800685a:	689a      	ldr	r2, [r3, #8]
 800685c:	68fb      	ldr	r3, [r7, #12]
 800685e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006860:	425b      	negs	r3, r3
 8006862:	441a      	add	r2, r3
 8006864:	68fb      	ldr	r3, [r7, #12]
 8006866:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	2b02      	cmp	r3, #2
 800686c:	d105      	bne.n	800687a <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800686e:	693b      	ldr	r3, [r7, #16]
 8006870:	2b00      	cmp	r3, #0
 8006872:	d002      	beq.n	800687a <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8006874:	693b      	ldr	r3, [r7, #16]
 8006876:	3b01      	subs	r3, #1
 8006878:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800687a:	693b      	ldr	r3, [r7, #16]
 800687c:	1c5a      	adds	r2, r3, #1
 800687e:	68fb      	ldr	r3, [r7, #12]
 8006880:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8006882:	697b      	ldr	r3, [r7, #20]
}
 8006884:	4618      	mov	r0, r3
 8006886:	3718      	adds	r7, #24
 8006888:	46bd      	mov	sp, r7
 800688a:	bd80      	pop	{r7, pc}

0800688c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800688c:	b580      	push	{r7, lr}
 800688e:	b082      	sub	sp, #8
 8006890:	af00      	add	r7, sp, #0
 8006892:	6078      	str	r0, [r7, #4]
 8006894:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800689a:	2b00      	cmp	r3, #0
 800689c:	d018      	beq.n	80068d0 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	68da      	ldr	r2, [r3, #12]
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80068a6:	441a      	add	r2, r3
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	68da      	ldr	r2, [r3, #12]
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	689b      	ldr	r3, [r3, #8]
 80068b4:	429a      	cmp	r2, r3
 80068b6:	d303      	bcc.n	80068c0 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	681a      	ldr	r2, [r3, #0]
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	68d9      	ldr	r1, [r3, #12]
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80068c8:	461a      	mov	r2, r3
 80068ca:	6838      	ldr	r0, [r7, #0]
 80068cc:	f002 f978 	bl	8008bc0 <memcpy>
	}
}
 80068d0:	bf00      	nop
 80068d2:	3708      	adds	r7, #8
 80068d4:	46bd      	mov	sp, r7
 80068d6:	bd80      	pop	{r7, pc}

080068d8 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80068d8:	b580      	push	{r7, lr}
 80068da:	b084      	sub	sp, #16
 80068dc:	af00      	add	r7, sp, #0
 80068de:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80068e0:	f001 fe38 	bl	8008554 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80068ea:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80068ec:	e011      	b.n	8006912 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068f2:	2b00      	cmp	r3, #0
 80068f4:	d012      	beq.n	800691c <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	3324      	adds	r3, #36	; 0x24
 80068fa:	4618      	mov	r0, r3
 80068fc:	f000 fd66 	bl	80073cc <xTaskRemoveFromEventList>
 8006900:	4603      	mov	r3, r0
 8006902:	2b00      	cmp	r3, #0
 8006904:	d001      	beq.n	800690a <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8006906:	f000 fe9f 	bl	8007648 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800690a:	7bfb      	ldrb	r3, [r7, #15]
 800690c:	3b01      	subs	r3, #1
 800690e:	b2db      	uxtb	r3, r3
 8006910:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8006912:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006916:	2b00      	cmp	r3, #0
 8006918:	dce9      	bgt.n	80068ee <prvUnlockQueue+0x16>
 800691a:	e000      	b.n	800691e <prvUnlockQueue+0x46>
					break;
 800691c:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	22ff      	movs	r2, #255	; 0xff
 8006922:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8006926:	f001 fe45 	bl	80085b4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800692a:	f001 fe13 	bl	8008554 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006934:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8006936:	e011      	b.n	800695c <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	691b      	ldr	r3, [r3, #16]
 800693c:	2b00      	cmp	r3, #0
 800693e:	d012      	beq.n	8006966 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	3310      	adds	r3, #16
 8006944:	4618      	mov	r0, r3
 8006946:	f000 fd41 	bl	80073cc <xTaskRemoveFromEventList>
 800694a:	4603      	mov	r3, r0
 800694c:	2b00      	cmp	r3, #0
 800694e:	d001      	beq.n	8006954 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8006950:	f000 fe7a 	bl	8007648 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8006954:	7bbb      	ldrb	r3, [r7, #14]
 8006956:	3b01      	subs	r3, #1
 8006958:	b2db      	uxtb	r3, r3
 800695a:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800695c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006960:	2b00      	cmp	r3, #0
 8006962:	dce9      	bgt.n	8006938 <prvUnlockQueue+0x60>
 8006964:	e000      	b.n	8006968 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8006966:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	22ff      	movs	r2, #255	; 0xff
 800696c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8006970:	f001 fe20 	bl	80085b4 <vPortExitCritical>
}
 8006974:	bf00      	nop
 8006976:	3710      	adds	r7, #16
 8006978:	46bd      	mov	sp, r7
 800697a:	bd80      	pop	{r7, pc}

0800697c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800697c:	b580      	push	{r7, lr}
 800697e:	b084      	sub	sp, #16
 8006980:	af00      	add	r7, sp, #0
 8006982:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8006984:	f001 fde6 	bl	8008554 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800698c:	2b00      	cmp	r3, #0
 800698e:	d102      	bne.n	8006996 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8006990:	2301      	movs	r3, #1
 8006992:	60fb      	str	r3, [r7, #12]
 8006994:	e001      	b.n	800699a <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8006996:	2300      	movs	r3, #0
 8006998:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800699a:	f001 fe0b 	bl	80085b4 <vPortExitCritical>

	return xReturn;
 800699e:	68fb      	ldr	r3, [r7, #12]
}
 80069a0:	4618      	mov	r0, r3
 80069a2:	3710      	adds	r7, #16
 80069a4:	46bd      	mov	sp, r7
 80069a6:	bd80      	pop	{r7, pc}

080069a8 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80069a8:	b580      	push	{r7, lr}
 80069aa:	b084      	sub	sp, #16
 80069ac:	af00      	add	r7, sp, #0
 80069ae:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80069b0:	f001 fdd0 	bl	8008554 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80069bc:	429a      	cmp	r2, r3
 80069be:	d102      	bne.n	80069c6 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80069c0:	2301      	movs	r3, #1
 80069c2:	60fb      	str	r3, [r7, #12]
 80069c4:	e001      	b.n	80069ca <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80069c6:	2300      	movs	r3, #0
 80069c8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80069ca:	f001 fdf3 	bl	80085b4 <vPortExitCritical>

	return xReturn;
 80069ce:	68fb      	ldr	r3, [r7, #12]
}
 80069d0:	4618      	mov	r0, r3
 80069d2:	3710      	adds	r7, #16
 80069d4:	46bd      	mov	sp, r7
 80069d6:	bd80      	pop	{r7, pc}

080069d8 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80069d8:	b480      	push	{r7}
 80069da:	b085      	sub	sp, #20
 80069dc:	af00      	add	r7, sp, #0
 80069de:	6078      	str	r0, [r7, #4]
 80069e0:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80069e2:	2300      	movs	r3, #0
 80069e4:	60fb      	str	r3, [r7, #12]
 80069e6:	e014      	b.n	8006a12 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80069e8:	4a0f      	ldr	r2, [pc, #60]	; (8006a28 <vQueueAddToRegistry+0x50>)
 80069ea:	68fb      	ldr	r3, [r7, #12]
 80069ec:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80069f0:	2b00      	cmp	r3, #0
 80069f2:	d10b      	bne.n	8006a0c <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80069f4:	490c      	ldr	r1, [pc, #48]	; (8006a28 <vQueueAddToRegistry+0x50>)
 80069f6:	68fb      	ldr	r3, [r7, #12]
 80069f8:	683a      	ldr	r2, [r7, #0]
 80069fa:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80069fe:	4a0a      	ldr	r2, [pc, #40]	; (8006a28 <vQueueAddToRegistry+0x50>)
 8006a00:	68fb      	ldr	r3, [r7, #12]
 8006a02:	00db      	lsls	r3, r3, #3
 8006a04:	4413      	add	r3, r2
 8006a06:	687a      	ldr	r2, [r7, #4]
 8006a08:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8006a0a:	e006      	b.n	8006a1a <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8006a0c:	68fb      	ldr	r3, [r7, #12]
 8006a0e:	3301      	adds	r3, #1
 8006a10:	60fb      	str	r3, [r7, #12]
 8006a12:	68fb      	ldr	r3, [r7, #12]
 8006a14:	2b07      	cmp	r3, #7
 8006a16:	d9e7      	bls.n	80069e8 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8006a18:	bf00      	nop
 8006a1a:	bf00      	nop
 8006a1c:	3714      	adds	r7, #20
 8006a1e:	46bd      	mov	sp, r7
 8006a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a24:	4770      	bx	lr
 8006a26:	bf00      	nop
 8006a28:	200008ac 	.word	0x200008ac

08006a2c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8006a2c:	b580      	push	{r7, lr}
 8006a2e:	b086      	sub	sp, #24
 8006a30:	af00      	add	r7, sp, #0
 8006a32:	60f8      	str	r0, [r7, #12]
 8006a34:	60b9      	str	r1, [r7, #8]
 8006a36:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8006a38:	68fb      	ldr	r3, [r7, #12]
 8006a3a:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8006a3c:	f001 fd8a 	bl	8008554 <vPortEnterCritical>
 8006a40:	697b      	ldr	r3, [r7, #20]
 8006a42:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006a46:	b25b      	sxtb	r3, r3
 8006a48:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006a4c:	d103      	bne.n	8006a56 <vQueueWaitForMessageRestricted+0x2a>
 8006a4e:	697b      	ldr	r3, [r7, #20]
 8006a50:	2200      	movs	r2, #0
 8006a52:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006a56:	697b      	ldr	r3, [r7, #20]
 8006a58:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006a5c:	b25b      	sxtb	r3, r3
 8006a5e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006a62:	d103      	bne.n	8006a6c <vQueueWaitForMessageRestricted+0x40>
 8006a64:	697b      	ldr	r3, [r7, #20]
 8006a66:	2200      	movs	r2, #0
 8006a68:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006a6c:	f001 fda2 	bl	80085b4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8006a70:	697b      	ldr	r3, [r7, #20]
 8006a72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a74:	2b00      	cmp	r3, #0
 8006a76:	d106      	bne.n	8006a86 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8006a78:	697b      	ldr	r3, [r7, #20]
 8006a7a:	3324      	adds	r3, #36	; 0x24
 8006a7c:	687a      	ldr	r2, [r7, #4]
 8006a7e:	68b9      	ldr	r1, [r7, #8]
 8006a80:	4618      	mov	r0, r3
 8006a82:	f000 fc77 	bl	8007374 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8006a86:	6978      	ldr	r0, [r7, #20]
 8006a88:	f7ff ff26 	bl	80068d8 <prvUnlockQueue>
	}
 8006a8c:	bf00      	nop
 8006a8e:	3718      	adds	r7, #24
 8006a90:	46bd      	mov	sp, r7
 8006a92:	bd80      	pop	{r7, pc}

08006a94 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8006a94:	b580      	push	{r7, lr}
 8006a96:	b08e      	sub	sp, #56	; 0x38
 8006a98:	af04      	add	r7, sp, #16
 8006a9a:	60f8      	str	r0, [r7, #12]
 8006a9c:	60b9      	str	r1, [r7, #8]
 8006a9e:	607a      	str	r2, [r7, #4]
 8006aa0:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8006aa2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006aa4:	2b00      	cmp	r3, #0
 8006aa6:	d10a      	bne.n	8006abe <xTaskCreateStatic+0x2a>
	__asm volatile
 8006aa8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006aac:	f383 8811 	msr	BASEPRI, r3
 8006ab0:	f3bf 8f6f 	isb	sy
 8006ab4:	f3bf 8f4f 	dsb	sy
 8006ab8:	623b      	str	r3, [r7, #32]
}
 8006aba:	bf00      	nop
 8006abc:	e7fe      	b.n	8006abc <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8006abe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ac0:	2b00      	cmp	r3, #0
 8006ac2:	d10a      	bne.n	8006ada <xTaskCreateStatic+0x46>
	__asm volatile
 8006ac4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ac8:	f383 8811 	msr	BASEPRI, r3
 8006acc:	f3bf 8f6f 	isb	sy
 8006ad0:	f3bf 8f4f 	dsb	sy
 8006ad4:	61fb      	str	r3, [r7, #28]
}
 8006ad6:	bf00      	nop
 8006ad8:	e7fe      	b.n	8006ad8 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8006ada:	235c      	movs	r3, #92	; 0x5c
 8006adc:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8006ade:	693b      	ldr	r3, [r7, #16]
 8006ae0:	2b5c      	cmp	r3, #92	; 0x5c
 8006ae2:	d00a      	beq.n	8006afa <xTaskCreateStatic+0x66>
	__asm volatile
 8006ae4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ae8:	f383 8811 	msr	BASEPRI, r3
 8006aec:	f3bf 8f6f 	isb	sy
 8006af0:	f3bf 8f4f 	dsb	sy
 8006af4:	61bb      	str	r3, [r7, #24]
}
 8006af6:	bf00      	nop
 8006af8:	e7fe      	b.n	8006af8 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8006afa:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8006afc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006afe:	2b00      	cmp	r3, #0
 8006b00:	d01e      	beq.n	8006b40 <xTaskCreateStatic+0xac>
 8006b02:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006b04:	2b00      	cmp	r3, #0
 8006b06:	d01b      	beq.n	8006b40 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8006b08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b0a:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8006b0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b0e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006b10:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8006b12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b14:	2202      	movs	r2, #2
 8006b16:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8006b1a:	2300      	movs	r3, #0
 8006b1c:	9303      	str	r3, [sp, #12]
 8006b1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b20:	9302      	str	r3, [sp, #8]
 8006b22:	f107 0314 	add.w	r3, r7, #20
 8006b26:	9301      	str	r3, [sp, #4]
 8006b28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b2a:	9300      	str	r3, [sp, #0]
 8006b2c:	683b      	ldr	r3, [r7, #0]
 8006b2e:	687a      	ldr	r2, [r7, #4]
 8006b30:	68b9      	ldr	r1, [r7, #8]
 8006b32:	68f8      	ldr	r0, [r7, #12]
 8006b34:	f000 f850 	bl	8006bd8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006b38:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006b3a:	f000 f8dd 	bl	8006cf8 <prvAddNewTaskToReadyList>
 8006b3e:	e001      	b.n	8006b44 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8006b40:	2300      	movs	r3, #0
 8006b42:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8006b44:	697b      	ldr	r3, [r7, #20]
	}
 8006b46:	4618      	mov	r0, r3
 8006b48:	3728      	adds	r7, #40	; 0x28
 8006b4a:	46bd      	mov	sp, r7
 8006b4c:	bd80      	pop	{r7, pc}

08006b4e <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8006b4e:	b580      	push	{r7, lr}
 8006b50:	b08c      	sub	sp, #48	; 0x30
 8006b52:	af04      	add	r7, sp, #16
 8006b54:	60f8      	str	r0, [r7, #12]
 8006b56:	60b9      	str	r1, [r7, #8]
 8006b58:	603b      	str	r3, [r7, #0]
 8006b5a:	4613      	mov	r3, r2
 8006b5c:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8006b5e:	88fb      	ldrh	r3, [r7, #6]
 8006b60:	009b      	lsls	r3, r3, #2
 8006b62:	4618      	mov	r0, r3
 8006b64:	f001 fe18 	bl	8008798 <pvPortMalloc>
 8006b68:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8006b6a:	697b      	ldr	r3, [r7, #20]
 8006b6c:	2b00      	cmp	r3, #0
 8006b6e:	d00e      	beq.n	8006b8e <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8006b70:	205c      	movs	r0, #92	; 0x5c
 8006b72:	f001 fe11 	bl	8008798 <pvPortMalloc>
 8006b76:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8006b78:	69fb      	ldr	r3, [r7, #28]
 8006b7a:	2b00      	cmp	r3, #0
 8006b7c:	d003      	beq.n	8006b86 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8006b7e:	69fb      	ldr	r3, [r7, #28]
 8006b80:	697a      	ldr	r2, [r7, #20]
 8006b82:	631a      	str	r2, [r3, #48]	; 0x30
 8006b84:	e005      	b.n	8006b92 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8006b86:	6978      	ldr	r0, [r7, #20]
 8006b88:	f001 fed2 	bl	8008930 <vPortFree>
 8006b8c:	e001      	b.n	8006b92 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8006b8e:	2300      	movs	r3, #0
 8006b90:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8006b92:	69fb      	ldr	r3, [r7, #28]
 8006b94:	2b00      	cmp	r3, #0
 8006b96:	d017      	beq.n	8006bc8 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8006b98:	69fb      	ldr	r3, [r7, #28]
 8006b9a:	2200      	movs	r2, #0
 8006b9c:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8006ba0:	88fa      	ldrh	r2, [r7, #6]
 8006ba2:	2300      	movs	r3, #0
 8006ba4:	9303      	str	r3, [sp, #12]
 8006ba6:	69fb      	ldr	r3, [r7, #28]
 8006ba8:	9302      	str	r3, [sp, #8]
 8006baa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006bac:	9301      	str	r3, [sp, #4]
 8006bae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006bb0:	9300      	str	r3, [sp, #0]
 8006bb2:	683b      	ldr	r3, [r7, #0]
 8006bb4:	68b9      	ldr	r1, [r7, #8]
 8006bb6:	68f8      	ldr	r0, [r7, #12]
 8006bb8:	f000 f80e 	bl	8006bd8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006bbc:	69f8      	ldr	r0, [r7, #28]
 8006bbe:	f000 f89b 	bl	8006cf8 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8006bc2:	2301      	movs	r3, #1
 8006bc4:	61bb      	str	r3, [r7, #24]
 8006bc6:	e002      	b.n	8006bce <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8006bc8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006bcc:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8006bce:	69bb      	ldr	r3, [r7, #24]
	}
 8006bd0:	4618      	mov	r0, r3
 8006bd2:	3720      	adds	r7, #32
 8006bd4:	46bd      	mov	sp, r7
 8006bd6:	bd80      	pop	{r7, pc}

08006bd8 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8006bd8:	b580      	push	{r7, lr}
 8006bda:	b088      	sub	sp, #32
 8006bdc:	af00      	add	r7, sp, #0
 8006bde:	60f8      	str	r0, [r7, #12]
 8006be0:	60b9      	str	r1, [r7, #8]
 8006be2:	607a      	str	r2, [r7, #4]
 8006be4:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8006be6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006be8:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	009b      	lsls	r3, r3, #2
 8006bee:	461a      	mov	r2, r3
 8006bf0:	21a5      	movs	r1, #165	; 0xa5
 8006bf2:	f001 fff3 	bl	8008bdc <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8006bf6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006bf8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8006c00:	3b01      	subs	r3, #1
 8006c02:	009b      	lsls	r3, r3, #2
 8006c04:	4413      	add	r3, r2
 8006c06:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8006c08:	69bb      	ldr	r3, [r7, #24]
 8006c0a:	f023 0307 	bic.w	r3, r3, #7
 8006c0e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8006c10:	69bb      	ldr	r3, [r7, #24]
 8006c12:	f003 0307 	and.w	r3, r3, #7
 8006c16:	2b00      	cmp	r3, #0
 8006c18:	d00a      	beq.n	8006c30 <prvInitialiseNewTask+0x58>
	__asm volatile
 8006c1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c1e:	f383 8811 	msr	BASEPRI, r3
 8006c22:	f3bf 8f6f 	isb	sy
 8006c26:	f3bf 8f4f 	dsb	sy
 8006c2a:	617b      	str	r3, [r7, #20]
}
 8006c2c:	bf00      	nop
 8006c2e:	e7fe      	b.n	8006c2e <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8006c30:	68bb      	ldr	r3, [r7, #8]
 8006c32:	2b00      	cmp	r3, #0
 8006c34:	d01f      	beq.n	8006c76 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006c36:	2300      	movs	r3, #0
 8006c38:	61fb      	str	r3, [r7, #28]
 8006c3a:	e012      	b.n	8006c62 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8006c3c:	68ba      	ldr	r2, [r7, #8]
 8006c3e:	69fb      	ldr	r3, [r7, #28]
 8006c40:	4413      	add	r3, r2
 8006c42:	7819      	ldrb	r1, [r3, #0]
 8006c44:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006c46:	69fb      	ldr	r3, [r7, #28]
 8006c48:	4413      	add	r3, r2
 8006c4a:	3334      	adds	r3, #52	; 0x34
 8006c4c:	460a      	mov	r2, r1
 8006c4e:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8006c50:	68ba      	ldr	r2, [r7, #8]
 8006c52:	69fb      	ldr	r3, [r7, #28]
 8006c54:	4413      	add	r3, r2
 8006c56:	781b      	ldrb	r3, [r3, #0]
 8006c58:	2b00      	cmp	r3, #0
 8006c5a:	d006      	beq.n	8006c6a <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006c5c:	69fb      	ldr	r3, [r7, #28]
 8006c5e:	3301      	adds	r3, #1
 8006c60:	61fb      	str	r3, [r7, #28]
 8006c62:	69fb      	ldr	r3, [r7, #28]
 8006c64:	2b0f      	cmp	r3, #15
 8006c66:	d9e9      	bls.n	8006c3c <prvInitialiseNewTask+0x64>
 8006c68:	e000      	b.n	8006c6c <prvInitialiseNewTask+0x94>
			{
				break;
 8006c6a:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8006c6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c6e:	2200      	movs	r2, #0
 8006c70:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006c74:	e003      	b.n	8006c7e <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8006c76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c78:	2200      	movs	r2, #0
 8006c7a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8006c7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c80:	2b37      	cmp	r3, #55	; 0x37
 8006c82:	d901      	bls.n	8006c88 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8006c84:	2337      	movs	r3, #55	; 0x37
 8006c86:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8006c88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c8a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006c8c:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8006c8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c90:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006c92:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8006c94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c96:	2200      	movs	r2, #0
 8006c98:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8006c9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c9c:	3304      	adds	r3, #4
 8006c9e:	4618      	mov	r0, r3
 8006ca0:	f7fe ff64 	bl	8005b6c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8006ca4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ca6:	3318      	adds	r3, #24
 8006ca8:	4618      	mov	r0, r3
 8006caa:	f7fe ff5f 	bl	8005b6c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8006cae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006cb0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006cb2:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006cb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006cb6:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8006cba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006cbc:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8006cbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006cc0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006cc2:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8006cc4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006cc6:	2200      	movs	r2, #0
 8006cc8:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8006cca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ccc:	2200      	movs	r2, #0
 8006cce:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8006cd2:	683a      	ldr	r2, [r7, #0]
 8006cd4:	68f9      	ldr	r1, [r7, #12]
 8006cd6:	69b8      	ldr	r0, [r7, #24]
 8006cd8:	f001 fb0c 	bl	80082f4 <pxPortInitialiseStack>
 8006cdc:	4602      	mov	r2, r0
 8006cde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ce0:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8006ce2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ce4:	2b00      	cmp	r3, #0
 8006ce6:	d002      	beq.n	8006cee <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8006ce8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006cea:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006cec:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006cee:	bf00      	nop
 8006cf0:	3720      	adds	r7, #32
 8006cf2:	46bd      	mov	sp, r7
 8006cf4:	bd80      	pop	{r7, pc}
	...

08006cf8 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8006cf8:	b580      	push	{r7, lr}
 8006cfa:	b082      	sub	sp, #8
 8006cfc:	af00      	add	r7, sp, #0
 8006cfe:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8006d00:	f001 fc28 	bl	8008554 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8006d04:	4b2d      	ldr	r3, [pc, #180]	; (8006dbc <prvAddNewTaskToReadyList+0xc4>)
 8006d06:	681b      	ldr	r3, [r3, #0]
 8006d08:	3301      	adds	r3, #1
 8006d0a:	4a2c      	ldr	r2, [pc, #176]	; (8006dbc <prvAddNewTaskToReadyList+0xc4>)
 8006d0c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8006d0e:	4b2c      	ldr	r3, [pc, #176]	; (8006dc0 <prvAddNewTaskToReadyList+0xc8>)
 8006d10:	681b      	ldr	r3, [r3, #0]
 8006d12:	2b00      	cmp	r3, #0
 8006d14:	d109      	bne.n	8006d2a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8006d16:	4a2a      	ldr	r2, [pc, #168]	; (8006dc0 <prvAddNewTaskToReadyList+0xc8>)
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8006d1c:	4b27      	ldr	r3, [pc, #156]	; (8006dbc <prvAddNewTaskToReadyList+0xc4>)
 8006d1e:	681b      	ldr	r3, [r3, #0]
 8006d20:	2b01      	cmp	r3, #1
 8006d22:	d110      	bne.n	8006d46 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8006d24:	f000 fcb4 	bl	8007690 <prvInitialiseTaskLists>
 8006d28:	e00d      	b.n	8006d46 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8006d2a:	4b26      	ldr	r3, [pc, #152]	; (8006dc4 <prvAddNewTaskToReadyList+0xcc>)
 8006d2c:	681b      	ldr	r3, [r3, #0]
 8006d2e:	2b00      	cmp	r3, #0
 8006d30:	d109      	bne.n	8006d46 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8006d32:	4b23      	ldr	r3, [pc, #140]	; (8006dc0 <prvAddNewTaskToReadyList+0xc8>)
 8006d34:	681b      	ldr	r3, [r3, #0]
 8006d36:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d3c:	429a      	cmp	r2, r3
 8006d3e:	d802      	bhi.n	8006d46 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8006d40:	4a1f      	ldr	r2, [pc, #124]	; (8006dc0 <prvAddNewTaskToReadyList+0xc8>)
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8006d46:	4b20      	ldr	r3, [pc, #128]	; (8006dc8 <prvAddNewTaskToReadyList+0xd0>)
 8006d48:	681b      	ldr	r3, [r3, #0]
 8006d4a:	3301      	adds	r3, #1
 8006d4c:	4a1e      	ldr	r2, [pc, #120]	; (8006dc8 <prvAddNewTaskToReadyList+0xd0>)
 8006d4e:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8006d50:	4b1d      	ldr	r3, [pc, #116]	; (8006dc8 <prvAddNewTaskToReadyList+0xd0>)
 8006d52:	681a      	ldr	r2, [r3, #0]
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006d5c:	4b1b      	ldr	r3, [pc, #108]	; (8006dcc <prvAddNewTaskToReadyList+0xd4>)
 8006d5e:	681b      	ldr	r3, [r3, #0]
 8006d60:	429a      	cmp	r2, r3
 8006d62:	d903      	bls.n	8006d6c <prvAddNewTaskToReadyList+0x74>
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d68:	4a18      	ldr	r2, [pc, #96]	; (8006dcc <prvAddNewTaskToReadyList+0xd4>)
 8006d6a:	6013      	str	r3, [r2, #0]
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006d70:	4613      	mov	r3, r2
 8006d72:	009b      	lsls	r3, r3, #2
 8006d74:	4413      	add	r3, r2
 8006d76:	009b      	lsls	r3, r3, #2
 8006d78:	4a15      	ldr	r2, [pc, #84]	; (8006dd0 <prvAddNewTaskToReadyList+0xd8>)
 8006d7a:	441a      	add	r2, r3
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	3304      	adds	r3, #4
 8006d80:	4619      	mov	r1, r3
 8006d82:	4610      	mov	r0, r2
 8006d84:	f7fe feff 	bl	8005b86 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8006d88:	f001 fc14 	bl	80085b4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8006d8c:	4b0d      	ldr	r3, [pc, #52]	; (8006dc4 <prvAddNewTaskToReadyList+0xcc>)
 8006d8e:	681b      	ldr	r3, [r3, #0]
 8006d90:	2b00      	cmp	r3, #0
 8006d92:	d00e      	beq.n	8006db2 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8006d94:	4b0a      	ldr	r3, [pc, #40]	; (8006dc0 <prvAddNewTaskToReadyList+0xc8>)
 8006d96:	681b      	ldr	r3, [r3, #0]
 8006d98:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d9e:	429a      	cmp	r2, r3
 8006da0:	d207      	bcs.n	8006db2 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8006da2:	4b0c      	ldr	r3, [pc, #48]	; (8006dd4 <prvAddNewTaskToReadyList+0xdc>)
 8006da4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006da8:	601a      	str	r2, [r3, #0]
 8006daa:	f3bf 8f4f 	dsb	sy
 8006dae:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006db2:	bf00      	nop
 8006db4:	3708      	adds	r7, #8
 8006db6:	46bd      	mov	sp, r7
 8006db8:	bd80      	pop	{r7, pc}
 8006dba:	bf00      	nop
 8006dbc:	20000dc0 	.word	0x20000dc0
 8006dc0:	200008ec 	.word	0x200008ec
 8006dc4:	20000dcc 	.word	0x20000dcc
 8006dc8:	20000ddc 	.word	0x20000ddc
 8006dcc:	20000dc8 	.word	0x20000dc8
 8006dd0:	200008f0 	.word	0x200008f0
 8006dd4:	e000ed04 	.word	0xe000ed04

08006dd8 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8006dd8:	b580      	push	{r7, lr}
 8006dda:	b084      	sub	sp, #16
 8006ddc:	af00      	add	r7, sp, #0
 8006dde:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8006de0:	2300      	movs	r3, #0
 8006de2:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	2b00      	cmp	r3, #0
 8006de8:	d017      	beq.n	8006e1a <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8006dea:	4b13      	ldr	r3, [pc, #76]	; (8006e38 <vTaskDelay+0x60>)
 8006dec:	681b      	ldr	r3, [r3, #0]
 8006dee:	2b00      	cmp	r3, #0
 8006df0:	d00a      	beq.n	8006e08 <vTaskDelay+0x30>
	__asm volatile
 8006df2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006df6:	f383 8811 	msr	BASEPRI, r3
 8006dfa:	f3bf 8f6f 	isb	sy
 8006dfe:	f3bf 8f4f 	dsb	sy
 8006e02:	60bb      	str	r3, [r7, #8]
}
 8006e04:	bf00      	nop
 8006e06:	e7fe      	b.n	8006e06 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8006e08:	f000 f880 	bl	8006f0c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8006e0c:	2100      	movs	r1, #0
 8006e0e:	6878      	ldr	r0, [r7, #4]
 8006e10:	f000 feae 	bl	8007b70 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8006e14:	f000 f888 	bl	8006f28 <xTaskResumeAll>
 8006e18:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8006e1a:	68fb      	ldr	r3, [r7, #12]
 8006e1c:	2b00      	cmp	r3, #0
 8006e1e:	d107      	bne.n	8006e30 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8006e20:	4b06      	ldr	r3, [pc, #24]	; (8006e3c <vTaskDelay+0x64>)
 8006e22:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006e26:	601a      	str	r2, [r3, #0]
 8006e28:	f3bf 8f4f 	dsb	sy
 8006e2c:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8006e30:	bf00      	nop
 8006e32:	3710      	adds	r7, #16
 8006e34:	46bd      	mov	sp, r7
 8006e36:	bd80      	pop	{r7, pc}
 8006e38:	20000de8 	.word	0x20000de8
 8006e3c:	e000ed04 	.word	0xe000ed04

08006e40 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8006e40:	b580      	push	{r7, lr}
 8006e42:	b08a      	sub	sp, #40	; 0x28
 8006e44:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8006e46:	2300      	movs	r3, #0
 8006e48:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8006e4a:	2300      	movs	r3, #0
 8006e4c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8006e4e:	463a      	mov	r2, r7
 8006e50:	1d39      	adds	r1, r7, #4
 8006e52:	f107 0308 	add.w	r3, r7, #8
 8006e56:	4618      	mov	r0, r3
 8006e58:	f7fe fbc8 	bl	80055ec <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8006e5c:	6839      	ldr	r1, [r7, #0]
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	68ba      	ldr	r2, [r7, #8]
 8006e62:	9202      	str	r2, [sp, #8]
 8006e64:	9301      	str	r3, [sp, #4]
 8006e66:	2300      	movs	r3, #0
 8006e68:	9300      	str	r3, [sp, #0]
 8006e6a:	2300      	movs	r3, #0
 8006e6c:	460a      	mov	r2, r1
 8006e6e:	4921      	ldr	r1, [pc, #132]	; (8006ef4 <vTaskStartScheduler+0xb4>)
 8006e70:	4821      	ldr	r0, [pc, #132]	; (8006ef8 <vTaskStartScheduler+0xb8>)
 8006e72:	f7ff fe0f 	bl	8006a94 <xTaskCreateStatic>
 8006e76:	4603      	mov	r3, r0
 8006e78:	4a20      	ldr	r2, [pc, #128]	; (8006efc <vTaskStartScheduler+0xbc>)
 8006e7a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8006e7c:	4b1f      	ldr	r3, [pc, #124]	; (8006efc <vTaskStartScheduler+0xbc>)
 8006e7e:	681b      	ldr	r3, [r3, #0]
 8006e80:	2b00      	cmp	r3, #0
 8006e82:	d002      	beq.n	8006e8a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8006e84:	2301      	movs	r3, #1
 8006e86:	617b      	str	r3, [r7, #20]
 8006e88:	e001      	b.n	8006e8e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8006e8a:	2300      	movs	r3, #0
 8006e8c:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8006e8e:	697b      	ldr	r3, [r7, #20]
 8006e90:	2b01      	cmp	r3, #1
 8006e92:	d102      	bne.n	8006e9a <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8006e94:	f000 fec0 	bl	8007c18 <xTimerCreateTimerTask>
 8006e98:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8006e9a:	697b      	ldr	r3, [r7, #20]
 8006e9c:	2b01      	cmp	r3, #1
 8006e9e:	d116      	bne.n	8006ece <vTaskStartScheduler+0x8e>
	__asm volatile
 8006ea0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ea4:	f383 8811 	msr	BASEPRI, r3
 8006ea8:	f3bf 8f6f 	isb	sy
 8006eac:	f3bf 8f4f 	dsb	sy
 8006eb0:	613b      	str	r3, [r7, #16]
}
 8006eb2:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8006eb4:	4b12      	ldr	r3, [pc, #72]	; (8006f00 <vTaskStartScheduler+0xc0>)
 8006eb6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006eba:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8006ebc:	4b11      	ldr	r3, [pc, #68]	; (8006f04 <vTaskStartScheduler+0xc4>)
 8006ebe:	2201      	movs	r2, #1
 8006ec0:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8006ec2:	4b11      	ldr	r3, [pc, #68]	; (8006f08 <vTaskStartScheduler+0xc8>)
 8006ec4:	2200      	movs	r2, #0
 8006ec6:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8006ec8:	f001 faa2 	bl	8008410 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8006ecc:	e00e      	b.n	8006eec <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8006ece:	697b      	ldr	r3, [r7, #20]
 8006ed0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006ed4:	d10a      	bne.n	8006eec <vTaskStartScheduler+0xac>
	__asm volatile
 8006ed6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006eda:	f383 8811 	msr	BASEPRI, r3
 8006ede:	f3bf 8f6f 	isb	sy
 8006ee2:	f3bf 8f4f 	dsb	sy
 8006ee6:	60fb      	str	r3, [r7, #12]
}
 8006ee8:	bf00      	nop
 8006eea:	e7fe      	b.n	8006eea <vTaskStartScheduler+0xaa>
}
 8006eec:	bf00      	nop
 8006eee:	3718      	adds	r7, #24
 8006ef0:	46bd      	mov	sp, r7
 8006ef2:	bd80      	pop	{r7, pc}
 8006ef4:	0800a64c 	.word	0x0800a64c
 8006ef8:	08007661 	.word	0x08007661
 8006efc:	20000de4 	.word	0x20000de4
 8006f00:	20000de0 	.word	0x20000de0
 8006f04:	20000dcc 	.word	0x20000dcc
 8006f08:	20000dc4 	.word	0x20000dc4

08006f0c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8006f0c:	b480      	push	{r7}
 8006f0e:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8006f10:	4b04      	ldr	r3, [pc, #16]	; (8006f24 <vTaskSuspendAll+0x18>)
 8006f12:	681b      	ldr	r3, [r3, #0]
 8006f14:	3301      	adds	r3, #1
 8006f16:	4a03      	ldr	r2, [pc, #12]	; (8006f24 <vTaskSuspendAll+0x18>)
 8006f18:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8006f1a:	bf00      	nop
 8006f1c:	46bd      	mov	sp, r7
 8006f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f22:	4770      	bx	lr
 8006f24:	20000de8 	.word	0x20000de8

08006f28 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8006f28:	b580      	push	{r7, lr}
 8006f2a:	b084      	sub	sp, #16
 8006f2c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8006f2e:	2300      	movs	r3, #0
 8006f30:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8006f32:	2300      	movs	r3, #0
 8006f34:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8006f36:	4b42      	ldr	r3, [pc, #264]	; (8007040 <xTaskResumeAll+0x118>)
 8006f38:	681b      	ldr	r3, [r3, #0]
 8006f3a:	2b00      	cmp	r3, #0
 8006f3c:	d10a      	bne.n	8006f54 <xTaskResumeAll+0x2c>
	__asm volatile
 8006f3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f42:	f383 8811 	msr	BASEPRI, r3
 8006f46:	f3bf 8f6f 	isb	sy
 8006f4a:	f3bf 8f4f 	dsb	sy
 8006f4e:	603b      	str	r3, [r7, #0]
}
 8006f50:	bf00      	nop
 8006f52:	e7fe      	b.n	8006f52 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8006f54:	f001 fafe 	bl	8008554 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8006f58:	4b39      	ldr	r3, [pc, #228]	; (8007040 <xTaskResumeAll+0x118>)
 8006f5a:	681b      	ldr	r3, [r3, #0]
 8006f5c:	3b01      	subs	r3, #1
 8006f5e:	4a38      	ldr	r2, [pc, #224]	; (8007040 <xTaskResumeAll+0x118>)
 8006f60:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006f62:	4b37      	ldr	r3, [pc, #220]	; (8007040 <xTaskResumeAll+0x118>)
 8006f64:	681b      	ldr	r3, [r3, #0]
 8006f66:	2b00      	cmp	r3, #0
 8006f68:	d162      	bne.n	8007030 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8006f6a:	4b36      	ldr	r3, [pc, #216]	; (8007044 <xTaskResumeAll+0x11c>)
 8006f6c:	681b      	ldr	r3, [r3, #0]
 8006f6e:	2b00      	cmp	r3, #0
 8006f70:	d05e      	beq.n	8007030 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006f72:	e02f      	b.n	8006fd4 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006f74:	4b34      	ldr	r3, [pc, #208]	; (8007048 <xTaskResumeAll+0x120>)
 8006f76:	68db      	ldr	r3, [r3, #12]
 8006f78:	68db      	ldr	r3, [r3, #12]
 8006f7a:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006f7c:	68fb      	ldr	r3, [r7, #12]
 8006f7e:	3318      	adds	r3, #24
 8006f80:	4618      	mov	r0, r3
 8006f82:	f7fe fe5d 	bl	8005c40 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006f86:	68fb      	ldr	r3, [r7, #12]
 8006f88:	3304      	adds	r3, #4
 8006f8a:	4618      	mov	r0, r3
 8006f8c:	f7fe fe58 	bl	8005c40 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8006f90:	68fb      	ldr	r3, [r7, #12]
 8006f92:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006f94:	4b2d      	ldr	r3, [pc, #180]	; (800704c <xTaskResumeAll+0x124>)
 8006f96:	681b      	ldr	r3, [r3, #0]
 8006f98:	429a      	cmp	r2, r3
 8006f9a:	d903      	bls.n	8006fa4 <xTaskResumeAll+0x7c>
 8006f9c:	68fb      	ldr	r3, [r7, #12]
 8006f9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006fa0:	4a2a      	ldr	r2, [pc, #168]	; (800704c <xTaskResumeAll+0x124>)
 8006fa2:	6013      	str	r3, [r2, #0]
 8006fa4:	68fb      	ldr	r3, [r7, #12]
 8006fa6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006fa8:	4613      	mov	r3, r2
 8006faa:	009b      	lsls	r3, r3, #2
 8006fac:	4413      	add	r3, r2
 8006fae:	009b      	lsls	r3, r3, #2
 8006fb0:	4a27      	ldr	r2, [pc, #156]	; (8007050 <xTaskResumeAll+0x128>)
 8006fb2:	441a      	add	r2, r3
 8006fb4:	68fb      	ldr	r3, [r7, #12]
 8006fb6:	3304      	adds	r3, #4
 8006fb8:	4619      	mov	r1, r3
 8006fba:	4610      	mov	r0, r2
 8006fbc:	f7fe fde3 	bl	8005b86 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006fc0:	68fb      	ldr	r3, [r7, #12]
 8006fc2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006fc4:	4b23      	ldr	r3, [pc, #140]	; (8007054 <xTaskResumeAll+0x12c>)
 8006fc6:	681b      	ldr	r3, [r3, #0]
 8006fc8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006fca:	429a      	cmp	r2, r3
 8006fcc:	d302      	bcc.n	8006fd4 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8006fce:	4b22      	ldr	r3, [pc, #136]	; (8007058 <xTaskResumeAll+0x130>)
 8006fd0:	2201      	movs	r2, #1
 8006fd2:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006fd4:	4b1c      	ldr	r3, [pc, #112]	; (8007048 <xTaskResumeAll+0x120>)
 8006fd6:	681b      	ldr	r3, [r3, #0]
 8006fd8:	2b00      	cmp	r3, #0
 8006fda:	d1cb      	bne.n	8006f74 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8006fdc:	68fb      	ldr	r3, [r7, #12]
 8006fde:	2b00      	cmp	r3, #0
 8006fe0:	d001      	beq.n	8006fe6 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8006fe2:	f000 fbf3 	bl	80077cc <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8006fe6:	4b1d      	ldr	r3, [pc, #116]	; (800705c <xTaskResumeAll+0x134>)
 8006fe8:	681b      	ldr	r3, [r3, #0]
 8006fea:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	2b00      	cmp	r3, #0
 8006ff0:	d010      	beq.n	8007014 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8006ff2:	f000 f847 	bl	8007084 <xTaskIncrementTick>
 8006ff6:	4603      	mov	r3, r0
 8006ff8:	2b00      	cmp	r3, #0
 8006ffa:	d002      	beq.n	8007002 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8006ffc:	4b16      	ldr	r3, [pc, #88]	; (8007058 <xTaskResumeAll+0x130>)
 8006ffe:	2201      	movs	r2, #1
 8007000:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	3b01      	subs	r3, #1
 8007006:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	2b00      	cmp	r3, #0
 800700c:	d1f1      	bne.n	8006ff2 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800700e:	4b13      	ldr	r3, [pc, #76]	; (800705c <xTaskResumeAll+0x134>)
 8007010:	2200      	movs	r2, #0
 8007012:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8007014:	4b10      	ldr	r3, [pc, #64]	; (8007058 <xTaskResumeAll+0x130>)
 8007016:	681b      	ldr	r3, [r3, #0]
 8007018:	2b00      	cmp	r3, #0
 800701a:	d009      	beq.n	8007030 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800701c:	2301      	movs	r3, #1
 800701e:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8007020:	4b0f      	ldr	r3, [pc, #60]	; (8007060 <xTaskResumeAll+0x138>)
 8007022:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007026:	601a      	str	r2, [r3, #0]
 8007028:	f3bf 8f4f 	dsb	sy
 800702c:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8007030:	f001 fac0 	bl	80085b4 <vPortExitCritical>

	return xAlreadyYielded;
 8007034:	68bb      	ldr	r3, [r7, #8]
}
 8007036:	4618      	mov	r0, r3
 8007038:	3710      	adds	r7, #16
 800703a:	46bd      	mov	sp, r7
 800703c:	bd80      	pop	{r7, pc}
 800703e:	bf00      	nop
 8007040:	20000de8 	.word	0x20000de8
 8007044:	20000dc0 	.word	0x20000dc0
 8007048:	20000d80 	.word	0x20000d80
 800704c:	20000dc8 	.word	0x20000dc8
 8007050:	200008f0 	.word	0x200008f0
 8007054:	200008ec 	.word	0x200008ec
 8007058:	20000dd4 	.word	0x20000dd4
 800705c:	20000dd0 	.word	0x20000dd0
 8007060:	e000ed04 	.word	0xe000ed04

08007064 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8007064:	b480      	push	{r7}
 8007066:	b083      	sub	sp, #12
 8007068:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800706a:	4b05      	ldr	r3, [pc, #20]	; (8007080 <xTaskGetTickCount+0x1c>)
 800706c:	681b      	ldr	r3, [r3, #0]
 800706e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8007070:	687b      	ldr	r3, [r7, #4]
}
 8007072:	4618      	mov	r0, r3
 8007074:	370c      	adds	r7, #12
 8007076:	46bd      	mov	sp, r7
 8007078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800707c:	4770      	bx	lr
 800707e:	bf00      	nop
 8007080:	20000dc4 	.word	0x20000dc4

08007084 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8007084:	b580      	push	{r7, lr}
 8007086:	b086      	sub	sp, #24
 8007088:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800708a:	2300      	movs	r3, #0
 800708c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800708e:	4b4f      	ldr	r3, [pc, #316]	; (80071cc <xTaskIncrementTick+0x148>)
 8007090:	681b      	ldr	r3, [r3, #0]
 8007092:	2b00      	cmp	r3, #0
 8007094:	f040 808f 	bne.w	80071b6 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8007098:	4b4d      	ldr	r3, [pc, #308]	; (80071d0 <xTaskIncrementTick+0x14c>)
 800709a:	681b      	ldr	r3, [r3, #0]
 800709c:	3301      	adds	r3, #1
 800709e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80070a0:	4a4b      	ldr	r2, [pc, #300]	; (80071d0 <xTaskIncrementTick+0x14c>)
 80070a2:	693b      	ldr	r3, [r7, #16]
 80070a4:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80070a6:	693b      	ldr	r3, [r7, #16]
 80070a8:	2b00      	cmp	r3, #0
 80070aa:	d120      	bne.n	80070ee <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 80070ac:	4b49      	ldr	r3, [pc, #292]	; (80071d4 <xTaskIncrementTick+0x150>)
 80070ae:	681b      	ldr	r3, [r3, #0]
 80070b0:	681b      	ldr	r3, [r3, #0]
 80070b2:	2b00      	cmp	r3, #0
 80070b4:	d00a      	beq.n	80070cc <xTaskIncrementTick+0x48>
	__asm volatile
 80070b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80070ba:	f383 8811 	msr	BASEPRI, r3
 80070be:	f3bf 8f6f 	isb	sy
 80070c2:	f3bf 8f4f 	dsb	sy
 80070c6:	603b      	str	r3, [r7, #0]
}
 80070c8:	bf00      	nop
 80070ca:	e7fe      	b.n	80070ca <xTaskIncrementTick+0x46>
 80070cc:	4b41      	ldr	r3, [pc, #260]	; (80071d4 <xTaskIncrementTick+0x150>)
 80070ce:	681b      	ldr	r3, [r3, #0]
 80070d0:	60fb      	str	r3, [r7, #12]
 80070d2:	4b41      	ldr	r3, [pc, #260]	; (80071d8 <xTaskIncrementTick+0x154>)
 80070d4:	681b      	ldr	r3, [r3, #0]
 80070d6:	4a3f      	ldr	r2, [pc, #252]	; (80071d4 <xTaskIncrementTick+0x150>)
 80070d8:	6013      	str	r3, [r2, #0]
 80070da:	4a3f      	ldr	r2, [pc, #252]	; (80071d8 <xTaskIncrementTick+0x154>)
 80070dc:	68fb      	ldr	r3, [r7, #12]
 80070de:	6013      	str	r3, [r2, #0]
 80070e0:	4b3e      	ldr	r3, [pc, #248]	; (80071dc <xTaskIncrementTick+0x158>)
 80070e2:	681b      	ldr	r3, [r3, #0]
 80070e4:	3301      	adds	r3, #1
 80070e6:	4a3d      	ldr	r2, [pc, #244]	; (80071dc <xTaskIncrementTick+0x158>)
 80070e8:	6013      	str	r3, [r2, #0]
 80070ea:	f000 fb6f 	bl	80077cc <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80070ee:	4b3c      	ldr	r3, [pc, #240]	; (80071e0 <xTaskIncrementTick+0x15c>)
 80070f0:	681b      	ldr	r3, [r3, #0]
 80070f2:	693a      	ldr	r2, [r7, #16]
 80070f4:	429a      	cmp	r2, r3
 80070f6:	d349      	bcc.n	800718c <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80070f8:	4b36      	ldr	r3, [pc, #216]	; (80071d4 <xTaskIncrementTick+0x150>)
 80070fa:	681b      	ldr	r3, [r3, #0]
 80070fc:	681b      	ldr	r3, [r3, #0]
 80070fe:	2b00      	cmp	r3, #0
 8007100:	d104      	bne.n	800710c <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007102:	4b37      	ldr	r3, [pc, #220]	; (80071e0 <xTaskIncrementTick+0x15c>)
 8007104:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007108:	601a      	str	r2, [r3, #0]
					break;
 800710a:	e03f      	b.n	800718c <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800710c:	4b31      	ldr	r3, [pc, #196]	; (80071d4 <xTaskIncrementTick+0x150>)
 800710e:	681b      	ldr	r3, [r3, #0]
 8007110:	68db      	ldr	r3, [r3, #12]
 8007112:	68db      	ldr	r3, [r3, #12]
 8007114:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8007116:	68bb      	ldr	r3, [r7, #8]
 8007118:	685b      	ldr	r3, [r3, #4]
 800711a:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800711c:	693a      	ldr	r2, [r7, #16]
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	429a      	cmp	r2, r3
 8007122:	d203      	bcs.n	800712c <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8007124:	4a2e      	ldr	r2, [pc, #184]	; (80071e0 <xTaskIncrementTick+0x15c>)
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800712a:	e02f      	b.n	800718c <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800712c:	68bb      	ldr	r3, [r7, #8]
 800712e:	3304      	adds	r3, #4
 8007130:	4618      	mov	r0, r3
 8007132:	f7fe fd85 	bl	8005c40 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8007136:	68bb      	ldr	r3, [r7, #8]
 8007138:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800713a:	2b00      	cmp	r3, #0
 800713c:	d004      	beq.n	8007148 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800713e:	68bb      	ldr	r3, [r7, #8]
 8007140:	3318      	adds	r3, #24
 8007142:	4618      	mov	r0, r3
 8007144:	f7fe fd7c 	bl	8005c40 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8007148:	68bb      	ldr	r3, [r7, #8]
 800714a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800714c:	4b25      	ldr	r3, [pc, #148]	; (80071e4 <xTaskIncrementTick+0x160>)
 800714e:	681b      	ldr	r3, [r3, #0]
 8007150:	429a      	cmp	r2, r3
 8007152:	d903      	bls.n	800715c <xTaskIncrementTick+0xd8>
 8007154:	68bb      	ldr	r3, [r7, #8]
 8007156:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007158:	4a22      	ldr	r2, [pc, #136]	; (80071e4 <xTaskIncrementTick+0x160>)
 800715a:	6013      	str	r3, [r2, #0]
 800715c:	68bb      	ldr	r3, [r7, #8]
 800715e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007160:	4613      	mov	r3, r2
 8007162:	009b      	lsls	r3, r3, #2
 8007164:	4413      	add	r3, r2
 8007166:	009b      	lsls	r3, r3, #2
 8007168:	4a1f      	ldr	r2, [pc, #124]	; (80071e8 <xTaskIncrementTick+0x164>)
 800716a:	441a      	add	r2, r3
 800716c:	68bb      	ldr	r3, [r7, #8]
 800716e:	3304      	adds	r3, #4
 8007170:	4619      	mov	r1, r3
 8007172:	4610      	mov	r0, r2
 8007174:	f7fe fd07 	bl	8005b86 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007178:	68bb      	ldr	r3, [r7, #8]
 800717a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800717c:	4b1b      	ldr	r3, [pc, #108]	; (80071ec <xTaskIncrementTick+0x168>)
 800717e:	681b      	ldr	r3, [r3, #0]
 8007180:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007182:	429a      	cmp	r2, r3
 8007184:	d3b8      	bcc.n	80070f8 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8007186:	2301      	movs	r3, #1
 8007188:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800718a:	e7b5      	b.n	80070f8 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800718c:	4b17      	ldr	r3, [pc, #92]	; (80071ec <xTaskIncrementTick+0x168>)
 800718e:	681b      	ldr	r3, [r3, #0]
 8007190:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007192:	4915      	ldr	r1, [pc, #84]	; (80071e8 <xTaskIncrementTick+0x164>)
 8007194:	4613      	mov	r3, r2
 8007196:	009b      	lsls	r3, r3, #2
 8007198:	4413      	add	r3, r2
 800719a:	009b      	lsls	r3, r3, #2
 800719c:	440b      	add	r3, r1
 800719e:	681b      	ldr	r3, [r3, #0]
 80071a0:	2b01      	cmp	r3, #1
 80071a2:	d901      	bls.n	80071a8 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 80071a4:	2301      	movs	r3, #1
 80071a6:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80071a8:	4b11      	ldr	r3, [pc, #68]	; (80071f0 <xTaskIncrementTick+0x16c>)
 80071aa:	681b      	ldr	r3, [r3, #0]
 80071ac:	2b00      	cmp	r3, #0
 80071ae:	d007      	beq.n	80071c0 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 80071b0:	2301      	movs	r3, #1
 80071b2:	617b      	str	r3, [r7, #20]
 80071b4:	e004      	b.n	80071c0 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80071b6:	4b0f      	ldr	r3, [pc, #60]	; (80071f4 <xTaskIncrementTick+0x170>)
 80071b8:	681b      	ldr	r3, [r3, #0]
 80071ba:	3301      	adds	r3, #1
 80071bc:	4a0d      	ldr	r2, [pc, #52]	; (80071f4 <xTaskIncrementTick+0x170>)
 80071be:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80071c0:	697b      	ldr	r3, [r7, #20]
}
 80071c2:	4618      	mov	r0, r3
 80071c4:	3718      	adds	r7, #24
 80071c6:	46bd      	mov	sp, r7
 80071c8:	bd80      	pop	{r7, pc}
 80071ca:	bf00      	nop
 80071cc:	20000de8 	.word	0x20000de8
 80071d0:	20000dc4 	.word	0x20000dc4
 80071d4:	20000d78 	.word	0x20000d78
 80071d8:	20000d7c 	.word	0x20000d7c
 80071dc:	20000dd8 	.word	0x20000dd8
 80071e0:	20000de0 	.word	0x20000de0
 80071e4:	20000dc8 	.word	0x20000dc8
 80071e8:	200008f0 	.word	0x200008f0
 80071ec:	200008ec 	.word	0x200008ec
 80071f0:	20000dd4 	.word	0x20000dd4
 80071f4:	20000dd0 	.word	0x20000dd0

080071f8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80071f8:	b480      	push	{r7}
 80071fa:	b085      	sub	sp, #20
 80071fc:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80071fe:	4b28      	ldr	r3, [pc, #160]	; (80072a0 <vTaskSwitchContext+0xa8>)
 8007200:	681b      	ldr	r3, [r3, #0]
 8007202:	2b00      	cmp	r3, #0
 8007204:	d003      	beq.n	800720e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8007206:	4b27      	ldr	r3, [pc, #156]	; (80072a4 <vTaskSwitchContext+0xac>)
 8007208:	2201      	movs	r2, #1
 800720a:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800720c:	e041      	b.n	8007292 <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 800720e:	4b25      	ldr	r3, [pc, #148]	; (80072a4 <vTaskSwitchContext+0xac>)
 8007210:	2200      	movs	r2, #0
 8007212:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007214:	4b24      	ldr	r3, [pc, #144]	; (80072a8 <vTaskSwitchContext+0xb0>)
 8007216:	681b      	ldr	r3, [r3, #0]
 8007218:	60fb      	str	r3, [r7, #12]
 800721a:	e010      	b.n	800723e <vTaskSwitchContext+0x46>
 800721c:	68fb      	ldr	r3, [r7, #12]
 800721e:	2b00      	cmp	r3, #0
 8007220:	d10a      	bne.n	8007238 <vTaskSwitchContext+0x40>
	__asm volatile
 8007222:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007226:	f383 8811 	msr	BASEPRI, r3
 800722a:	f3bf 8f6f 	isb	sy
 800722e:	f3bf 8f4f 	dsb	sy
 8007232:	607b      	str	r3, [r7, #4]
}
 8007234:	bf00      	nop
 8007236:	e7fe      	b.n	8007236 <vTaskSwitchContext+0x3e>
 8007238:	68fb      	ldr	r3, [r7, #12]
 800723a:	3b01      	subs	r3, #1
 800723c:	60fb      	str	r3, [r7, #12]
 800723e:	491b      	ldr	r1, [pc, #108]	; (80072ac <vTaskSwitchContext+0xb4>)
 8007240:	68fa      	ldr	r2, [r7, #12]
 8007242:	4613      	mov	r3, r2
 8007244:	009b      	lsls	r3, r3, #2
 8007246:	4413      	add	r3, r2
 8007248:	009b      	lsls	r3, r3, #2
 800724a:	440b      	add	r3, r1
 800724c:	681b      	ldr	r3, [r3, #0]
 800724e:	2b00      	cmp	r3, #0
 8007250:	d0e4      	beq.n	800721c <vTaskSwitchContext+0x24>
 8007252:	68fa      	ldr	r2, [r7, #12]
 8007254:	4613      	mov	r3, r2
 8007256:	009b      	lsls	r3, r3, #2
 8007258:	4413      	add	r3, r2
 800725a:	009b      	lsls	r3, r3, #2
 800725c:	4a13      	ldr	r2, [pc, #76]	; (80072ac <vTaskSwitchContext+0xb4>)
 800725e:	4413      	add	r3, r2
 8007260:	60bb      	str	r3, [r7, #8]
 8007262:	68bb      	ldr	r3, [r7, #8]
 8007264:	685b      	ldr	r3, [r3, #4]
 8007266:	685a      	ldr	r2, [r3, #4]
 8007268:	68bb      	ldr	r3, [r7, #8]
 800726a:	605a      	str	r2, [r3, #4]
 800726c:	68bb      	ldr	r3, [r7, #8]
 800726e:	685a      	ldr	r2, [r3, #4]
 8007270:	68bb      	ldr	r3, [r7, #8]
 8007272:	3308      	adds	r3, #8
 8007274:	429a      	cmp	r2, r3
 8007276:	d104      	bne.n	8007282 <vTaskSwitchContext+0x8a>
 8007278:	68bb      	ldr	r3, [r7, #8]
 800727a:	685b      	ldr	r3, [r3, #4]
 800727c:	685a      	ldr	r2, [r3, #4]
 800727e:	68bb      	ldr	r3, [r7, #8]
 8007280:	605a      	str	r2, [r3, #4]
 8007282:	68bb      	ldr	r3, [r7, #8]
 8007284:	685b      	ldr	r3, [r3, #4]
 8007286:	68db      	ldr	r3, [r3, #12]
 8007288:	4a09      	ldr	r2, [pc, #36]	; (80072b0 <vTaskSwitchContext+0xb8>)
 800728a:	6013      	str	r3, [r2, #0]
 800728c:	4a06      	ldr	r2, [pc, #24]	; (80072a8 <vTaskSwitchContext+0xb0>)
 800728e:	68fb      	ldr	r3, [r7, #12]
 8007290:	6013      	str	r3, [r2, #0]
}
 8007292:	bf00      	nop
 8007294:	3714      	adds	r7, #20
 8007296:	46bd      	mov	sp, r7
 8007298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800729c:	4770      	bx	lr
 800729e:	bf00      	nop
 80072a0:	20000de8 	.word	0x20000de8
 80072a4:	20000dd4 	.word	0x20000dd4
 80072a8:	20000dc8 	.word	0x20000dc8
 80072ac:	200008f0 	.word	0x200008f0
 80072b0:	200008ec 	.word	0x200008ec

080072b4 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80072b4:	b580      	push	{r7, lr}
 80072b6:	b084      	sub	sp, #16
 80072b8:	af00      	add	r7, sp, #0
 80072ba:	6078      	str	r0, [r7, #4]
 80072bc:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	2b00      	cmp	r3, #0
 80072c2:	d10a      	bne.n	80072da <vTaskPlaceOnEventList+0x26>
	__asm volatile
 80072c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80072c8:	f383 8811 	msr	BASEPRI, r3
 80072cc:	f3bf 8f6f 	isb	sy
 80072d0:	f3bf 8f4f 	dsb	sy
 80072d4:	60fb      	str	r3, [r7, #12]
}
 80072d6:	bf00      	nop
 80072d8:	e7fe      	b.n	80072d8 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80072da:	4b07      	ldr	r3, [pc, #28]	; (80072f8 <vTaskPlaceOnEventList+0x44>)
 80072dc:	681b      	ldr	r3, [r3, #0]
 80072de:	3318      	adds	r3, #24
 80072e0:	4619      	mov	r1, r3
 80072e2:	6878      	ldr	r0, [r7, #4]
 80072e4:	f7fe fc73 	bl	8005bce <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80072e8:	2101      	movs	r1, #1
 80072ea:	6838      	ldr	r0, [r7, #0]
 80072ec:	f000 fc40 	bl	8007b70 <prvAddCurrentTaskToDelayedList>
}
 80072f0:	bf00      	nop
 80072f2:	3710      	adds	r7, #16
 80072f4:	46bd      	mov	sp, r7
 80072f6:	bd80      	pop	{r7, pc}
 80072f8:	200008ec 	.word	0x200008ec

080072fc <vTaskPlaceOnUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnUnorderedEventList( List_t * pxEventList, const TickType_t xItemValue, const TickType_t xTicksToWait )
{
 80072fc:	b580      	push	{r7, lr}
 80072fe:	b086      	sub	sp, #24
 8007300:	af00      	add	r7, sp, #0
 8007302:	60f8      	str	r0, [r7, #12]
 8007304:	60b9      	str	r1, [r7, #8]
 8007306:	607a      	str	r2, [r7, #4]
	configASSERT( pxEventList );
 8007308:	68fb      	ldr	r3, [r7, #12]
 800730a:	2b00      	cmp	r3, #0
 800730c:	d10a      	bne.n	8007324 <vTaskPlaceOnUnorderedEventList+0x28>
	__asm volatile
 800730e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007312:	f383 8811 	msr	BASEPRI, r3
 8007316:	f3bf 8f6f 	isb	sy
 800731a:	f3bf 8f4f 	dsb	sy
 800731e:	617b      	str	r3, [r7, #20]
}
 8007320:	bf00      	nop
 8007322:	e7fe      	b.n	8007322 <vTaskPlaceOnUnorderedEventList+0x26>

	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event groups implementation. */
	configASSERT( uxSchedulerSuspended != 0 );
 8007324:	4b11      	ldr	r3, [pc, #68]	; (800736c <vTaskPlaceOnUnorderedEventList+0x70>)
 8007326:	681b      	ldr	r3, [r3, #0]
 8007328:	2b00      	cmp	r3, #0
 800732a:	d10a      	bne.n	8007342 <vTaskPlaceOnUnorderedEventList+0x46>
	__asm volatile
 800732c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007330:	f383 8811 	msr	BASEPRI, r3
 8007334:	f3bf 8f6f 	isb	sy
 8007338:	f3bf 8f4f 	dsb	sy
 800733c:	613b      	str	r3, [r7, #16]
}
 800733e:	bf00      	nop
 8007340:	e7fe      	b.n	8007340 <vTaskPlaceOnUnorderedEventList+0x44>

	/* Store the item value in the event list item.  It is safe to access the
	event list item here as interrupts won't access the event list item of a
	task that is not in the Blocked state. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 8007342:	4b0b      	ldr	r3, [pc, #44]	; (8007370 <vTaskPlaceOnUnorderedEventList+0x74>)
 8007344:	681b      	ldr	r3, [r3, #0]
 8007346:	68ba      	ldr	r2, [r7, #8]
 8007348:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 800734c:	619a      	str	r2, [r3, #24]
	/* Place the event list item of the TCB at the end of the appropriate event
	list.  It is safe to access the event list here because it is part of an
	event group implementation - and interrupts don't access event groups
	directly (instead they access them indirectly by pending function calls to
	the task level). */
	vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800734e:	4b08      	ldr	r3, [pc, #32]	; (8007370 <vTaskPlaceOnUnorderedEventList+0x74>)
 8007350:	681b      	ldr	r3, [r3, #0]
 8007352:	3318      	adds	r3, #24
 8007354:	4619      	mov	r1, r3
 8007356:	68f8      	ldr	r0, [r7, #12]
 8007358:	f7fe fc15 	bl	8005b86 <vListInsertEnd>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800735c:	2101      	movs	r1, #1
 800735e:	6878      	ldr	r0, [r7, #4]
 8007360:	f000 fc06 	bl	8007b70 <prvAddCurrentTaskToDelayedList>
}
 8007364:	bf00      	nop
 8007366:	3718      	adds	r7, #24
 8007368:	46bd      	mov	sp, r7
 800736a:	bd80      	pop	{r7, pc}
 800736c:	20000de8 	.word	0x20000de8
 8007370:	200008ec 	.word	0x200008ec

08007374 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8007374:	b580      	push	{r7, lr}
 8007376:	b086      	sub	sp, #24
 8007378:	af00      	add	r7, sp, #0
 800737a:	60f8      	str	r0, [r7, #12]
 800737c:	60b9      	str	r1, [r7, #8]
 800737e:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8007380:	68fb      	ldr	r3, [r7, #12]
 8007382:	2b00      	cmp	r3, #0
 8007384:	d10a      	bne.n	800739c <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8007386:	f04f 0350 	mov.w	r3, #80	; 0x50
 800738a:	f383 8811 	msr	BASEPRI, r3
 800738e:	f3bf 8f6f 	isb	sy
 8007392:	f3bf 8f4f 	dsb	sy
 8007396:	617b      	str	r3, [r7, #20]
}
 8007398:	bf00      	nop
 800739a:	e7fe      	b.n	800739a <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800739c:	4b0a      	ldr	r3, [pc, #40]	; (80073c8 <vTaskPlaceOnEventListRestricted+0x54>)
 800739e:	681b      	ldr	r3, [r3, #0]
 80073a0:	3318      	adds	r3, #24
 80073a2:	4619      	mov	r1, r3
 80073a4:	68f8      	ldr	r0, [r7, #12]
 80073a6:	f7fe fbee 	bl	8005b86 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	2b00      	cmp	r3, #0
 80073ae:	d002      	beq.n	80073b6 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 80073b0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80073b4:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80073b6:	6879      	ldr	r1, [r7, #4]
 80073b8:	68b8      	ldr	r0, [r7, #8]
 80073ba:	f000 fbd9 	bl	8007b70 <prvAddCurrentTaskToDelayedList>
	}
 80073be:	bf00      	nop
 80073c0:	3718      	adds	r7, #24
 80073c2:	46bd      	mov	sp, r7
 80073c4:	bd80      	pop	{r7, pc}
 80073c6:	bf00      	nop
 80073c8:	200008ec 	.word	0x200008ec

080073cc <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80073cc:	b580      	push	{r7, lr}
 80073ce:	b086      	sub	sp, #24
 80073d0:	af00      	add	r7, sp, #0
 80073d2:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	68db      	ldr	r3, [r3, #12]
 80073d8:	68db      	ldr	r3, [r3, #12]
 80073da:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80073dc:	693b      	ldr	r3, [r7, #16]
 80073de:	2b00      	cmp	r3, #0
 80073e0:	d10a      	bne.n	80073f8 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 80073e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80073e6:	f383 8811 	msr	BASEPRI, r3
 80073ea:	f3bf 8f6f 	isb	sy
 80073ee:	f3bf 8f4f 	dsb	sy
 80073f2:	60fb      	str	r3, [r7, #12]
}
 80073f4:	bf00      	nop
 80073f6:	e7fe      	b.n	80073f6 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80073f8:	693b      	ldr	r3, [r7, #16]
 80073fa:	3318      	adds	r3, #24
 80073fc:	4618      	mov	r0, r3
 80073fe:	f7fe fc1f 	bl	8005c40 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007402:	4b1e      	ldr	r3, [pc, #120]	; (800747c <xTaskRemoveFromEventList+0xb0>)
 8007404:	681b      	ldr	r3, [r3, #0]
 8007406:	2b00      	cmp	r3, #0
 8007408:	d11d      	bne.n	8007446 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800740a:	693b      	ldr	r3, [r7, #16]
 800740c:	3304      	adds	r3, #4
 800740e:	4618      	mov	r0, r3
 8007410:	f7fe fc16 	bl	8005c40 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8007414:	693b      	ldr	r3, [r7, #16]
 8007416:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007418:	4b19      	ldr	r3, [pc, #100]	; (8007480 <xTaskRemoveFromEventList+0xb4>)
 800741a:	681b      	ldr	r3, [r3, #0]
 800741c:	429a      	cmp	r2, r3
 800741e:	d903      	bls.n	8007428 <xTaskRemoveFromEventList+0x5c>
 8007420:	693b      	ldr	r3, [r7, #16]
 8007422:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007424:	4a16      	ldr	r2, [pc, #88]	; (8007480 <xTaskRemoveFromEventList+0xb4>)
 8007426:	6013      	str	r3, [r2, #0]
 8007428:	693b      	ldr	r3, [r7, #16]
 800742a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800742c:	4613      	mov	r3, r2
 800742e:	009b      	lsls	r3, r3, #2
 8007430:	4413      	add	r3, r2
 8007432:	009b      	lsls	r3, r3, #2
 8007434:	4a13      	ldr	r2, [pc, #76]	; (8007484 <xTaskRemoveFromEventList+0xb8>)
 8007436:	441a      	add	r2, r3
 8007438:	693b      	ldr	r3, [r7, #16]
 800743a:	3304      	adds	r3, #4
 800743c:	4619      	mov	r1, r3
 800743e:	4610      	mov	r0, r2
 8007440:	f7fe fba1 	bl	8005b86 <vListInsertEnd>
 8007444:	e005      	b.n	8007452 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8007446:	693b      	ldr	r3, [r7, #16]
 8007448:	3318      	adds	r3, #24
 800744a:	4619      	mov	r1, r3
 800744c:	480e      	ldr	r0, [pc, #56]	; (8007488 <xTaskRemoveFromEventList+0xbc>)
 800744e:	f7fe fb9a 	bl	8005b86 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8007452:	693b      	ldr	r3, [r7, #16]
 8007454:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007456:	4b0d      	ldr	r3, [pc, #52]	; (800748c <xTaskRemoveFromEventList+0xc0>)
 8007458:	681b      	ldr	r3, [r3, #0]
 800745a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800745c:	429a      	cmp	r2, r3
 800745e:	d905      	bls.n	800746c <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8007460:	2301      	movs	r3, #1
 8007462:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8007464:	4b0a      	ldr	r3, [pc, #40]	; (8007490 <xTaskRemoveFromEventList+0xc4>)
 8007466:	2201      	movs	r2, #1
 8007468:	601a      	str	r2, [r3, #0]
 800746a:	e001      	b.n	8007470 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800746c:	2300      	movs	r3, #0
 800746e:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8007470:	697b      	ldr	r3, [r7, #20]
}
 8007472:	4618      	mov	r0, r3
 8007474:	3718      	adds	r7, #24
 8007476:	46bd      	mov	sp, r7
 8007478:	bd80      	pop	{r7, pc}
 800747a:	bf00      	nop
 800747c:	20000de8 	.word	0x20000de8
 8007480:	20000dc8 	.word	0x20000dc8
 8007484:	200008f0 	.word	0x200008f0
 8007488:	20000d80 	.word	0x20000d80
 800748c:	200008ec 	.word	0x200008ec
 8007490:	20000dd4 	.word	0x20000dd4

08007494 <vTaskRemoveFromUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskRemoveFromUnorderedEventList( ListItem_t * pxEventListItem, const TickType_t xItemValue )
{
 8007494:	b580      	push	{r7, lr}
 8007496:	b086      	sub	sp, #24
 8007498:	af00      	add	r7, sp, #0
 800749a:	6078      	str	r0, [r7, #4]
 800749c:	6039      	str	r1, [r7, #0]
TCB_t *pxUnblockedTCB;

	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event flags implementation. */
	configASSERT( uxSchedulerSuspended != pdFALSE );
 800749e:	4b29      	ldr	r3, [pc, #164]	; (8007544 <vTaskRemoveFromUnorderedEventList+0xb0>)
 80074a0:	681b      	ldr	r3, [r3, #0]
 80074a2:	2b00      	cmp	r3, #0
 80074a4:	d10a      	bne.n	80074bc <vTaskRemoveFromUnorderedEventList+0x28>
	__asm volatile
 80074a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80074aa:	f383 8811 	msr	BASEPRI, r3
 80074ae:	f3bf 8f6f 	isb	sy
 80074b2:	f3bf 8f4f 	dsb	sy
 80074b6:	613b      	str	r3, [r7, #16]
}
 80074b8:	bf00      	nop
 80074ba:	e7fe      	b.n	80074ba <vTaskRemoveFromUnorderedEventList+0x26>

	/* Store the new item value in the event list. */
	listSET_LIST_ITEM_VALUE( pxEventListItem, xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 80074bc:	683b      	ldr	r3, [r7, #0]
 80074be:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	601a      	str	r2, [r3, #0]

	/* Remove the event list form the event flag.  Interrupts do not access
	event flags. */
	pxUnblockedTCB = listGET_LIST_ITEM_OWNER( pxEventListItem ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	68db      	ldr	r3, [r3, #12]
 80074ca:	617b      	str	r3, [r7, #20]
	configASSERT( pxUnblockedTCB );
 80074cc:	697b      	ldr	r3, [r7, #20]
 80074ce:	2b00      	cmp	r3, #0
 80074d0:	d10a      	bne.n	80074e8 <vTaskRemoveFromUnorderedEventList+0x54>
	__asm volatile
 80074d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80074d6:	f383 8811 	msr	BASEPRI, r3
 80074da:	f3bf 8f6f 	isb	sy
 80074de:	f3bf 8f4f 	dsb	sy
 80074e2:	60fb      	str	r3, [r7, #12]
}
 80074e4:	bf00      	nop
 80074e6:	e7fe      	b.n	80074e6 <vTaskRemoveFromUnorderedEventList+0x52>
	( void ) uxListRemove( pxEventListItem );
 80074e8:	6878      	ldr	r0, [r7, #4]
 80074ea:	f7fe fba9 	bl	8005c40 <uxListRemove>
	#endif

	/* Remove the task from the delayed list and add it to the ready list.  The
	scheduler is suspended so interrupts will not be accessing the ready
	lists. */
	( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80074ee:	697b      	ldr	r3, [r7, #20]
 80074f0:	3304      	adds	r3, #4
 80074f2:	4618      	mov	r0, r3
 80074f4:	f7fe fba4 	bl	8005c40 <uxListRemove>
	prvAddTaskToReadyList( pxUnblockedTCB );
 80074f8:	697b      	ldr	r3, [r7, #20]
 80074fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80074fc:	4b12      	ldr	r3, [pc, #72]	; (8007548 <vTaskRemoveFromUnorderedEventList+0xb4>)
 80074fe:	681b      	ldr	r3, [r3, #0]
 8007500:	429a      	cmp	r2, r3
 8007502:	d903      	bls.n	800750c <vTaskRemoveFromUnorderedEventList+0x78>
 8007504:	697b      	ldr	r3, [r7, #20]
 8007506:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007508:	4a0f      	ldr	r2, [pc, #60]	; (8007548 <vTaskRemoveFromUnorderedEventList+0xb4>)
 800750a:	6013      	str	r3, [r2, #0]
 800750c:	697b      	ldr	r3, [r7, #20]
 800750e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007510:	4613      	mov	r3, r2
 8007512:	009b      	lsls	r3, r3, #2
 8007514:	4413      	add	r3, r2
 8007516:	009b      	lsls	r3, r3, #2
 8007518:	4a0c      	ldr	r2, [pc, #48]	; (800754c <vTaskRemoveFromUnorderedEventList+0xb8>)
 800751a:	441a      	add	r2, r3
 800751c:	697b      	ldr	r3, [r7, #20]
 800751e:	3304      	adds	r3, #4
 8007520:	4619      	mov	r1, r3
 8007522:	4610      	mov	r0, r2
 8007524:	f7fe fb2f 	bl	8005b86 <vListInsertEnd>

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8007528:	697b      	ldr	r3, [r7, #20]
 800752a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800752c:	4b08      	ldr	r3, [pc, #32]	; (8007550 <vTaskRemoveFromUnorderedEventList+0xbc>)
 800752e:	681b      	ldr	r3, [r3, #0]
 8007530:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007532:	429a      	cmp	r2, r3
 8007534:	d902      	bls.n	800753c <vTaskRemoveFromUnorderedEventList+0xa8>
	{
		/* The unblocked task has a priority above that of the calling task, so
		a context switch is required.  This function is called with the
		scheduler suspended so xYieldPending is set so the context switch
		occurs immediately that the scheduler is resumed (unsuspended). */
		xYieldPending = pdTRUE;
 8007536:	4b07      	ldr	r3, [pc, #28]	; (8007554 <vTaskRemoveFromUnorderedEventList+0xc0>)
 8007538:	2201      	movs	r2, #1
 800753a:	601a      	str	r2, [r3, #0]
	}
}
 800753c:	bf00      	nop
 800753e:	3718      	adds	r7, #24
 8007540:	46bd      	mov	sp, r7
 8007542:	bd80      	pop	{r7, pc}
 8007544:	20000de8 	.word	0x20000de8
 8007548:	20000dc8 	.word	0x20000dc8
 800754c:	200008f0 	.word	0x200008f0
 8007550:	200008ec 	.word	0x200008ec
 8007554:	20000dd4 	.word	0x20000dd4

08007558 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8007558:	b480      	push	{r7}
 800755a:	b083      	sub	sp, #12
 800755c:	af00      	add	r7, sp, #0
 800755e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8007560:	4b06      	ldr	r3, [pc, #24]	; (800757c <vTaskInternalSetTimeOutState+0x24>)
 8007562:	681a      	ldr	r2, [r3, #0]
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8007568:	4b05      	ldr	r3, [pc, #20]	; (8007580 <vTaskInternalSetTimeOutState+0x28>)
 800756a:	681a      	ldr	r2, [r3, #0]
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	605a      	str	r2, [r3, #4]
}
 8007570:	bf00      	nop
 8007572:	370c      	adds	r7, #12
 8007574:	46bd      	mov	sp, r7
 8007576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800757a:	4770      	bx	lr
 800757c:	20000dd8 	.word	0x20000dd8
 8007580:	20000dc4 	.word	0x20000dc4

08007584 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8007584:	b580      	push	{r7, lr}
 8007586:	b088      	sub	sp, #32
 8007588:	af00      	add	r7, sp, #0
 800758a:	6078      	str	r0, [r7, #4]
 800758c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	2b00      	cmp	r3, #0
 8007592:	d10a      	bne.n	80075aa <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8007594:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007598:	f383 8811 	msr	BASEPRI, r3
 800759c:	f3bf 8f6f 	isb	sy
 80075a0:	f3bf 8f4f 	dsb	sy
 80075a4:	613b      	str	r3, [r7, #16]
}
 80075a6:	bf00      	nop
 80075a8:	e7fe      	b.n	80075a8 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 80075aa:	683b      	ldr	r3, [r7, #0]
 80075ac:	2b00      	cmp	r3, #0
 80075ae:	d10a      	bne.n	80075c6 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 80075b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80075b4:	f383 8811 	msr	BASEPRI, r3
 80075b8:	f3bf 8f6f 	isb	sy
 80075bc:	f3bf 8f4f 	dsb	sy
 80075c0:	60fb      	str	r3, [r7, #12]
}
 80075c2:	bf00      	nop
 80075c4:	e7fe      	b.n	80075c4 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 80075c6:	f000 ffc5 	bl	8008554 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80075ca:	4b1d      	ldr	r3, [pc, #116]	; (8007640 <xTaskCheckForTimeOut+0xbc>)
 80075cc:	681b      	ldr	r3, [r3, #0]
 80075ce:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	685b      	ldr	r3, [r3, #4]
 80075d4:	69ba      	ldr	r2, [r7, #24]
 80075d6:	1ad3      	subs	r3, r2, r3
 80075d8:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80075da:	683b      	ldr	r3, [r7, #0]
 80075dc:	681b      	ldr	r3, [r3, #0]
 80075de:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80075e2:	d102      	bne.n	80075ea <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80075e4:	2300      	movs	r3, #0
 80075e6:	61fb      	str	r3, [r7, #28]
 80075e8:	e023      	b.n	8007632 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	681a      	ldr	r2, [r3, #0]
 80075ee:	4b15      	ldr	r3, [pc, #84]	; (8007644 <xTaskCheckForTimeOut+0xc0>)
 80075f0:	681b      	ldr	r3, [r3, #0]
 80075f2:	429a      	cmp	r2, r3
 80075f4:	d007      	beq.n	8007606 <xTaskCheckForTimeOut+0x82>
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	685b      	ldr	r3, [r3, #4]
 80075fa:	69ba      	ldr	r2, [r7, #24]
 80075fc:	429a      	cmp	r2, r3
 80075fe:	d302      	bcc.n	8007606 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8007600:	2301      	movs	r3, #1
 8007602:	61fb      	str	r3, [r7, #28]
 8007604:	e015      	b.n	8007632 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8007606:	683b      	ldr	r3, [r7, #0]
 8007608:	681b      	ldr	r3, [r3, #0]
 800760a:	697a      	ldr	r2, [r7, #20]
 800760c:	429a      	cmp	r2, r3
 800760e:	d20b      	bcs.n	8007628 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8007610:	683b      	ldr	r3, [r7, #0]
 8007612:	681a      	ldr	r2, [r3, #0]
 8007614:	697b      	ldr	r3, [r7, #20]
 8007616:	1ad2      	subs	r2, r2, r3
 8007618:	683b      	ldr	r3, [r7, #0]
 800761a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800761c:	6878      	ldr	r0, [r7, #4]
 800761e:	f7ff ff9b 	bl	8007558 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8007622:	2300      	movs	r3, #0
 8007624:	61fb      	str	r3, [r7, #28]
 8007626:	e004      	b.n	8007632 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8007628:	683b      	ldr	r3, [r7, #0]
 800762a:	2200      	movs	r2, #0
 800762c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800762e:	2301      	movs	r3, #1
 8007630:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8007632:	f000 ffbf 	bl	80085b4 <vPortExitCritical>

	return xReturn;
 8007636:	69fb      	ldr	r3, [r7, #28]
}
 8007638:	4618      	mov	r0, r3
 800763a:	3720      	adds	r7, #32
 800763c:	46bd      	mov	sp, r7
 800763e:	bd80      	pop	{r7, pc}
 8007640:	20000dc4 	.word	0x20000dc4
 8007644:	20000dd8 	.word	0x20000dd8

08007648 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8007648:	b480      	push	{r7}
 800764a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800764c:	4b03      	ldr	r3, [pc, #12]	; (800765c <vTaskMissedYield+0x14>)
 800764e:	2201      	movs	r2, #1
 8007650:	601a      	str	r2, [r3, #0]
}
 8007652:	bf00      	nop
 8007654:	46bd      	mov	sp, r7
 8007656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800765a:	4770      	bx	lr
 800765c:	20000dd4 	.word	0x20000dd4

08007660 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8007660:	b580      	push	{r7, lr}
 8007662:	b082      	sub	sp, #8
 8007664:	af00      	add	r7, sp, #0
 8007666:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8007668:	f000 f852 	bl	8007710 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800766c:	4b06      	ldr	r3, [pc, #24]	; (8007688 <prvIdleTask+0x28>)
 800766e:	681b      	ldr	r3, [r3, #0]
 8007670:	2b01      	cmp	r3, #1
 8007672:	d9f9      	bls.n	8007668 <prvIdleTask+0x8>
			{
				taskYIELD();
 8007674:	4b05      	ldr	r3, [pc, #20]	; (800768c <prvIdleTask+0x2c>)
 8007676:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800767a:	601a      	str	r2, [r3, #0]
 800767c:	f3bf 8f4f 	dsb	sy
 8007680:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8007684:	e7f0      	b.n	8007668 <prvIdleTask+0x8>
 8007686:	bf00      	nop
 8007688:	200008f0 	.word	0x200008f0
 800768c:	e000ed04 	.word	0xe000ed04

08007690 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8007690:	b580      	push	{r7, lr}
 8007692:	b082      	sub	sp, #8
 8007694:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007696:	2300      	movs	r3, #0
 8007698:	607b      	str	r3, [r7, #4]
 800769a:	e00c      	b.n	80076b6 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800769c:	687a      	ldr	r2, [r7, #4]
 800769e:	4613      	mov	r3, r2
 80076a0:	009b      	lsls	r3, r3, #2
 80076a2:	4413      	add	r3, r2
 80076a4:	009b      	lsls	r3, r3, #2
 80076a6:	4a12      	ldr	r2, [pc, #72]	; (80076f0 <prvInitialiseTaskLists+0x60>)
 80076a8:	4413      	add	r3, r2
 80076aa:	4618      	mov	r0, r3
 80076ac:	f7fe fa3e 	bl	8005b2c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	3301      	adds	r3, #1
 80076b4:	607b      	str	r3, [r7, #4]
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	2b37      	cmp	r3, #55	; 0x37
 80076ba:	d9ef      	bls.n	800769c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80076bc:	480d      	ldr	r0, [pc, #52]	; (80076f4 <prvInitialiseTaskLists+0x64>)
 80076be:	f7fe fa35 	bl	8005b2c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80076c2:	480d      	ldr	r0, [pc, #52]	; (80076f8 <prvInitialiseTaskLists+0x68>)
 80076c4:	f7fe fa32 	bl	8005b2c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80076c8:	480c      	ldr	r0, [pc, #48]	; (80076fc <prvInitialiseTaskLists+0x6c>)
 80076ca:	f7fe fa2f 	bl	8005b2c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80076ce:	480c      	ldr	r0, [pc, #48]	; (8007700 <prvInitialiseTaskLists+0x70>)
 80076d0:	f7fe fa2c 	bl	8005b2c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80076d4:	480b      	ldr	r0, [pc, #44]	; (8007704 <prvInitialiseTaskLists+0x74>)
 80076d6:	f7fe fa29 	bl	8005b2c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80076da:	4b0b      	ldr	r3, [pc, #44]	; (8007708 <prvInitialiseTaskLists+0x78>)
 80076dc:	4a05      	ldr	r2, [pc, #20]	; (80076f4 <prvInitialiseTaskLists+0x64>)
 80076de:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80076e0:	4b0a      	ldr	r3, [pc, #40]	; (800770c <prvInitialiseTaskLists+0x7c>)
 80076e2:	4a05      	ldr	r2, [pc, #20]	; (80076f8 <prvInitialiseTaskLists+0x68>)
 80076e4:	601a      	str	r2, [r3, #0]
}
 80076e6:	bf00      	nop
 80076e8:	3708      	adds	r7, #8
 80076ea:	46bd      	mov	sp, r7
 80076ec:	bd80      	pop	{r7, pc}
 80076ee:	bf00      	nop
 80076f0:	200008f0 	.word	0x200008f0
 80076f4:	20000d50 	.word	0x20000d50
 80076f8:	20000d64 	.word	0x20000d64
 80076fc:	20000d80 	.word	0x20000d80
 8007700:	20000d94 	.word	0x20000d94
 8007704:	20000dac 	.word	0x20000dac
 8007708:	20000d78 	.word	0x20000d78
 800770c:	20000d7c 	.word	0x20000d7c

08007710 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8007710:	b580      	push	{r7, lr}
 8007712:	b082      	sub	sp, #8
 8007714:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007716:	e019      	b.n	800774c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8007718:	f000 ff1c 	bl	8008554 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800771c:	4b10      	ldr	r3, [pc, #64]	; (8007760 <prvCheckTasksWaitingTermination+0x50>)
 800771e:	68db      	ldr	r3, [r3, #12]
 8007720:	68db      	ldr	r3, [r3, #12]
 8007722:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	3304      	adds	r3, #4
 8007728:	4618      	mov	r0, r3
 800772a:	f7fe fa89 	bl	8005c40 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800772e:	4b0d      	ldr	r3, [pc, #52]	; (8007764 <prvCheckTasksWaitingTermination+0x54>)
 8007730:	681b      	ldr	r3, [r3, #0]
 8007732:	3b01      	subs	r3, #1
 8007734:	4a0b      	ldr	r2, [pc, #44]	; (8007764 <prvCheckTasksWaitingTermination+0x54>)
 8007736:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8007738:	4b0b      	ldr	r3, [pc, #44]	; (8007768 <prvCheckTasksWaitingTermination+0x58>)
 800773a:	681b      	ldr	r3, [r3, #0]
 800773c:	3b01      	subs	r3, #1
 800773e:	4a0a      	ldr	r2, [pc, #40]	; (8007768 <prvCheckTasksWaitingTermination+0x58>)
 8007740:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8007742:	f000 ff37 	bl	80085b4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8007746:	6878      	ldr	r0, [r7, #4]
 8007748:	f000 f810 	bl	800776c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800774c:	4b06      	ldr	r3, [pc, #24]	; (8007768 <prvCheckTasksWaitingTermination+0x58>)
 800774e:	681b      	ldr	r3, [r3, #0]
 8007750:	2b00      	cmp	r3, #0
 8007752:	d1e1      	bne.n	8007718 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8007754:	bf00      	nop
 8007756:	bf00      	nop
 8007758:	3708      	adds	r7, #8
 800775a:	46bd      	mov	sp, r7
 800775c:	bd80      	pop	{r7, pc}
 800775e:	bf00      	nop
 8007760:	20000d94 	.word	0x20000d94
 8007764:	20000dc0 	.word	0x20000dc0
 8007768:	20000da8 	.word	0x20000da8

0800776c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800776c:	b580      	push	{r7, lr}
 800776e:	b084      	sub	sp, #16
 8007770:	af00      	add	r7, sp, #0
 8007772:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800777a:	2b00      	cmp	r3, #0
 800777c:	d108      	bne.n	8007790 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007782:	4618      	mov	r0, r3
 8007784:	f001 f8d4 	bl	8008930 <vPortFree>
				vPortFree( pxTCB );
 8007788:	6878      	ldr	r0, [r7, #4]
 800778a:	f001 f8d1 	bl	8008930 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800778e:	e018      	b.n	80077c2 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8007796:	2b01      	cmp	r3, #1
 8007798:	d103      	bne.n	80077a2 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800779a:	6878      	ldr	r0, [r7, #4]
 800779c:	f001 f8c8 	bl	8008930 <vPortFree>
	}
 80077a0:	e00f      	b.n	80077c2 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80077a8:	2b02      	cmp	r3, #2
 80077aa:	d00a      	beq.n	80077c2 <prvDeleteTCB+0x56>
	__asm volatile
 80077ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80077b0:	f383 8811 	msr	BASEPRI, r3
 80077b4:	f3bf 8f6f 	isb	sy
 80077b8:	f3bf 8f4f 	dsb	sy
 80077bc:	60fb      	str	r3, [r7, #12]
}
 80077be:	bf00      	nop
 80077c0:	e7fe      	b.n	80077c0 <prvDeleteTCB+0x54>
	}
 80077c2:	bf00      	nop
 80077c4:	3710      	adds	r7, #16
 80077c6:	46bd      	mov	sp, r7
 80077c8:	bd80      	pop	{r7, pc}
	...

080077cc <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80077cc:	b480      	push	{r7}
 80077ce:	b083      	sub	sp, #12
 80077d0:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80077d2:	4b0c      	ldr	r3, [pc, #48]	; (8007804 <prvResetNextTaskUnblockTime+0x38>)
 80077d4:	681b      	ldr	r3, [r3, #0]
 80077d6:	681b      	ldr	r3, [r3, #0]
 80077d8:	2b00      	cmp	r3, #0
 80077da:	d104      	bne.n	80077e6 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80077dc:	4b0a      	ldr	r3, [pc, #40]	; (8007808 <prvResetNextTaskUnblockTime+0x3c>)
 80077de:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80077e2:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80077e4:	e008      	b.n	80077f8 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80077e6:	4b07      	ldr	r3, [pc, #28]	; (8007804 <prvResetNextTaskUnblockTime+0x38>)
 80077e8:	681b      	ldr	r3, [r3, #0]
 80077ea:	68db      	ldr	r3, [r3, #12]
 80077ec:	68db      	ldr	r3, [r3, #12]
 80077ee:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	685b      	ldr	r3, [r3, #4]
 80077f4:	4a04      	ldr	r2, [pc, #16]	; (8007808 <prvResetNextTaskUnblockTime+0x3c>)
 80077f6:	6013      	str	r3, [r2, #0]
}
 80077f8:	bf00      	nop
 80077fa:	370c      	adds	r7, #12
 80077fc:	46bd      	mov	sp, r7
 80077fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007802:	4770      	bx	lr
 8007804:	20000d78 	.word	0x20000d78
 8007808:	20000de0 	.word	0x20000de0

0800780c <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 800780c:	b480      	push	{r7}
 800780e:	b083      	sub	sp, #12
 8007810:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 8007812:	4b05      	ldr	r3, [pc, #20]	; (8007828 <xTaskGetCurrentTaskHandle+0x1c>)
 8007814:	681b      	ldr	r3, [r3, #0]
 8007816:	607b      	str	r3, [r7, #4]

		return xReturn;
 8007818:	687b      	ldr	r3, [r7, #4]
	}
 800781a:	4618      	mov	r0, r3
 800781c:	370c      	adds	r7, #12
 800781e:	46bd      	mov	sp, r7
 8007820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007824:	4770      	bx	lr
 8007826:	bf00      	nop
 8007828:	200008ec 	.word	0x200008ec

0800782c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800782c:	b480      	push	{r7}
 800782e:	b083      	sub	sp, #12
 8007830:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8007832:	4b0b      	ldr	r3, [pc, #44]	; (8007860 <xTaskGetSchedulerState+0x34>)
 8007834:	681b      	ldr	r3, [r3, #0]
 8007836:	2b00      	cmp	r3, #0
 8007838:	d102      	bne.n	8007840 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800783a:	2301      	movs	r3, #1
 800783c:	607b      	str	r3, [r7, #4]
 800783e:	e008      	b.n	8007852 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007840:	4b08      	ldr	r3, [pc, #32]	; (8007864 <xTaskGetSchedulerState+0x38>)
 8007842:	681b      	ldr	r3, [r3, #0]
 8007844:	2b00      	cmp	r3, #0
 8007846:	d102      	bne.n	800784e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8007848:	2302      	movs	r3, #2
 800784a:	607b      	str	r3, [r7, #4]
 800784c:	e001      	b.n	8007852 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800784e:	2300      	movs	r3, #0
 8007850:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8007852:	687b      	ldr	r3, [r7, #4]
	}
 8007854:	4618      	mov	r0, r3
 8007856:	370c      	adds	r7, #12
 8007858:	46bd      	mov	sp, r7
 800785a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800785e:	4770      	bx	lr
 8007860:	20000dcc 	.word	0x20000dcc
 8007864:	20000de8 	.word	0x20000de8

08007868 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8007868:	b580      	push	{r7, lr}
 800786a:	b084      	sub	sp, #16
 800786c:	af00      	add	r7, sp, #0
 800786e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8007874:	2300      	movs	r3, #0
 8007876:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	2b00      	cmp	r3, #0
 800787c:	d051      	beq.n	8007922 <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800787e:	68bb      	ldr	r3, [r7, #8]
 8007880:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007882:	4b2a      	ldr	r3, [pc, #168]	; (800792c <xTaskPriorityInherit+0xc4>)
 8007884:	681b      	ldr	r3, [r3, #0]
 8007886:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007888:	429a      	cmp	r2, r3
 800788a:	d241      	bcs.n	8007910 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800788c:	68bb      	ldr	r3, [r7, #8]
 800788e:	699b      	ldr	r3, [r3, #24]
 8007890:	2b00      	cmp	r3, #0
 8007892:	db06      	blt.n	80078a2 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007894:	4b25      	ldr	r3, [pc, #148]	; (800792c <xTaskPriorityInherit+0xc4>)
 8007896:	681b      	ldr	r3, [r3, #0]
 8007898:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800789a:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800789e:	68bb      	ldr	r3, [r7, #8]
 80078a0:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 80078a2:	68bb      	ldr	r3, [r7, #8]
 80078a4:	6959      	ldr	r1, [r3, #20]
 80078a6:	68bb      	ldr	r3, [r7, #8]
 80078a8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80078aa:	4613      	mov	r3, r2
 80078ac:	009b      	lsls	r3, r3, #2
 80078ae:	4413      	add	r3, r2
 80078b0:	009b      	lsls	r3, r3, #2
 80078b2:	4a1f      	ldr	r2, [pc, #124]	; (8007930 <xTaskPriorityInherit+0xc8>)
 80078b4:	4413      	add	r3, r2
 80078b6:	4299      	cmp	r1, r3
 80078b8:	d122      	bne.n	8007900 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80078ba:	68bb      	ldr	r3, [r7, #8]
 80078bc:	3304      	adds	r3, #4
 80078be:	4618      	mov	r0, r3
 80078c0:	f7fe f9be 	bl	8005c40 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80078c4:	4b19      	ldr	r3, [pc, #100]	; (800792c <xTaskPriorityInherit+0xc4>)
 80078c6:	681b      	ldr	r3, [r3, #0]
 80078c8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80078ca:	68bb      	ldr	r3, [r7, #8]
 80078cc:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 80078ce:	68bb      	ldr	r3, [r7, #8]
 80078d0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80078d2:	4b18      	ldr	r3, [pc, #96]	; (8007934 <xTaskPriorityInherit+0xcc>)
 80078d4:	681b      	ldr	r3, [r3, #0]
 80078d6:	429a      	cmp	r2, r3
 80078d8:	d903      	bls.n	80078e2 <xTaskPriorityInherit+0x7a>
 80078da:	68bb      	ldr	r3, [r7, #8]
 80078dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80078de:	4a15      	ldr	r2, [pc, #84]	; (8007934 <xTaskPriorityInherit+0xcc>)
 80078e0:	6013      	str	r3, [r2, #0]
 80078e2:	68bb      	ldr	r3, [r7, #8]
 80078e4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80078e6:	4613      	mov	r3, r2
 80078e8:	009b      	lsls	r3, r3, #2
 80078ea:	4413      	add	r3, r2
 80078ec:	009b      	lsls	r3, r3, #2
 80078ee:	4a10      	ldr	r2, [pc, #64]	; (8007930 <xTaskPriorityInherit+0xc8>)
 80078f0:	441a      	add	r2, r3
 80078f2:	68bb      	ldr	r3, [r7, #8]
 80078f4:	3304      	adds	r3, #4
 80078f6:	4619      	mov	r1, r3
 80078f8:	4610      	mov	r0, r2
 80078fa:	f7fe f944 	bl	8005b86 <vListInsertEnd>
 80078fe:	e004      	b.n	800790a <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8007900:	4b0a      	ldr	r3, [pc, #40]	; (800792c <xTaskPriorityInherit+0xc4>)
 8007902:	681b      	ldr	r3, [r3, #0]
 8007904:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007906:	68bb      	ldr	r3, [r7, #8]
 8007908:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800790a:	2301      	movs	r3, #1
 800790c:	60fb      	str	r3, [r7, #12]
 800790e:	e008      	b.n	8007922 <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8007910:	68bb      	ldr	r3, [r7, #8]
 8007912:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007914:	4b05      	ldr	r3, [pc, #20]	; (800792c <xTaskPriorityInherit+0xc4>)
 8007916:	681b      	ldr	r3, [r3, #0]
 8007918:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800791a:	429a      	cmp	r2, r3
 800791c:	d201      	bcs.n	8007922 <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800791e:	2301      	movs	r3, #1
 8007920:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8007922:	68fb      	ldr	r3, [r7, #12]
	}
 8007924:	4618      	mov	r0, r3
 8007926:	3710      	adds	r7, #16
 8007928:	46bd      	mov	sp, r7
 800792a:	bd80      	pop	{r7, pc}
 800792c:	200008ec 	.word	0x200008ec
 8007930:	200008f0 	.word	0x200008f0
 8007934:	20000dc8 	.word	0x20000dc8

08007938 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8007938:	b580      	push	{r7, lr}
 800793a:	b086      	sub	sp, #24
 800793c:	af00      	add	r7, sp, #0
 800793e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8007944:	2300      	movs	r3, #0
 8007946:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	2b00      	cmp	r3, #0
 800794c:	d056      	beq.n	80079fc <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800794e:	4b2e      	ldr	r3, [pc, #184]	; (8007a08 <xTaskPriorityDisinherit+0xd0>)
 8007950:	681b      	ldr	r3, [r3, #0]
 8007952:	693a      	ldr	r2, [r7, #16]
 8007954:	429a      	cmp	r2, r3
 8007956:	d00a      	beq.n	800796e <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8007958:	f04f 0350 	mov.w	r3, #80	; 0x50
 800795c:	f383 8811 	msr	BASEPRI, r3
 8007960:	f3bf 8f6f 	isb	sy
 8007964:	f3bf 8f4f 	dsb	sy
 8007968:	60fb      	str	r3, [r7, #12]
}
 800796a:	bf00      	nop
 800796c:	e7fe      	b.n	800796c <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800796e:	693b      	ldr	r3, [r7, #16]
 8007970:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007972:	2b00      	cmp	r3, #0
 8007974:	d10a      	bne.n	800798c <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8007976:	f04f 0350 	mov.w	r3, #80	; 0x50
 800797a:	f383 8811 	msr	BASEPRI, r3
 800797e:	f3bf 8f6f 	isb	sy
 8007982:	f3bf 8f4f 	dsb	sy
 8007986:	60bb      	str	r3, [r7, #8]
}
 8007988:	bf00      	nop
 800798a:	e7fe      	b.n	800798a <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800798c:	693b      	ldr	r3, [r7, #16]
 800798e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007990:	1e5a      	subs	r2, r3, #1
 8007992:	693b      	ldr	r3, [r7, #16]
 8007994:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8007996:	693b      	ldr	r3, [r7, #16]
 8007998:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800799a:	693b      	ldr	r3, [r7, #16]
 800799c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800799e:	429a      	cmp	r2, r3
 80079a0:	d02c      	beq.n	80079fc <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80079a2:	693b      	ldr	r3, [r7, #16]
 80079a4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80079a6:	2b00      	cmp	r3, #0
 80079a8:	d128      	bne.n	80079fc <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80079aa:	693b      	ldr	r3, [r7, #16]
 80079ac:	3304      	adds	r3, #4
 80079ae:	4618      	mov	r0, r3
 80079b0:	f7fe f946 	bl	8005c40 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80079b4:	693b      	ldr	r3, [r7, #16]
 80079b6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80079b8:	693b      	ldr	r3, [r7, #16]
 80079ba:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80079bc:	693b      	ldr	r3, [r7, #16]
 80079be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80079c0:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80079c4:	693b      	ldr	r3, [r7, #16]
 80079c6:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80079c8:	693b      	ldr	r3, [r7, #16]
 80079ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80079cc:	4b0f      	ldr	r3, [pc, #60]	; (8007a0c <xTaskPriorityDisinherit+0xd4>)
 80079ce:	681b      	ldr	r3, [r3, #0]
 80079d0:	429a      	cmp	r2, r3
 80079d2:	d903      	bls.n	80079dc <xTaskPriorityDisinherit+0xa4>
 80079d4:	693b      	ldr	r3, [r7, #16]
 80079d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80079d8:	4a0c      	ldr	r2, [pc, #48]	; (8007a0c <xTaskPriorityDisinherit+0xd4>)
 80079da:	6013      	str	r3, [r2, #0]
 80079dc:	693b      	ldr	r3, [r7, #16]
 80079de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80079e0:	4613      	mov	r3, r2
 80079e2:	009b      	lsls	r3, r3, #2
 80079e4:	4413      	add	r3, r2
 80079e6:	009b      	lsls	r3, r3, #2
 80079e8:	4a09      	ldr	r2, [pc, #36]	; (8007a10 <xTaskPriorityDisinherit+0xd8>)
 80079ea:	441a      	add	r2, r3
 80079ec:	693b      	ldr	r3, [r7, #16]
 80079ee:	3304      	adds	r3, #4
 80079f0:	4619      	mov	r1, r3
 80079f2:	4610      	mov	r0, r2
 80079f4:	f7fe f8c7 	bl	8005b86 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80079f8:	2301      	movs	r3, #1
 80079fa:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80079fc:	697b      	ldr	r3, [r7, #20]
	}
 80079fe:	4618      	mov	r0, r3
 8007a00:	3718      	adds	r7, #24
 8007a02:	46bd      	mov	sp, r7
 8007a04:	bd80      	pop	{r7, pc}
 8007a06:	bf00      	nop
 8007a08:	200008ec 	.word	0x200008ec
 8007a0c:	20000dc8 	.word	0x20000dc8
 8007a10:	200008f0 	.word	0x200008f0

08007a14 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8007a14:	b580      	push	{r7, lr}
 8007a16:	b088      	sub	sp, #32
 8007a18:	af00      	add	r7, sp, #0
 8007a1a:	6078      	str	r0, [r7, #4]
 8007a1c:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8007a22:	2301      	movs	r3, #1
 8007a24:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	2b00      	cmp	r3, #0
 8007a2a:	d06a      	beq.n	8007b02 <vTaskPriorityDisinheritAfterTimeout+0xee>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8007a2c:	69bb      	ldr	r3, [r7, #24]
 8007a2e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007a30:	2b00      	cmp	r3, #0
 8007a32:	d10a      	bne.n	8007a4a <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 8007a34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a38:	f383 8811 	msr	BASEPRI, r3
 8007a3c:	f3bf 8f6f 	isb	sy
 8007a40:	f3bf 8f4f 	dsb	sy
 8007a44:	60fb      	str	r3, [r7, #12]
}
 8007a46:	bf00      	nop
 8007a48:	e7fe      	b.n	8007a48 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8007a4a:	69bb      	ldr	r3, [r7, #24]
 8007a4c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007a4e:	683a      	ldr	r2, [r7, #0]
 8007a50:	429a      	cmp	r2, r3
 8007a52:	d902      	bls.n	8007a5a <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8007a54:	683b      	ldr	r3, [r7, #0]
 8007a56:	61fb      	str	r3, [r7, #28]
 8007a58:	e002      	b.n	8007a60 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8007a5a:	69bb      	ldr	r3, [r7, #24]
 8007a5c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007a5e:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8007a60:	69bb      	ldr	r3, [r7, #24]
 8007a62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a64:	69fa      	ldr	r2, [r7, #28]
 8007a66:	429a      	cmp	r2, r3
 8007a68:	d04b      	beq.n	8007b02 <vTaskPriorityDisinheritAfterTimeout+0xee>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8007a6a:	69bb      	ldr	r3, [r7, #24]
 8007a6c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007a6e:	697a      	ldr	r2, [r7, #20]
 8007a70:	429a      	cmp	r2, r3
 8007a72:	d146      	bne.n	8007b02 <vTaskPriorityDisinheritAfterTimeout+0xee>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8007a74:	4b25      	ldr	r3, [pc, #148]	; (8007b0c <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 8007a76:	681b      	ldr	r3, [r3, #0]
 8007a78:	69ba      	ldr	r2, [r7, #24]
 8007a7a:	429a      	cmp	r2, r3
 8007a7c:	d10a      	bne.n	8007a94 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 8007a7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a82:	f383 8811 	msr	BASEPRI, r3
 8007a86:	f3bf 8f6f 	isb	sy
 8007a8a:	f3bf 8f4f 	dsb	sy
 8007a8e:	60bb      	str	r3, [r7, #8]
}
 8007a90:	bf00      	nop
 8007a92:	e7fe      	b.n	8007a92 <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8007a94:	69bb      	ldr	r3, [r7, #24]
 8007a96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a98:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8007a9a:	69bb      	ldr	r3, [r7, #24]
 8007a9c:	69fa      	ldr	r2, [r7, #28]
 8007a9e:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8007aa0:	69bb      	ldr	r3, [r7, #24]
 8007aa2:	699b      	ldr	r3, [r3, #24]
 8007aa4:	2b00      	cmp	r3, #0
 8007aa6:	db04      	blt.n	8007ab2 <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007aa8:	69fb      	ldr	r3, [r7, #28]
 8007aaa:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8007aae:	69bb      	ldr	r3, [r7, #24]
 8007ab0:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8007ab2:	69bb      	ldr	r3, [r7, #24]
 8007ab4:	6959      	ldr	r1, [r3, #20]
 8007ab6:	693a      	ldr	r2, [r7, #16]
 8007ab8:	4613      	mov	r3, r2
 8007aba:	009b      	lsls	r3, r3, #2
 8007abc:	4413      	add	r3, r2
 8007abe:	009b      	lsls	r3, r3, #2
 8007ac0:	4a13      	ldr	r2, [pc, #76]	; (8007b10 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 8007ac2:	4413      	add	r3, r2
 8007ac4:	4299      	cmp	r1, r3
 8007ac6:	d11c      	bne.n	8007b02 <vTaskPriorityDisinheritAfterTimeout+0xee>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007ac8:	69bb      	ldr	r3, [r7, #24]
 8007aca:	3304      	adds	r3, #4
 8007acc:	4618      	mov	r0, r3
 8007ace:	f7fe f8b7 	bl	8005c40 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8007ad2:	69bb      	ldr	r3, [r7, #24]
 8007ad4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007ad6:	4b0f      	ldr	r3, [pc, #60]	; (8007b14 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8007ad8:	681b      	ldr	r3, [r3, #0]
 8007ada:	429a      	cmp	r2, r3
 8007adc:	d903      	bls.n	8007ae6 <vTaskPriorityDisinheritAfterTimeout+0xd2>
 8007ade:	69bb      	ldr	r3, [r7, #24]
 8007ae0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ae2:	4a0c      	ldr	r2, [pc, #48]	; (8007b14 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8007ae4:	6013      	str	r3, [r2, #0]
 8007ae6:	69bb      	ldr	r3, [r7, #24]
 8007ae8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007aea:	4613      	mov	r3, r2
 8007aec:	009b      	lsls	r3, r3, #2
 8007aee:	4413      	add	r3, r2
 8007af0:	009b      	lsls	r3, r3, #2
 8007af2:	4a07      	ldr	r2, [pc, #28]	; (8007b10 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 8007af4:	441a      	add	r2, r3
 8007af6:	69bb      	ldr	r3, [r7, #24]
 8007af8:	3304      	adds	r3, #4
 8007afa:	4619      	mov	r1, r3
 8007afc:	4610      	mov	r0, r2
 8007afe:	f7fe f842 	bl	8005b86 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8007b02:	bf00      	nop
 8007b04:	3720      	adds	r7, #32
 8007b06:	46bd      	mov	sp, r7
 8007b08:	bd80      	pop	{r7, pc}
 8007b0a:	bf00      	nop
 8007b0c:	200008ec 	.word	0x200008ec
 8007b10:	200008f0 	.word	0x200008f0
 8007b14:	20000dc8 	.word	0x20000dc8

08007b18 <uxTaskResetEventItemValue>:

#endif /* ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

TickType_t uxTaskResetEventItemValue( void )
{
 8007b18:	b480      	push	{r7}
 8007b1a:	b083      	sub	sp, #12
 8007b1c:	af00      	add	r7, sp, #0
TickType_t uxReturn;

	uxReturn = listGET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ) );
 8007b1e:	4b09      	ldr	r3, [pc, #36]	; (8007b44 <uxTaskResetEventItemValue+0x2c>)
 8007b20:	681b      	ldr	r3, [r3, #0]
 8007b22:	699b      	ldr	r3, [r3, #24]
 8007b24:	607b      	str	r3, [r7, #4]

	/* Reset the event list item to its normal value - so it can be used with
	queues and semaphores. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007b26:	4b07      	ldr	r3, [pc, #28]	; (8007b44 <uxTaskResetEventItemValue+0x2c>)
 8007b28:	681b      	ldr	r3, [r3, #0]
 8007b2a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007b2c:	4b05      	ldr	r3, [pc, #20]	; (8007b44 <uxTaskResetEventItemValue+0x2c>)
 8007b2e:	681b      	ldr	r3, [r3, #0]
 8007b30:	f1c2 0238 	rsb	r2, r2, #56	; 0x38
 8007b34:	619a      	str	r2, [r3, #24]

	return uxReturn;
 8007b36:	687b      	ldr	r3, [r7, #4]
}
 8007b38:	4618      	mov	r0, r3
 8007b3a:	370c      	adds	r7, #12
 8007b3c:	46bd      	mov	sp, r7
 8007b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b42:	4770      	bx	lr
 8007b44:	200008ec 	.word	0x200008ec

08007b48 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8007b48:	b480      	push	{r7}
 8007b4a:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8007b4c:	4b07      	ldr	r3, [pc, #28]	; (8007b6c <pvTaskIncrementMutexHeldCount+0x24>)
 8007b4e:	681b      	ldr	r3, [r3, #0]
 8007b50:	2b00      	cmp	r3, #0
 8007b52:	d004      	beq.n	8007b5e <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8007b54:	4b05      	ldr	r3, [pc, #20]	; (8007b6c <pvTaskIncrementMutexHeldCount+0x24>)
 8007b56:	681b      	ldr	r3, [r3, #0]
 8007b58:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8007b5a:	3201      	adds	r2, #1
 8007b5c:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 8007b5e:	4b03      	ldr	r3, [pc, #12]	; (8007b6c <pvTaskIncrementMutexHeldCount+0x24>)
 8007b60:	681b      	ldr	r3, [r3, #0]
	}
 8007b62:	4618      	mov	r0, r3
 8007b64:	46bd      	mov	sp, r7
 8007b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b6a:	4770      	bx	lr
 8007b6c:	200008ec 	.word	0x200008ec

08007b70 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8007b70:	b580      	push	{r7, lr}
 8007b72:	b084      	sub	sp, #16
 8007b74:	af00      	add	r7, sp, #0
 8007b76:	6078      	str	r0, [r7, #4]
 8007b78:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8007b7a:	4b21      	ldr	r3, [pc, #132]	; (8007c00 <prvAddCurrentTaskToDelayedList+0x90>)
 8007b7c:	681b      	ldr	r3, [r3, #0]
 8007b7e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007b80:	4b20      	ldr	r3, [pc, #128]	; (8007c04 <prvAddCurrentTaskToDelayedList+0x94>)
 8007b82:	681b      	ldr	r3, [r3, #0]
 8007b84:	3304      	adds	r3, #4
 8007b86:	4618      	mov	r0, r3
 8007b88:	f7fe f85a 	bl	8005c40 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007b92:	d10a      	bne.n	8007baa <prvAddCurrentTaskToDelayedList+0x3a>
 8007b94:	683b      	ldr	r3, [r7, #0]
 8007b96:	2b00      	cmp	r3, #0
 8007b98:	d007      	beq.n	8007baa <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007b9a:	4b1a      	ldr	r3, [pc, #104]	; (8007c04 <prvAddCurrentTaskToDelayedList+0x94>)
 8007b9c:	681b      	ldr	r3, [r3, #0]
 8007b9e:	3304      	adds	r3, #4
 8007ba0:	4619      	mov	r1, r3
 8007ba2:	4819      	ldr	r0, [pc, #100]	; (8007c08 <prvAddCurrentTaskToDelayedList+0x98>)
 8007ba4:	f7fd ffef 	bl	8005b86 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8007ba8:	e026      	b.n	8007bf8 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8007baa:	68fa      	ldr	r2, [r7, #12]
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	4413      	add	r3, r2
 8007bb0:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8007bb2:	4b14      	ldr	r3, [pc, #80]	; (8007c04 <prvAddCurrentTaskToDelayedList+0x94>)
 8007bb4:	681b      	ldr	r3, [r3, #0]
 8007bb6:	68ba      	ldr	r2, [r7, #8]
 8007bb8:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8007bba:	68ba      	ldr	r2, [r7, #8]
 8007bbc:	68fb      	ldr	r3, [r7, #12]
 8007bbe:	429a      	cmp	r2, r3
 8007bc0:	d209      	bcs.n	8007bd6 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007bc2:	4b12      	ldr	r3, [pc, #72]	; (8007c0c <prvAddCurrentTaskToDelayedList+0x9c>)
 8007bc4:	681a      	ldr	r2, [r3, #0]
 8007bc6:	4b0f      	ldr	r3, [pc, #60]	; (8007c04 <prvAddCurrentTaskToDelayedList+0x94>)
 8007bc8:	681b      	ldr	r3, [r3, #0]
 8007bca:	3304      	adds	r3, #4
 8007bcc:	4619      	mov	r1, r3
 8007bce:	4610      	mov	r0, r2
 8007bd0:	f7fd fffd 	bl	8005bce <vListInsert>
}
 8007bd4:	e010      	b.n	8007bf8 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007bd6:	4b0e      	ldr	r3, [pc, #56]	; (8007c10 <prvAddCurrentTaskToDelayedList+0xa0>)
 8007bd8:	681a      	ldr	r2, [r3, #0]
 8007bda:	4b0a      	ldr	r3, [pc, #40]	; (8007c04 <prvAddCurrentTaskToDelayedList+0x94>)
 8007bdc:	681b      	ldr	r3, [r3, #0]
 8007bde:	3304      	adds	r3, #4
 8007be0:	4619      	mov	r1, r3
 8007be2:	4610      	mov	r0, r2
 8007be4:	f7fd fff3 	bl	8005bce <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8007be8:	4b0a      	ldr	r3, [pc, #40]	; (8007c14 <prvAddCurrentTaskToDelayedList+0xa4>)
 8007bea:	681b      	ldr	r3, [r3, #0]
 8007bec:	68ba      	ldr	r2, [r7, #8]
 8007bee:	429a      	cmp	r2, r3
 8007bf0:	d202      	bcs.n	8007bf8 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8007bf2:	4a08      	ldr	r2, [pc, #32]	; (8007c14 <prvAddCurrentTaskToDelayedList+0xa4>)
 8007bf4:	68bb      	ldr	r3, [r7, #8]
 8007bf6:	6013      	str	r3, [r2, #0]
}
 8007bf8:	bf00      	nop
 8007bfa:	3710      	adds	r7, #16
 8007bfc:	46bd      	mov	sp, r7
 8007bfe:	bd80      	pop	{r7, pc}
 8007c00:	20000dc4 	.word	0x20000dc4
 8007c04:	200008ec 	.word	0x200008ec
 8007c08:	20000dac 	.word	0x20000dac
 8007c0c:	20000d7c 	.word	0x20000d7c
 8007c10:	20000d78 	.word	0x20000d78
 8007c14:	20000de0 	.word	0x20000de0

08007c18 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8007c18:	b580      	push	{r7, lr}
 8007c1a:	b08a      	sub	sp, #40	; 0x28
 8007c1c:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8007c1e:	2300      	movs	r3, #0
 8007c20:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8007c22:	f000 fb07 	bl	8008234 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8007c26:	4b1c      	ldr	r3, [pc, #112]	; (8007c98 <xTimerCreateTimerTask+0x80>)
 8007c28:	681b      	ldr	r3, [r3, #0]
 8007c2a:	2b00      	cmp	r3, #0
 8007c2c:	d021      	beq.n	8007c72 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8007c2e:	2300      	movs	r3, #0
 8007c30:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8007c32:	2300      	movs	r3, #0
 8007c34:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8007c36:	1d3a      	adds	r2, r7, #4
 8007c38:	f107 0108 	add.w	r1, r7, #8
 8007c3c:	f107 030c 	add.w	r3, r7, #12
 8007c40:	4618      	mov	r0, r3
 8007c42:	f7fd fced 	bl	8005620 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8007c46:	6879      	ldr	r1, [r7, #4]
 8007c48:	68bb      	ldr	r3, [r7, #8]
 8007c4a:	68fa      	ldr	r2, [r7, #12]
 8007c4c:	9202      	str	r2, [sp, #8]
 8007c4e:	9301      	str	r3, [sp, #4]
 8007c50:	2302      	movs	r3, #2
 8007c52:	9300      	str	r3, [sp, #0]
 8007c54:	2300      	movs	r3, #0
 8007c56:	460a      	mov	r2, r1
 8007c58:	4910      	ldr	r1, [pc, #64]	; (8007c9c <xTimerCreateTimerTask+0x84>)
 8007c5a:	4811      	ldr	r0, [pc, #68]	; (8007ca0 <xTimerCreateTimerTask+0x88>)
 8007c5c:	f7fe ff1a 	bl	8006a94 <xTaskCreateStatic>
 8007c60:	4603      	mov	r3, r0
 8007c62:	4a10      	ldr	r2, [pc, #64]	; (8007ca4 <xTimerCreateTimerTask+0x8c>)
 8007c64:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8007c66:	4b0f      	ldr	r3, [pc, #60]	; (8007ca4 <xTimerCreateTimerTask+0x8c>)
 8007c68:	681b      	ldr	r3, [r3, #0]
 8007c6a:	2b00      	cmp	r3, #0
 8007c6c:	d001      	beq.n	8007c72 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8007c6e:	2301      	movs	r3, #1
 8007c70:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8007c72:	697b      	ldr	r3, [r7, #20]
 8007c74:	2b00      	cmp	r3, #0
 8007c76:	d10a      	bne.n	8007c8e <xTimerCreateTimerTask+0x76>
	__asm volatile
 8007c78:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c7c:	f383 8811 	msr	BASEPRI, r3
 8007c80:	f3bf 8f6f 	isb	sy
 8007c84:	f3bf 8f4f 	dsb	sy
 8007c88:	613b      	str	r3, [r7, #16]
}
 8007c8a:	bf00      	nop
 8007c8c:	e7fe      	b.n	8007c8c <xTimerCreateTimerTask+0x74>
	return xReturn;
 8007c8e:	697b      	ldr	r3, [r7, #20]
}
 8007c90:	4618      	mov	r0, r3
 8007c92:	3718      	adds	r7, #24
 8007c94:	46bd      	mov	sp, r7
 8007c96:	bd80      	pop	{r7, pc}
 8007c98:	20000e1c 	.word	0x20000e1c
 8007c9c:	0800a654 	.word	0x0800a654
 8007ca0:	08007ddd 	.word	0x08007ddd
 8007ca4:	20000e20 	.word	0x20000e20

08007ca8 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8007ca8:	b580      	push	{r7, lr}
 8007caa:	b08a      	sub	sp, #40	; 0x28
 8007cac:	af00      	add	r7, sp, #0
 8007cae:	60f8      	str	r0, [r7, #12]
 8007cb0:	60b9      	str	r1, [r7, #8]
 8007cb2:	607a      	str	r2, [r7, #4]
 8007cb4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8007cb6:	2300      	movs	r3, #0
 8007cb8:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8007cba:	68fb      	ldr	r3, [r7, #12]
 8007cbc:	2b00      	cmp	r3, #0
 8007cbe:	d10a      	bne.n	8007cd6 <xTimerGenericCommand+0x2e>
	__asm volatile
 8007cc0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007cc4:	f383 8811 	msr	BASEPRI, r3
 8007cc8:	f3bf 8f6f 	isb	sy
 8007ccc:	f3bf 8f4f 	dsb	sy
 8007cd0:	623b      	str	r3, [r7, #32]
}
 8007cd2:	bf00      	nop
 8007cd4:	e7fe      	b.n	8007cd4 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8007cd6:	4b1a      	ldr	r3, [pc, #104]	; (8007d40 <xTimerGenericCommand+0x98>)
 8007cd8:	681b      	ldr	r3, [r3, #0]
 8007cda:	2b00      	cmp	r3, #0
 8007cdc:	d02a      	beq.n	8007d34 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8007cde:	68bb      	ldr	r3, [r7, #8]
 8007ce0:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8007ce2:	687b      	ldr	r3, [r7, #4]
 8007ce4:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8007ce6:	68fb      	ldr	r3, [r7, #12]
 8007ce8:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8007cea:	68bb      	ldr	r3, [r7, #8]
 8007cec:	2b05      	cmp	r3, #5
 8007cee:	dc18      	bgt.n	8007d22 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8007cf0:	f7ff fd9c 	bl	800782c <xTaskGetSchedulerState>
 8007cf4:	4603      	mov	r3, r0
 8007cf6:	2b02      	cmp	r3, #2
 8007cf8:	d109      	bne.n	8007d0e <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8007cfa:	4b11      	ldr	r3, [pc, #68]	; (8007d40 <xTimerGenericCommand+0x98>)
 8007cfc:	6818      	ldr	r0, [r3, #0]
 8007cfe:	f107 0110 	add.w	r1, r7, #16
 8007d02:	2300      	movs	r3, #0
 8007d04:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007d06:	f7fe f9b9 	bl	800607c <xQueueGenericSend>
 8007d0a:	6278      	str	r0, [r7, #36]	; 0x24
 8007d0c:	e012      	b.n	8007d34 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8007d0e:	4b0c      	ldr	r3, [pc, #48]	; (8007d40 <xTimerGenericCommand+0x98>)
 8007d10:	6818      	ldr	r0, [r3, #0]
 8007d12:	f107 0110 	add.w	r1, r7, #16
 8007d16:	2300      	movs	r3, #0
 8007d18:	2200      	movs	r2, #0
 8007d1a:	f7fe f9af 	bl	800607c <xQueueGenericSend>
 8007d1e:	6278      	str	r0, [r7, #36]	; 0x24
 8007d20:	e008      	b.n	8007d34 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8007d22:	4b07      	ldr	r3, [pc, #28]	; (8007d40 <xTimerGenericCommand+0x98>)
 8007d24:	6818      	ldr	r0, [r3, #0]
 8007d26:	f107 0110 	add.w	r1, r7, #16
 8007d2a:	2300      	movs	r3, #0
 8007d2c:	683a      	ldr	r2, [r7, #0]
 8007d2e:	f7fe faa3 	bl	8006278 <xQueueGenericSendFromISR>
 8007d32:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8007d34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8007d36:	4618      	mov	r0, r3
 8007d38:	3728      	adds	r7, #40	; 0x28
 8007d3a:	46bd      	mov	sp, r7
 8007d3c:	bd80      	pop	{r7, pc}
 8007d3e:	bf00      	nop
 8007d40:	20000e1c 	.word	0x20000e1c

08007d44 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8007d44:	b580      	push	{r7, lr}
 8007d46:	b088      	sub	sp, #32
 8007d48:	af02      	add	r7, sp, #8
 8007d4a:	6078      	str	r0, [r7, #4]
 8007d4c:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007d4e:	4b22      	ldr	r3, [pc, #136]	; (8007dd8 <prvProcessExpiredTimer+0x94>)
 8007d50:	681b      	ldr	r3, [r3, #0]
 8007d52:	68db      	ldr	r3, [r3, #12]
 8007d54:	68db      	ldr	r3, [r3, #12]
 8007d56:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007d58:	697b      	ldr	r3, [r7, #20]
 8007d5a:	3304      	adds	r3, #4
 8007d5c:	4618      	mov	r0, r3
 8007d5e:	f7fd ff6f 	bl	8005c40 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8007d62:	697b      	ldr	r3, [r7, #20]
 8007d64:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007d68:	f003 0304 	and.w	r3, r3, #4
 8007d6c:	2b00      	cmp	r3, #0
 8007d6e:	d022      	beq.n	8007db6 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8007d70:	697b      	ldr	r3, [r7, #20]
 8007d72:	699a      	ldr	r2, [r3, #24]
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	18d1      	adds	r1, r2, r3
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	683a      	ldr	r2, [r7, #0]
 8007d7c:	6978      	ldr	r0, [r7, #20]
 8007d7e:	f000 f8d1 	bl	8007f24 <prvInsertTimerInActiveList>
 8007d82:	4603      	mov	r3, r0
 8007d84:	2b00      	cmp	r3, #0
 8007d86:	d01f      	beq.n	8007dc8 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8007d88:	2300      	movs	r3, #0
 8007d8a:	9300      	str	r3, [sp, #0]
 8007d8c:	2300      	movs	r3, #0
 8007d8e:	687a      	ldr	r2, [r7, #4]
 8007d90:	2100      	movs	r1, #0
 8007d92:	6978      	ldr	r0, [r7, #20]
 8007d94:	f7ff ff88 	bl	8007ca8 <xTimerGenericCommand>
 8007d98:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8007d9a:	693b      	ldr	r3, [r7, #16]
 8007d9c:	2b00      	cmp	r3, #0
 8007d9e:	d113      	bne.n	8007dc8 <prvProcessExpiredTimer+0x84>
	__asm volatile
 8007da0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007da4:	f383 8811 	msr	BASEPRI, r3
 8007da8:	f3bf 8f6f 	isb	sy
 8007dac:	f3bf 8f4f 	dsb	sy
 8007db0:	60fb      	str	r3, [r7, #12]
}
 8007db2:	bf00      	nop
 8007db4:	e7fe      	b.n	8007db4 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8007db6:	697b      	ldr	r3, [r7, #20]
 8007db8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007dbc:	f023 0301 	bic.w	r3, r3, #1
 8007dc0:	b2da      	uxtb	r2, r3
 8007dc2:	697b      	ldr	r3, [r7, #20]
 8007dc4:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007dc8:	697b      	ldr	r3, [r7, #20]
 8007dca:	6a1b      	ldr	r3, [r3, #32]
 8007dcc:	6978      	ldr	r0, [r7, #20]
 8007dce:	4798      	blx	r3
}
 8007dd0:	bf00      	nop
 8007dd2:	3718      	adds	r7, #24
 8007dd4:	46bd      	mov	sp, r7
 8007dd6:	bd80      	pop	{r7, pc}
 8007dd8:	20000e14 	.word	0x20000e14

08007ddc <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8007ddc:	b580      	push	{r7, lr}
 8007dde:	b084      	sub	sp, #16
 8007de0:	af00      	add	r7, sp, #0
 8007de2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8007de4:	f107 0308 	add.w	r3, r7, #8
 8007de8:	4618      	mov	r0, r3
 8007dea:	f000 f857 	bl	8007e9c <prvGetNextExpireTime>
 8007dee:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8007df0:	68bb      	ldr	r3, [r7, #8]
 8007df2:	4619      	mov	r1, r3
 8007df4:	68f8      	ldr	r0, [r7, #12]
 8007df6:	f000 f803 	bl	8007e00 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8007dfa:	f000 f8d5 	bl	8007fa8 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8007dfe:	e7f1      	b.n	8007de4 <prvTimerTask+0x8>

08007e00 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8007e00:	b580      	push	{r7, lr}
 8007e02:	b084      	sub	sp, #16
 8007e04:	af00      	add	r7, sp, #0
 8007e06:	6078      	str	r0, [r7, #4]
 8007e08:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8007e0a:	f7ff f87f 	bl	8006f0c <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8007e0e:	f107 0308 	add.w	r3, r7, #8
 8007e12:	4618      	mov	r0, r3
 8007e14:	f000 f866 	bl	8007ee4 <prvSampleTimeNow>
 8007e18:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8007e1a:	68bb      	ldr	r3, [r7, #8]
 8007e1c:	2b00      	cmp	r3, #0
 8007e1e:	d130      	bne.n	8007e82 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8007e20:	683b      	ldr	r3, [r7, #0]
 8007e22:	2b00      	cmp	r3, #0
 8007e24:	d10a      	bne.n	8007e3c <prvProcessTimerOrBlockTask+0x3c>
 8007e26:	687a      	ldr	r2, [r7, #4]
 8007e28:	68fb      	ldr	r3, [r7, #12]
 8007e2a:	429a      	cmp	r2, r3
 8007e2c:	d806      	bhi.n	8007e3c <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8007e2e:	f7ff f87b 	bl	8006f28 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8007e32:	68f9      	ldr	r1, [r7, #12]
 8007e34:	6878      	ldr	r0, [r7, #4]
 8007e36:	f7ff ff85 	bl	8007d44 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8007e3a:	e024      	b.n	8007e86 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8007e3c:	683b      	ldr	r3, [r7, #0]
 8007e3e:	2b00      	cmp	r3, #0
 8007e40:	d008      	beq.n	8007e54 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8007e42:	4b13      	ldr	r3, [pc, #76]	; (8007e90 <prvProcessTimerOrBlockTask+0x90>)
 8007e44:	681b      	ldr	r3, [r3, #0]
 8007e46:	681b      	ldr	r3, [r3, #0]
 8007e48:	2b00      	cmp	r3, #0
 8007e4a:	d101      	bne.n	8007e50 <prvProcessTimerOrBlockTask+0x50>
 8007e4c:	2301      	movs	r3, #1
 8007e4e:	e000      	b.n	8007e52 <prvProcessTimerOrBlockTask+0x52>
 8007e50:	2300      	movs	r3, #0
 8007e52:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8007e54:	4b0f      	ldr	r3, [pc, #60]	; (8007e94 <prvProcessTimerOrBlockTask+0x94>)
 8007e56:	6818      	ldr	r0, [r3, #0]
 8007e58:	687a      	ldr	r2, [r7, #4]
 8007e5a:	68fb      	ldr	r3, [r7, #12]
 8007e5c:	1ad3      	subs	r3, r2, r3
 8007e5e:	683a      	ldr	r2, [r7, #0]
 8007e60:	4619      	mov	r1, r3
 8007e62:	f7fe fde3 	bl	8006a2c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8007e66:	f7ff f85f 	bl	8006f28 <xTaskResumeAll>
 8007e6a:	4603      	mov	r3, r0
 8007e6c:	2b00      	cmp	r3, #0
 8007e6e:	d10a      	bne.n	8007e86 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8007e70:	4b09      	ldr	r3, [pc, #36]	; (8007e98 <prvProcessTimerOrBlockTask+0x98>)
 8007e72:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007e76:	601a      	str	r2, [r3, #0]
 8007e78:	f3bf 8f4f 	dsb	sy
 8007e7c:	f3bf 8f6f 	isb	sy
}
 8007e80:	e001      	b.n	8007e86 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8007e82:	f7ff f851 	bl	8006f28 <xTaskResumeAll>
}
 8007e86:	bf00      	nop
 8007e88:	3710      	adds	r7, #16
 8007e8a:	46bd      	mov	sp, r7
 8007e8c:	bd80      	pop	{r7, pc}
 8007e8e:	bf00      	nop
 8007e90:	20000e18 	.word	0x20000e18
 8007e94:	20000e1c 	.word	0x20000e1c
 8007e98:	e000ed04 	.word	0xe000ed04

08007e9c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8007e9c:	b480      	push	{r7}
 8007e9e:	b085      	sub	sp, #20
 8007ea0:	af00      	add	r7, sp, #0
 8007ea2:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8007ea4:	4b0e      	ldr	r3, [pc, #56]	; (8007ee0 <prvGetNextExpireTime+0x44>)
 8007ea6:	681b      	ldr	r3, [r3, #0]
 8007ea8:	681b      	ldr	r3, [r3, #0]
 8007eaa:	2b00      	cmp	r3, #0
 8007eac:	d101      	bne.n	8007eb2 <prvGetNextExpireTime+0x16>
 8007eae:	2201      	movs	r2, #1
 8007eb0:	e000      	b.n	8007eb4 <prvGetNextExpireTime+0x18>
 8007eb2:	2200      	movs	r2, #0
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8007eb8:	687b      	ldr	r3, [r7, #4]
 8007eba:	681b      	ldr	r3, [r3, #0]
 8007ebc:	2b00      	cmp	r3, #0
 8007ebe:	d105      	bne.n	8007ecc <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007ec0:	4b07      	ldr	r3, [pc, #28]	; (8007ee0 <prvGetNextExpireTime+0x44>)
 8007ec2:	681b      	ldr	r3, [r3, #0]
 8007ec4:	68db      	ldr	r3, [r3, #12]
 8007ec6:	681b      	ldr	r3, [r3, #0]
 8007ec8:	60fb      	str	r3, [r7, #12]
 8007eca:	e001      	b.n	8007ed0 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8007ecc:	2300      	movs	r3, #0
 8007ece:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8007ed0:	68fb      	ldr	r3, [r7, #12]
}
 8007ed2:	4618      	mov	r0, r3
 8007ed4:	3714      	adds	r7, #20
 8007ed6:	46bd      	mov	sp, r7
 8007ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007edc:	4770      	bx	lr
 8007ede:	bf00      	nop
 8007ee0:	20000e14 	.word	0x20000e14

08007ee4 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8007ee4:	b580      	push	{r7, lr}
 8007ee6:	b084      	sub	sp, #16
 8007ee8:	af00      	add	r7, sp, #0
 8007eea:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8007eec:	f7ff f8ba 	bl	8007064 <xTaskGetTickCount>
 8007ef0:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8007ef2:	4b0b      	ldr	r3, [pc, #44]	; (8007f20 <prvSampleTimeNow+0x3c>)
 8007ef4:	681b      	ldr	r3, [r3, #0]
 8007ef6:	68fa      	ldr	r2, [r7, #12]
 8007ef8:	429a      	cmp	r2, r3
 8007efa:	d205      	bcs.n	8007f08 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8007efc:	f000 f936 	bl	800816c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	2201      	movs	r2, #1
 8007f04:	601a      	str	r2, [r3, #0]
 8007f06:	e002      	b.n	8007f0e <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	2200      	movs	r2, #0
 8007f0c:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8007f0e:	4a04      	ldr	r2, [pc, #16]	; (8007f20 <prvSampleTimeNow+0x3c>)
 8007f10:	68fb      	ldr	r3, [r7, #12]
 8007f12:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8007f14:	68fb      	ldr	r3, [r7, #12]
}
 8007f16:	4618      	mov	r0, r3
 8007f18:	3710      	adds	r7, #16
 8007f1a:	46bd      	mov	sp, r7
 8007f1c:	bd80      	pop	{r7, pc}
 8007f1e:	bf00      	nop
 8007f20:	20000e24 	.word	0x20000e24

08007f24 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8007f24:	b580      	push	{r7, lr}
 8007f26:	b086      	sub	sp, #24
 8007f28:	af00      	add	r7, sp, #0
 8007f2a:	60f8      	str	r0, [r7, #12]
 8007f2c:	60b9      	str	r1, [r7, #8]
 8007f2e:	607a      	str	r2, [r7, #4]
 8007f30:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8007f32:	2300      	movs	r3, #0
 8007f34:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8007f36:	68fb      	ldr	r3, [r7, #12]
 8007f38:	68ba      	ldr	r2, [r7, #8]
 8007f3a:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8007f3c:	68fb      	ldr	r3, [r7, #12]
 8007f3e:	68fa      	ldr	r2, [r7, #12]
 8007f40:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8007f42:	68ba      	ldr	r2, [r7, #8]
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	429a      	cmp	r2, r3
 8007f48:	d812      	bhi.n	8007f70 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007f4a:	687a      	ldr	r2, [r7, #4]
 8007f4c:	683b      	ldr	r3, [r7, #0]
 8007f4e:	1ad2      	subs	r2, r2, r3
 8007f50:	68fb      	ldr	r3, [r7, #12]
 8007f52:	699b      	ldr	r3, [r3, #24]
 8007f54:	429a      	cmp	r2, r3
 8007f56:	d302      	bcc.n	8007f5e <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8007f58:	2301      	movs	r3, #1
 8007f5a:	617b      	str	r3, [r7, #20]
 8007f5c:	e01b      	b.n	8007f96 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8007f5e:	4b10      	ldr	r3, [pc, #64]	; (8007fa0 <prvInsertTimerInActiveList+0x7c>)
 8007f60:	681a      	ldr	r2, [r3, #0]
 8007f62:	68fb      	ldr	r3, [r7, #12]
 8007f64:	3304      	adds	r3, #4
 8007f66:	4619      	mov	r1, r3
 8007f68:	4610      	mov	r0, r2
 8007f6a:	f7fd fe30 	bl	8005bce <vListInsert>
 8007f6e:	e012      	b.n	8007f96 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8007f70:	687a      	ldr	r2, [r7, #4]
 8007f72:	683b      	ldr	r3, [r7, #0]
 8007f74:	429a      	cmp	r2, r3
 8007f76:	d206      	bcs.n	8007f86 <prvInsertTimerInActiveList+0x62>
 8007f78:	68ba      	ldr	r2, [r7, #8]
 8007f7a:	683b      	ldr	r3, [r7, #0]
 8007f7c:	429a      	cmp	r2, r3
 8007f7e:	d302      	bcc.n	8007f86 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8007f80:	2301      	movs	r3, #1
 8007f82:	617b      	str	r3, [r7, #20]
 8007f84:	e007      	b.n	8007f96 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8007f86:	4b07      	ldr	r3, [pc, #28]	; (8007fa4 <prvInsertTimerInActiveList+0x80>)
 8007f88:	681a      	ldr	r2, [r3, #0]
 8007f8a:	68fb      	ldr	r3, [r7, #12]
 8007f8c:	3304      	adds	r3, #4
 8007f8e:	4619      	mov	r1, r3
 8007f90:	4610      	mov	r0, r2
 8007f92:	f7fd fe1c 	bl	8005bce <vListInsert>
		}
	}

	return xProcessTimerNow;
 8007f96:	697b      	ldr	r3, [r7, #20]
}
 8007f98:	4618      	mov	r0, r3
 8007f9a:	3718      	adds	r7, #24
 8007f9c:	46bd      	mov	sp, r7
 8007f9e:	bd80      	pop	{r7, pc}
 8007fa0:	20000e18 	.word	0x20000e18
 8007fa4:	20000e14 	.word	0x20000e14

08007fa8 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8007fa8:	b580      	push	{r7, lr}
 8007faa:	b08e      	sub	sp, #56	; 0x38
 8007fac:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8007fae:	e0ca      	b.n	8008146 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8007fb0:	687b      	ldr	r3, [r7, #4]
 8007fb2:	2b00      	cmp	r3, #0
 8007fb4:	da18      	bge.n	8007fe8 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8007fb6:	1d3b      	adds	r3, r7, #4
 8007fb8:	3304      	adds	r3, #4
 8007fba:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8007fbc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007fbe:	2b00      	cmp	r3, #0
 8007fc0:	d10a      	bne.n	8007fd8 <prvProcessReceivedCommands+0x30>
	__asm volatile
 8007fc2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007fc6:	f383 8811 	msr	BASEPRI, r3
 8007fca:	f3bf 8f6f 	isb	sy
 8007fce:	f3bf 8f4f 	dsb	sy
 8007fd2:	61fb      	str	r3, [r7, #28]
}
 8007fd4:	bf00      	nop
 8007fd6:	e7fe      	b.n	8007fd6 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8007fd8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007fda:	681b      	ldr	r3, [r3, #0]
 8007fdc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007fde:	6850      	ldr	r0, [r2, #4]
 8007fe0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007fe2:	6892      	ldr	r2, [r2, #8]
 8007fe4:	4611      	mov	r1, r2
 8007fe6:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8007fe8:	687b      	ldr	r3, [r7, #4]
 8007fea:	2b00      	cmp	r3, #0
 8007fec:	f2c0 80aa 	blt.w	8008144 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8007ff0:	68fb      	ldr	r3, [r7, #12]
 8007ff2:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8007ff4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ff6:	695b      	ldr	r3, [r3, #20]
 8007ff8:	2b00      	cmp	r3, #0
 8007ffa:	d004      	beq.n	8008006 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007ffc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ffe:	3304      	adds	r3, #4
 8008000:	4618      	mov	r0, r3
 8008002:	f7fd fe1d 	bl	8005c40 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8008006:	463b      	mov	r3, r7
 8008008:	4618      	mov	r0, r3
 800800a:	f7ff ff6b 	bl	8007ee4 <prvSampleTimeNow>
 800800e:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8008010:	687b      	ldr	r3, [r7, #4]
 8008012:	2b09      	cmp	r3, #9
 8008014:	f200 8097 	bhi.w	8008146 <prvProcessReceivedCommands+0x19e>
 8008018:	a201      	add	r2, pc, #4	; (adr r2, 8008020 <prvProcessReceivedCommands+0x78>)
 800801a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800801e:	bf00      	nop
 8008020:	08008049 	.word	0x08008049
 8008024:	08008049 	.word	0x08008049
 8008028:	08008049 	.word	0x08008049
 800802c:	080080bd 	.word	0x080080bd
 8008030:	080080d1 	.word	0x080080d1
 8008034:	0800811b 	.word	0x0800811b
 8008038:	08008049 	.word	0x08008049
 800803c:	08008049 	.word	0x08008049
 8008040:	080080bd 	.word	0x080080bd
 8008044:	080080d1 	.word	0x080080d1
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8008048:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800804a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800804e:	f043 0301 	orr.w	r3, r3, #1
 8008052:	b2da      	uxtb	r2, r3
 8008054:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008056:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800805a:	68ba      	ldr	r2, [r7, #8]
 800805c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800805e:	699b      	ldr	r3, [r3, #24]
 8008060:	18d1      	adds	r1, r2, r3
 8008062:	68bb      	ldr	r3, [r7, #8]
 8008064:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008066:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008068:	f7ff ff5c 	bl	8007f24 <prvInsertTimerInActiveList>
 800806c:	4603      	mov	r3, r0
 800806e:	2b00      	cmp	r3, #0
 8008070:	d069      	beq.n	8008146 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8008072:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008074:	6a1b      	ldr	r3, [r3, #32]
 8008076:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008078:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800807a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800807c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008080:	f003 0304 	and.w	r3, r3, #4
 8008084:	2b00      	cmp	r3, #0
 8008086:	d05e      	beq.n	8008146 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8008088:	68ba      	ldr	r2, [r7, #8]
 800808a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800808c:	699b      	ldr	r3, [r3, #24]
 800808e:	441a      	add	r2, r3
 8008090:	2300      	movs	r3, #0
 8008092:	9300      	str	r3, [sp, #0]
 8008094:	2300      	movs	r3, #0
 8008096:	2100      	movs	r1, #0
 8008098:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800809a:	f7ff fe05 	bl	8007ca8 <xTimerGenericCommand>
 800809e:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 80080a0:	6a3b      	ldr	r3, [r7, #32]
 80080a2:	2b00      	cmp	r3, #0
 80080a4:	d14f      	bne.n	8008146 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 80080a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80080aa:	f383 8811 	msr	BASEPRI, r3
 80080ae:	f3bf 8f6f 	isb	sy
 80080b2:	f3bf 8f4f 	dsb	sy
 80080b6:	61bb      	str	r3, [r7, #24]
}
 80080b8:	bf00      	nop
 80080ba:	e7fe      	b.n	80080ba <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80080bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80080be:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80080c2:	f023 0301 	bic.w	r3, r3, #1
 80080c6:	b2da      	uxtb	r2, r3
 80080c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80080ca:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 80080ce:	e03a      	b.n	8008146 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80080d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80080d2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80080d6:	f043 0301 	orr.w	r3, r3, #1
 80080da:	b2da      	uxtb	r2, r3
 80080dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80080de:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80080e2:	68ba      	ldr	r2, [r7, #8]
 80080e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80080e6:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80080e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80080ea:	699b      	ldr	r3, [r3, #24]
 80080ec:	2b00      	cmp	r3, #0
 80080ee:	d10a      	bne.n	8008106 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 80080f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80080f4:	f383 8811 	msr	BASEPRI, r3
 80080f8:	f3bf 8f6f 	isb	sy
 80080fc:	f3bf 8f4f 	dsb	sy
 8008100:	617b      	str	r3, [r7, #20]
}
 8008102:	bf00      	nop
 8008104:	e7fe      	b.n	8008104 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8008106:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008108:	699a      	ldr	r2, [r3, #24]
 800810a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800810c:	18d1      	adds	r1, r2, r3
 800810e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008110:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008112:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008114:	f7ff ff06 	bl	8007f24 <prvInsertTimerInActiveList>
					break;
 8008118:	e015      	b.n	8008146 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800811a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800811c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008120:	f003 0302 	and.w	r3, r3, #2
 8008124:	2b00      	cmp	r3, #0
 8008126:	d103      	bne.n	8008130 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8008128:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800812a:	f000 fc01 	bl	8008930 <vPortFree>
 800812e:	e00a      	b.n	8008146 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8008130:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008132:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008136:	f023 0301 	bic.w	r3, r3, #1
 800813a:	b2da      	uxtb	r2, r3
 800813c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800813e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8008142:	e000      	b.n	8008146 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8008144:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8008146:	4b08      	ldr	r3, [pc, #32]	; (8008168 <prvProcessReceivedCommands+0x1c0>)
 8008148:	681b      	ldr	r3, [r3, #0]
 800814a:	1d39      	adds	r1, r7, #4
 800814c:	2200      	movs	r2, #0
 800814e:	4618      	mov	r0, r3
 8008150:	f7fe f92e 	bl	80063b0 <xQueueReceive>
 8008154:	4603      	mov	r3, r0
 8008156:	2b00      	cmp	r3, #0
 8008158:	f47f af2a 	bne.w	8007fb0 <prvProcessReceivedCommands+0x8>
	}
}
 800815c:	bf00      	nop
 800815e:	bf00      	nop
 8008160:	3730      	adds	r7, #48	; 0x30
 8008162:	46bd      	mov	sp, r7
 8008164:	bd80      	pop	{r7, pc}
 8008166:	bf00      	nop
 8008168:	20000e1c 	.word	0x20000e1c

0800816c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800816c:	b580      	push	{r7, lr}
 800816e:	b088      	sub	sp, #32
 8008170:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8008172:	e048      	b.n	8008206 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8008174:	4b2d      	ldr	r3, [pc, #180]	; (800822c <prvSwitchTimerLists+0xc0>)
 8008176:	681b      	ldr	r3, [r3, #0]
 8008178:	68db      	ldr	r3, [r3, #12]
 800817a:	681b      	ldr	r3, [r3, #0]
 800817c:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800817e:	4b2b      	ldr	r3, [pc, #172]	; (800822c <prvSwitchTimerLists+0xc0>)
 8008180:	681b      	ldr	r3, [r3, #0]
 8008182:	68db      	ldr	r3, [r3, #12]
 8008184:	68db      	ldr	r3, [r3, #12]
 8008186:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008188:	68fb      	ldr	r3, [r7, #12]
 800818a:	3304      	adds	r3, #4
 800818c:	4618      	mov	r0, r3
 800818e:	f7fd fd57 	bl	8005c40 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8008192:	68fb      	ldr	r3, [r7, #12]
 8008194:	6a1b      	ldr	r3, [r3, #32]
 8008196:	68f8      	ldr	r0, [r7, #12]
 8008198:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800819a:	68fb      	ldr	r3, [r7, #12]
 800819c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80081a0:	f003 0304 	and.w	r3, r3, #4
 80081a4:	2b00      	cmp	r3, #0
 80081a6:	d02e      	beq.n	8008206 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80081a8:	68fb      	ldr	r3, [r7, #12]
 80081aa:	699b      	ldr	r3, [r3, #24]
 80081ac:	693a      	ldr	r2, [r7, #16]
 80081ae:	4413      	add	r3, r2
 80081b0:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 80081b2:	68ba      	ldr	r2, [r7, #8]
 80081b4:	693b      	ldr	r3, [r7, #16]
 80081b6:	429a      	cmp	r2, r3
 80081b8:	d90e      	bls.n	80081d8 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80081ba:	68fb      	ldr	r3, [r7, #12]
 80081bc:	68ba      	ldr	r2, [r7, #8]
 80081be:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80081c0:	68fb      	ldr	r3, [r7, #12]
 80081c2:	68fa      	ldr	r2, [r7, #12]
 80081c4:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80081c6:	4b19      	ldr	r3, [pc, #100]	; (800822c <prvSwitchTimerLists+0xc0>)
 80081c8:	681a      	ldr	r2, [r3, #0]
 80081ca:	68fb      	ldr	r3, [r7, #12]
 80081cc:	3304      	adds	r3, #4
 80081ce:	4619      	mov	r1, r3
 80081d0:	4610      	mov	r0, r2
 80081d2:	f7fd fcfc 	bl	8005bce <vListInsert>
 80081d6:	e016      	b.n	8008206 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80081d8:	2300      	movs	r3, #0
 80081da:	9300      	str	r3, [sp, #0]
 80081dc:	2300      	movs	r3, #0
 80081de:	693a      	ldr	r2, [r7, #16]
 80081e0:	2100      	movs	r1, #0
 80081e2:	68f8      	ldr	r0, [r7, #12]
 80081e4:	f7ff fd60 	bl	8007ca8 <xTimerGenericCommand>
 80081e8:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 80081ea:	687b      	ldr	r3, [r7, #4]
 80081ec:	2b00      	cmp	r3, #0
 80081ee:	d10a      	bne.n	8008206 <prvSwitchTimerLists+0x9a>
	__asm volatile
 80081f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80081f4:	f383 8811 	msr	BASEPRI, r3
 80081f8:	f3bf 8f6f 	isb	sy
 80081fc:	f3bf 8f4f 	dsb	sy
 8008200:	603b      	str	r3, [r7, #0]
}
 8008202:	bf00      	nop
 8008204:	e7fe      	b.n	8008204 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8008206:	4b09      	ldr	r3, [pc, #36]	; (800822c <prvSwitchTimerLists+0xc0>)
 8008208:	681b      	ldr	r3, [r3, #0]
 800820a:	681b      	ldr	r3, [r3, #0]
 800820c:	2b00      	cmp	r3, #0
 800820e:	d1b1      	bne.n	8008174 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8008210:	4b06      	ldr	r3, [pc, #24]	; (800822c <prvSwitchTimerLists+0xc0>)
 8008212:	681b      	ldr	r3, [r3, #0]
 8008214:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8008216:	4b06      	ldr	r3, [pc, #24]	; (8008230 <prvSwitchTimerLists+0xc4>)
 8008218:	681b      	ldr	r3, [r3, #0]
 800821a:	4a04      	ldr	r2, [pc, #16]	; (800822c <prvSwitchTimerLists+0xc0>)
 800821c:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800821e:	4a04      	ldr	r2, [pc, #16]	; (8008230 <prvSwitchTimerLists+0xc4>)
 8008220:	697b      	ldr	r3, [r7, #20]
 8008222:	6013      	str	r3, [r2, #0]
}
 8008224:	bf00      	nop
 8008226:	3718      	adds	r7, #24
 8008228:	46bd      	mov	sp, r7
 800822a:	bd80      	pop	{r7, pc}
 800822c:	20000e14 	.word	0x20000e14
 8008230:	20000e18 	.word	0x20000e18

08008234 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8008234:	b580      	push	{r7, lr}
 8008236:	b082      	sub	sp, #8
 8008238:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800823a:	f000 f98b 	bl	8008554 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800823e:	4b15      	ldr	r3, [pc, #84]	; (8008294 <prvCheckForValidListAndQueue+0x60>)
 8008240:	681b      	ldr	r3, [r3, #0]
 8008242:	2b00      	cmp	r3, #0
 8008244:	d120      	bne.n	8008288 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8008246:	4814      	ldr	r0, [pc, #80]	; (8008298 <prvCheckForValidListAndQueue+0x64>)
 8008248:	f7fd fc70 	bl	8005b2c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800824c:	4813      	ldr	r0, [pc, #76]	; (800829c <prvCheckForValidListAndQueue+0x68>)
 800824e:	f7fd fc6d 	bl	8005b2c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8008252:	4b13      	ldr	r3, [pc, #76]	; (80082a0 <prvCheckForValidListAndQueue+0x6c>)
 8008254:	4a10      	ldr	r2, [pc, #64]	; (8008298 <prvCheckForValidListAndQueue+0x64>)
 8008256:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8008258:	4b12      	ldr	r3, [pc, #72]	; (80082a4 <prvCheckForValidListAndQueue+0x70>)
 800825a:	4a10      	ldr	r2, [pc, #64]	; (800829c <prvCheckForValidListAndQueue+0x68>)
 800825c:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800825e:	2300      	movs	r3, #0
 8008260:	9300      	str	r3, [sp, #0]
 8008262:	4b11      	ldr	r3, [pc, #68]	; (80082a8 <prvCheckForValidListAndQueue+0x74>)
 8008264:	4a11      	ldr	r2, [pc, #68]	; (80082ac <prvCheckForValidListAndQueue+0x78>)
 8008266:	2110      	movs	r1, #16
 8008268:	200a      	movs	r0, #10
 800826a:	f7fd fd7b 	bl	8005d64 <xQueueGenericCreateStatic>
 800826e:	4603      	mov	r3, r0
 8008270:	4a08      	ldr	r2, [pc, #32]	; (8008294 <prvCheckForValidListAndQueue+0x60>)
 8008272:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8008274:	4b07      	ldr	r3, [pc, #28]	; (8008294 <prvCheckForValidListAndQueue+0x60>)
 8008276:	681b      	ldr	r3, [r3, #0]
 8008278:	2b00      	cmp	r3, #0
 800827a:	d005      	beq.n	8008288 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800827c:	4b05      	ldr	r3, [pc, #20]	; (8008294 <prvCheckForValidListAndQueue+0x60>)
 800827e:	681b      	ldr	r3, [r3, #0]
 8008280:	490b      	ldr	r1, [pc, #44]	; (80082b0 <prvCheckForValidListAndQueue+0x7c>)
 8008282:	4618      	mov	r0, r3
 8008284:	f7fe fba8 	bl	80069d8 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8008288:	f000 f994 	bl	80085b4 <vPortExitCritical>
}
 800828c:	bf00      	nop
 800828e:	46bd      	mov	sp, r7
 8008290:	bd80      	pop	{r7, pc}
 8008292:	bf00      	nop
 8008294:	20000e1c 	.word	0x20000e1c
 8008298:	20000dec 	.word	0x20000dec
 800829c:	20000e00 	.word	0x20000e00
 80082a0:	20000e14 	.word	0x20000e14
 80082a4:	20000e18 	.word	0x20000e18
 80082a8:	20000ec8 	.word	0x20000ec8
 80082ac:	20000e28 	.word	0x20000e28
 80082b0:	0800a65c 	.word	0x0800a65c

080082b4 <xTimerPendFunctionCallFromISR>:
/*-----------------------------------------------------------*/

#if( INCLUDE_xTimerPendFunctionCall == 1 )

	BaseType_t xTimerPendFunctionCallFromISR( PendedFunction_t xFunctionToPend, void *pvParameter1, uint32_t ulParameter2, BaseType_t *pxHigherPriorityTaskWoken )
	{
 80082b4:	b580      	push	{r7, lr}
 80082b6:	b08a      	sub	sp, #40	; 0x28
 80082b8:	af00      	add	r7, sp, #0
 80082ba:	60f8      	str	r0, [r7, #12]
 80082bc:	60b9      	str	r1, [r7, #8]
 80082be:	607a      	str	r2, [r7, #4]
 80082c0:	603b      	str	r3, [r7, #0]
	DaemonTaskMessage_t xMessage;
	BaseType_t xReturn;

		/* Complete the message with the function parameters and post it to the
		daemon task. */
		xMessage.xMessageID = tmrCOMMAND_EXECUTE_CALLBACK_FROM_ISR;
 80082c2:	f06f 0301 	mvn.w	r3, #1
 80082c6:	617b      	str	r3, [r7, #20]
		xMessage.u.xCallbackParameters.pxCallbackFunction = xFunctionToPend;
 80082c8:	68fb      	ldr	r3, [r7, #12]
 80082ca:	61bb      	str	r3, [r7, #24]
		xMessage.u.xCallbackParameters.pvParameter1 = pvParameter1;
 80082cc:	68bb      	ldr	r3, [r7, #8]
 80082ce:	61fb      	str	r3, [r7, #28]
		xMessage.u.xCallbackParameters.ulParameter2 = ulParameter2;
 80082d0:	687b      	ldr	r3, [r7, #4]
 80082d2:	623b      	str	r3, [r7, #32]

		xReturn = xQueueSendFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80082d4:	4b06      	ldr	r3, [pc, #24]	; (80082f0 <xTimerPendFunctionCallFromISR+0x3c>)
 80082d6:	6818      	ldr	r0, [r3, #0]
 80082d8:	f107 0114 	add.w	r1, r7, #20
 80082dc:	2300      	movs	r3, #0
 80082de:	683a      	ldr	r2, [r7, #0]
 80082e0:	f7fd ffca 	bl	8006278 <xQueueGenericSendFromISR>
 80082e4:	6278      	str	r0, [r7, #36]	; 0x24

		tracePEND_FUNC_CALL_FROM_ISR( xFunctionToPend, pvParameter1, ulParameter2, xReturn );

		return xReturn;
 80082e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 80082e8:	4618      	mov	r0, r3
 80082ea:	3728      	adds	r7, #40	; 0x28
 80082ec:	46bd      	mov	sp, r7
 80082ee:	bd80      	pop	{r7, pc}
 80082f0:	20000e1c 	.word	0x20000e1c

080082f4 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80082f4:	b480      	push	{r7}
 80082f6:	b085      	sub	sp, #20
 80082f8:	af00      	add	r7, sp, #0
 80082fa:	60f8      	str	r0, [r7, #12]
 80082fc:	60b9      	str	r1, [r7, #8]
 80082fe:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8008300:	68fb      	ldr	r3, [r7, #12]
 8008302:	3b04      	subs	r3, #4
 8008304:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8008306:	68fb      	ldr	r3, [r7, #12]
 8008308:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800830c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800830e:	68fb      	ldr	r3, [r7, #12]
 8008310:	3b04      	subs	r3, #4
 8008312:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8008314:	68bb      	ldr	r3, [r7, #8]
 8008316:	f023 0201 	bic.w	r2, r3, #1
 800831a:	68fb      	ldr	r3, [r7, #12]
 800831c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800831e:	68fb      	ldr	r3, [r7, #12]
 8008320:	3b04      	subs	r3, #4
 8008322:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8008324:	4a0c      	ldr	r2, [pc, #48]	; (8008358 <pxPortInitialiseStack+0x64>)
 8008326:	68fb      	ldr	r3, [r7, #12]
 8008328:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800832a:	68fb      	ldr	r3, [r7, #12]
 800832c:	3b14      	subs	r3, #20
 800832e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8008330:	687a      	ldr	r2, [r7, #4]
 8008332:	68fb      	ldr	r3, [r7, #12]
 8008334:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8008336:	68fb      	ldr	r3, [r7, #12]
 8008338:	3b04      	subs	r3, #4
 800833a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800833c:	68fb      	ldr	r3, [r7, #12]
 800833e:	f06f 0202 	mvn.w	r2, #2
 8008342:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8008344:	68fb      	ldr	r3, [r7, #12]
 8008346:	3b20      	subs	r3, #32
 8008348:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800834a:	68fb      	ldr	r3, [r7, #12]
}
 800834c:	4618      	mov	r0, r3
 800834e:	3714      	adds	r7, #20
 8008350:	46bd      	mov	sp, r7
 8008352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008356:	4770      	bx	lr
 8008358:	0800835d 	.word	0x0800835d

0800835c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800835c:	b480      	push	{r7}
 800835e:	b085      	sub	sp, #20
 8008360:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8008362:	2300      	movs	r3, #0
 8008364:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8008366:	4b12      	ldr	r3, [pc, #72]	; (80083b0 <prvTaskExitError+0x54>)
 8008368:	681b      	ldr	r3, [r3, #0]
 800836a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800836e:	d00a      	beq.n	8008386 <prvTaskExitError+0x2a>
	__asm volatile
 8008370:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008374:	f383 8811 	msr	BASEPRI, r3
 8008378:	f3bf 8f6f 	isb	sy
 800837c:	f3bf 8f4f 	dsb	sy
 8008380:	60fb      	str	r3, [r7, #12]
}
 8008382:	bf00      	nop
 8008384:	e7fe      	b.n	8008384 <prvTaskExitError+0x28>
	__asm volatile
 8008386:	f04f 0350 	mov.w	r3, #80	; 0x50
 800838a:	f383 8811 	msr	BASEPRI, r3
 800838e:	f3bf 8f6f 	isb	sy
 8008392:	f3bf 8f4f 	dsb	sy
 8008396:	60bb      	str	r3, [r7, #8]
}
 8008398:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800839a:	bf00      	nop
 800839c:	687b      	ldr	r3, [r7, #4]
 800839e:	2b00      	cmp	r3, #0
 80083a0:	d0fc      	beq.n	800839c <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80083a2:	bf00      	nop
 80083a4:	bf00      	nop
 80083a6:	3714      	adds	r7, #20
 80083a8:	46bd      	mov	sp, r7
 80083aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083ae:	4770      	bx	lr
 80083b0:	20000018 	.word	0x20000018
	...

080083c0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80083c0:	4b07      	ldr	r3, [pc, #28]	; (80083e0 <pxCurrentTCBConst2>)
 80083c2:	6819      	ldr	r1, [r3, #0]
 80083c4:	6808      	ldr	r0, [r1, #0]
 80083c6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80083ca:	f380 8809 	msr	PSP, r0
 80083ce:	f3bf 8f6f 	isb	sy
 80083d2:	f04f 0000 	mov.w	r0, #0
 80083d6:	f380 8811 	msr	BASEPRI, r0
 80083da:	4770      	bx	lr
 80083dc:	f3af 8000 	nop.w

080083e0 <pxCurrentTCBConst2>:
 80083e0:	200008ec 	.word	0x200008ec
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80083e4:	bf00      	nop
 80083e6:	bf00      	nop

080083e8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80083e8:	4808      	ldr	r0, [pc, #32]	; (800840c <prvPortStartFirstTask+0x24>)
 80083ea:	6800      	ldr	r0, [r0, #0]
 80083ec:	6800      	ldr	r0, [r0, #0]
 80083ee:	f380 8808 	msr	MSP, r0
 80083f2:	f04f 0000 	mov.w	r0, #0
 80083f6:	f380 8814 	msr	CONTROL, r0
 80083fa:	b662      	cpsie	i
 80083fc:	b661      	cpsie	f
 80083fe:	f3bf 8f4f 	dsb	sy
 8008402:	f3bf 8f6f 	isb	sy
 8008406:	df00      	svc	0
 8008408:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800840a:	bf00      	nop
 800840c:	e000ed08 	.word	0xe000ed08

08008410 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8008410:	b580      	push	{r7, lr}
 8008412:	b086      	sub	sp, #24
 8008414:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8008416:	4b46      	ldr	r3, [pc, #280]	; (8008530 <xPortStartScheduler+0x120>)
 8008418:	681b      	ldr	r3, [r3, #0]
 800841a:	4a46      	ldr	r2, [pc, #280]	; (8008534 <xPortStartScheduler+0x124>)
 800841c:	4293      	cmp	r3, r2
 800841e:	d10a      	bne.n	8008436 <xPortStartScheduler+0x26>
	__asm volatile
 8008420:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008424:	f383 8811 	msr	BASEPRI, r3
 8008428:	f3bf 8f6f 	isb	sy
 800842c:	f3bf 8f4f 	dsb	sy
 8008430:	613b      	str	r3, [r7, #16]
}
 8008432:	bf00      	nop
 8008434:	e7fe      	b.n	8008434 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8008436:	4b3e      	ldr	r3, [pc, #248]	; (8008530 <xPortStartScheduler+0x120>)
 8008438:	681b      	ldr	r3, [r3, #0]
 800843a:	4a3f      	ldr	r2, [pc, #252]	; (8008538 <xPortStartScheduler+0x128>)
 800843c:	4293      	cmp	r3, r2
 800843e:	d10a      	bne.n	8008456 <xPortStartScheduler+0x46>
	__asm volatile
 8008440:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008444:	f383 8811 	msr	BASEPRI, r3
 8008448:	f3bf 8f6f 	isb	sy
 800844c:	f3bf 8f4f 	dsb	sy
 8008450:	60fb      	str	r3, [r7, #12]
}
 8008452:	bf00      	nop
 8008454:	e7fe      	b.n	8008454 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8008456:	4b39      	ldr	r3, [pc, #228]	; (800853c <xPortStartScheduler+0x12c>)
 8008458:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800845a:	697b      	ldr	r3, [r7, #20]
 800845c:	781b      	ldrb	r3, [r3, #0]
 800845e:	b2db      	uxtb	r3, r3
 8008460:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8008462:	697b      	ldr	r3, [r7, #20]
 8008464:	22ff      	movs	r2, #255	; 0xff
 8008466:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8008468:	697b      	ldr	r3, [r7, #20]
 800846a:	781b      	ldrb	r3, [r3, #0]
 800846c:	b2db      	uxtb	r3, r3
 800846e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8008470:	78fb      	ldrb	r3, [r7, #3]
 8008472:	b2db      	uxtb	r3, r3
 8008474:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8008478:	b2da      	uxtb	r2, r3
 800847a:	4b31      	ldr	r3, [pc, #196]	; (8008540 <xPortStartScheduler+0x130>)
 800847c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800847e:	4b31      	ldr	r3, [pc, #196]	; (8008544 <xPortStartScheduler+0x134>)
 8008480:	2207      	movs	r2, #7
 8008482:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008484:	e009      	b.n	800849a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8008486:	4b2f      	ldr	r3, [pc, #188]	; (8008544 <xPortStartScheduler+0x134>)
 8008488:	681b      	ldr	r3, [r3, #0]
 800848a:	3b01      	subs	r3, #1
 800848c:	4a2d      	ldr	r2, [pc, #180]	; (8008544 <xPortStartScheduler+0x134>)
 800848e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8008490:	78fb      	ldrb	r3, [r7, #3]
 8008492:	b2db      	uxtb	r3, r3
 8008494:	005b      	lsls	r3, r3, #1
 8008496:	b2db      	uxtb	r3, r3
 8008498:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800849a:	78fb      	ldrb	r3, [r7, #3]
 800849c:	b2db      	uxtb	r3, r3
 800849e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80084a2:	2b80      	cmp	r3, #128	; 0x80
 80084a4:	d0ef      	beq.n	8008486 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80084a6:	4b27      	ldr	r3, [pc, #156]	; (8008544 <xPortStartScheduler+0x134>)
 80084a8:	681b      	ldr	r3, [r3, #0]
 80084aa:	f1c3 0307 	rsb	r3, r3, #7
 80084ae:	2b04      	cmp	r3, #4
 80084b0:	d00a      	beq.n	80084c8 <xPortStartScheduler+0xb8>
	__asm volatile
 80084b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80084b6:	f383 8811 	msr	BASEPRI, r3
 80084ba:	f3bf 8f6f 	isb	sy
 80084be:	f3bf 8f4f 	dsb	sy
 80084c2:	60bb      	str	r3, [r7, #8]
}
 80084c4:	bf00      	nop
 80084c6:	e7fe      	b.n	80084c6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80084c8:	4b1e      	ldr	r3, [pc, #120]	; (8008544 <xPortStartScheduler+0x134>)
 80084ca:	681b      	ldr	r3, [r3, #0]
 80084cc:	021b      	lsls	r3, r3, #8
 80084ce:	4a1d      	ldr	r2, [pc, #116]	; (8008544 <xPortStartScheduler+0x134>)
 80084d0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80084d2:	4b1c      	ldr	r3, [pc, #112]	; (8008544 <xPortStartScheduler+0x134>)
 80084d4:	681b      	ldr	r3, [r3, #0]
 80084d6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80084da:	4a1a      	ldr	r2, [pc, #104]	; (8008544 <xPortStartScheduler+0x134>)
 80084dc:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80084de:	687b      	ldr	r3, [r7, #4]
 80084e0:	b2da      	uxtb	r2, r3
 80084e2:	697b      	ldr	r3, [r7, #20]
 80084e4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80084e6:	4b18      	ldr	r3, [pc, #96]	; (8008548 <xPortStartScheduler+0x138>)
 80084e8:	681b      	ldr	r3, [r3, #0]
 80084ea:	4a17      	ldr	r2, [pc, #92]	; (8008548 <xPortStartScheduler+0x138>)
 80084ec:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80084f0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80084f2:	4b15      	ldr	r3, [pc, #84]	; (8008548 <xPortStartScheduler+0x138>)
 80084f4:	681b      	ldr	r3, [r3, #0]
 80084f6:	4a14      	ldr	r2, [pc, #80]	; (8008548 <xPortStartScheduler+0x138>)
 80084f8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80084fc:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80084fe:	f000 f8dd 	bl	80086bc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8008502:	4b12      	ldr	r3, [pc, #72]	; (800854c <xPortStartScheduler+0x13c>)
 8008504:	2200      	movs	r2, #0
 8008506:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8008508:	f000 f8fc 	bl	8008704 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800850c:	4b10      	ldr	r3, [pc, #64]	; (8008550 <xPortStartScheduler+0x140>)
 800850e:	681b      	ldr	r3, [r3, #0]
 8008510:	4a0f      	ldr	r2, [pc, #60]	; (8008550 <xPortStartScheduler+0x140>)
 8008512:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8008516:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8008518:	f7ff ff66 	bl	80083e8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800851c:	f7fe fe6c 	bl	80071f8 <vTaskSwitchContext>
	prvTaskExitError();
 8008520:	f7ff ff1c 	bl	800835c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8008524:	2300      	movs	r3, #0
}
 8008526:	4618      	mov	r0, r3
 8008528:	3718      	adds	r7, #24
 800852a:	46bd      	mov	sp, r7
 800852c:	bd80      	pop	{r7, pc}
 800852e:	bf00      	nop
 8008530:	e000ed00 	.word	0xe000ed00
 8008534:	410fc271 	.word	0x410fc271
 8008538:	410fc270 	.word	0x410fc270
 800853c:	e000e400 	.word	0xe000e400
 8008540:	20000f18 	.word	0x20000f18
 8008544:	20000f1c 	.word	0x20000f1c
 8008548:	e000ed20 	.word	0xe000ed20
 800854c:	20000018 	.word	0x20000018
 8008550:	e000ef34 	.word	0xe000ef34

08008554 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8008554:	b480      	push	{r7}
 8008556:	b083      	sub	sp, #12
 8008558:	af00      	add	r7, sp, #0
	__asm volatile
 800855a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800855e:	f383 8811 	msr	BASEPRI, r3
 8008562:	f3bf 8f6f 	isb	sy
 8008566:	f3bf 8f4f 	dsb	sy
 800856a:	607b      	str	r3, [r7, #4]
}
 800856c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800856e:	4b0f      	ldr	r3, [pc, #60]	; (80085ac <vPortEnterCritical+0x58>)
 8008570:	681b      	ldr	r3, [r3, #0]
 8008572:	3301      	adds	r3, #1
 8008574:	4a0d      	ldr	r2, [pc, #52]	; (80085ac <vPortEnterCritical+0x58>)
 8008576:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8008578:	4b0c      	ldr	r3, [pc, #48]	; (80085ac <vPortEnterCritical+0x58>)
 800857a:	681b      	ldr	r3, [r3, #0]
 800857c:	2b01      	cmp	r3, #1
 800857e:	d10f      	bne.n	80085a0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8008580:	4b0b      	ldr	r3, [pc, #44]	; (80085b0 <vPortEnterCritical+0x5c>)
 8008582:	681b      	ldr	r3, [r3, #0]
 8008584:	b2db      	uxtb	r3, r3
 8008586:	2b00      	cmp	r3, #0
 8008588:	d00a      	beq.n	80085a0 <vPortEnterCritical+0x4c>
	__asm volatile
 800858a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800858e:	f383 8811 	msr	BASEPRI, r3
 8008592:	f3bf 8f6f 	isb	sy
 8008596:	f3bf 8f4f 	dsb	sy
 800859a:	603b      	str	r3, [r7, #0]
}
 800859c:	bf00      	nop
 800859e:	e7fe      	b.n	800859e <vPortEnterCritical+0x4a>
	}
}
 80085a0:	bf00      	nop
 80085a2:	370c      	adds	r7, #12
 80085a4:	46bd      	mov	sp, r7
 80085a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085aa:	4770      	bx	lr
 80085ac:	20000018 	.word	0x20000018
 80085b0:	e000ed04 	.word	0xe000ed04

080085b4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80085b4:	b480      	push	{r7}
 80085b6:	b083      	sub	sp, #12
 80085b8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80085ba:	4b12      	ldr	r3, [pc, #72]	; (8008604 <vPortExitCritical+0x50>)
 80085bc:	681b      	ldr	r3, [r3, #0]
 80085be:	2b00      	cmp	r3, #0
 80085c0:	d10a      	bne.n	80085d8 <vPortExitCritical+0x24>
	__asm volatile
 80085c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80085c6:	f383 8811 	msr	BASEPRI, r3
 80085ca:	f3bf 8f6f 	isb	sy
 80085ce:	f3bf 8f4f 	dsb	sy
 80085d2:	607b      	str	r3, [r7, #4]
}
 80085d4:	bf00      	nop
 80085d6:	e7fe      	b.n	80085d6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80085d8:	4b0a      	ldr	r3, [pc, #40]	; (8008604 <vPortExitCritical+0x50>)
 80085da:	681b      	ldr	r3, [r3, #0]
 80085dc:	3b01      	subs	r3, #1
 80085de:	4a09      	ldr	r2, [pc, #36]	; (8008604 <vPortExitCritical+0x50>)
 80085e0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80085e2:	4b08      	ldr	r3, [pc, #32]	; (8008604 <vPortExitCritical+0x50>)
 80085e4:	681b      	ldr	r3, [r3, #0]
 80085e6:	2b00      	cmp	r3, #0
 80085e8:	d105      	bne.n	80085f6 <vPortExitCritical+0x42>
 80085ea:	2300      	movs	r3, #0
 80085ec:	603b      	str	r3, [r7, #0]
	__asm volatile
 80085ee:	683b      	ldr	r3, [r7, #0]
 80085f0:	f383 8811 	msr	BASEPRI, r3
}
 80085f4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80085f6:	bf00      	nop
 80085f8:	370c      	adds	r7, #12
 80085fa:	46bd      	mov	sp, r7
 80085fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008600:	4770      	bx	lr
 8008602:	bf00      	nop
 8008604:	20000018 	.word	0x20000018
	...

08008610 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8008610:	f3ef 8009 	mrs	r0, PSP
 8008614:	f3bf 8f6f 	isb	sy
 8008618:	4b15      	ldr	r3, [pc, #84]	; (8008670 <pxCurrentTCBConst>)
 800861a:	681a      	ldr	r2, [r3, #0]
 800861c:	f01e 0f10 	tst.w	lr, #16
 8008620:	bf08      	it	eq
 8008622:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8008626:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800862a:	6010      	str	r0, [r2, #0]
 800862c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8008630:	f04f 0050 	mov.w	r0, #80	; 0x50
 8008634:	f380 8811 	msr	BASEPRI, r0
 8008638:	f3bf 8f4f 	dsb	sy
 800863c:	f3bf 8f6f 	isb	sy
 8008640:	f7fe fdda 	bl	80071f8 <vTaskSwitchContext>
 8008644:	f04f 0000 	mov.w	r0, #0
 8008648:	f380 8811 	msr	BASEPRI, r0
 800864c:	bc09      	pop	{r0, r3}
 800864e:	6819      	ldr	r1, [r3, #0]
 8008650:	6808      	ldr	r0, [r1, #0]
 8008652:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008656:	f01e 0f10 	tst.w	lr, #16
 800865a:	bf08      	it	eq
 800865c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8008660:	f380 8809 	msr	PSP, r0
 8008664:	f3bf 8f6f 	isb	sy
 8008668:	4770      	bx	lr
 800866a:	bf00      	nop
 800866c:	f3af 8000 	nop.w

08008670 <pxCurrentTCBConst>:
 8008670:	200008ec 	.word	0x200008ec
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8008674:	bf00      	nop
 8008676:	bf00      	nop

08008678 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8008678:	b580      	push	{r7, lr}
 800867a:	b082      	sub	sp, #8
 800867c:	af00      	add	r7, sp, #0
	__asm volatile
 800867e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008682:	f383 8811 	msr	BASEPRI, r3
 8008686:	f3bf 8f6f 	isb	sy
 800868a:	f3bf 8f4f 	dsb	sy
 800868e:	607b      	str	r3, [r7, #4]
}
 8008690:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8008692:	f7fe fcf7 	bl	8007084 <xTaskIncrementTick>
 8008696:	4603      	mov	r3, r0
 8008698:	2b00      	cmp	r3, #0
 800869a:	d003      	beq.n	80086a4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800869c:	4b06      	ldr	r3, [pc, #24]	; (80086b8 <xPortSysTickHandler+0x40>)
 800869e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80086a2:	601a      	str	r2, [r3, #0]
 80086a4:	2300      	movs	r3, #0
 80086a6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80086a8:	683b      	ldr	r3, [r7, #0]
 80086aa:	f383 8811 	msr	BASEPRI, r3
}
 80086ae:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80086b0:	bf00      	nop
 80086b2:	3708      	adds	r7, #8
 80086b4:	46bd      	mov	sp, r7
 80086b6:	bd80      	pop	{r7, pc}
 80086b8:	e000ed04 	.word	0xe000ed04

080086bc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80086bc:	b480      	push	{r7}
 80086be:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80086c0:	4b0b      	ldr	r3, [pc, #44]	; (80086f0 <vPortSetupTimerInterrupt+0x34>)
 80086c2:	2200      	movs	r2, #0
 80086c4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80086c6:	4b0b      	ldr	r3, [pc, #44]	; (80086f4 <vPortSetupTimerInterrupt+0x38>)
 80086c8:	2200      	movs	r2, #0
 80086ca:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80086cc:	4b0a      	ldr	r3, [pc, #40]	; (80086f8 <vPortSetupTimerInterrupt+0x3c>)
 80086ce:	681b      	ldr	r3, [r3, #0]
 80086d0:	4a0a      	ldr	r2, [pc, #40]	; (80086fc <vPortSetupTimerInterrupt+0x40>)
 80086d2:	fba2 2303 	umull	r2, r3, r2, r3
 80086d6:	099b      	lsrs	r3, r3, #6
 80086d8:	4a09      	ldr	r2, [pc, #36]	; (8008700 <vPortSetupTimerInterrupt+0x44>)
 80086da:	3b01      	subs	r3, #1
 80086dc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80086de:	4b04      	ldr	r3, [pc, #16]	; (80086f0 <vPortSetupTimerInterrupt+0x34>)
 80086e0:	2207      	movs	r2, #7
 80086e2:	601a      	str	r2, [r3, #0]
}
 80086e4:	bf00      	nop
 80086e6:	46bd      	mov	sp, r7
 80086e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086ec:	4770      	bx	lr
 80086ee:	bf00      	nop
 80086f0:	e000e010 	.word	0xe000e010
 80086f4:	e000e018 	.word	0xe000e018
 80086f8:	20000000 	.word	0x20000000
 80086fc:	10624dd3 	.word	0x10624dd3
 8008700:	e000e014 	.word	0xe000e014

08008704 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8008704:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8008714 <vPortEnableVFP+0x10>
 8008708:	6801      	ldr	r1, [r0, #0]
 800870a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800870e:	6001      	str	r1, [r0, #0]
 8008710:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8008712:	bf00      	nop
 8008714:	e000ed88 	.word	0xe000ed88

08008718 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8008718:	b480      	push	{r7}
 800871a:	b085      	sub	sp, #20
 800871c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800871e:	f3ef 8305 	mrs	r3, IPSR
 8008722:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8008724:	68fb      	ldr	r3, [r7, #12]
 8008726:	2b0f      	cmp	r3, #15
 8008728:	d914      	bls.n	8008754 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800872a:	4a17      	ldr	r2, [pc, #92]	; (8008788 <vPortValidateInterruptPriority+0x70>)
 800872c:	68fb      	ldr	r3, [r7, #12]
 800872e:	4413      	add	r3, r2
 8008730:	781b      	ldrb	r3, [r3, #0]
 8008732:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8008734:	4b15      	ldr	r3, [pc, #84]	; (800878c <vPortValidateInterruptPriority+0x74>)
 8008736:	781b      	ldrb	r3, [r3, #0]
 8008738:	7afa      	ldrb	r2, [r7, #11]
 800873a:	429a      	cmp	r2, r3
 800873c:	d20a      	bcs.n	8008754 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800873e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008742:	f383 8811 	msr	BASEPRI, r3
 8008746:	f3bf 8f6f 	isb	sy
 800874a:	f3bf 8f4f 	dsb	sy
 800874e:	607b      	str	r3, [r7, #4]
}
 8008750:	bf00      	nop
 8008752:	e7fe      	b.n	8008752 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8008754:	4b0e      	ldr	r3, [pc, #56]	; (8008790 <vPortValidateInterruptPriority+0x78>)
 8008756:	681b      	ldr	r3, [r3, #0]
 8008758:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800875c:	4b0d      	ldr	r3, [pc, #52]	; (8008794 <vPortValidateInterruptPriority+0x7c>)
 800875e:	681b      	ldr	r3, [r3, #0]
 8008760:	429a      	cmp	r2, r3
 8008762:	d90a      	bls.n	800877a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8008764:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008768:	f383 8811 	msr	BASEPRI, r3
 800876c:	f3bf 8f6f 	isb	sy
 8008770:	f3bf 8f4f 	dsb	sy
 8008774:	603b      	str	r3, [r7, #0]
}
 8008776:	bf00      	nop
 8008778:	e7fe      	b.n	8008778 <vPortValidateInterruptPriority+0x60>
	}
 800877a:	bf00      	nop
 800877c:	3714      	adds	r7, #20
 800877e:	46bd      	mov	sp, r7
 8008780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008784:	4770      	bx	lr
 8008786:	bf00      	nop
 8008788:	e000e3f0 	.word	0xe000e3f0
 800878c:	20000f18 	.word	0x20000f18
 8008790:	e000ed0c 	.word	0xe000ed0c
 8008794:	20000f1c 	.word	0x20000f1c

08008798 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8008798:	b580      	push	{r7, lr}
 800879a:	b08a      	sub	sp, #40	; 0x28
 800879c:	af00      	add	r7, sp, #0
 800879e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80087a0:	2300      	movs	r3, #0
 80087a2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80087a4:	f7fe fbb2 	bl	8006f0c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80087a8:	4b5b      	ldr	r3, [pc, #364]	; (8008918 <pvPortMalloc+0x180>)
 80087aa:	681b      	ldr	r3, [r3, #0]
 80087ac:	2b00      	cmp	r3, #0
 80087ae:	d101      	bne.n	80087b4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80087b0:	f000 f920 	bl	80089f4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80087b4:	4b59      	ldr	r3, [pc, #356]	; (800891c <pvPortMalloc+0x184>)
 80087b6:	681a      	ldr	r2, [r3, #0]
 80087b8:	687b      	ldr	r3, [r7, #4]
 80087ba:	4013      	ands	r3, r2
 80087bc:	2b00      	cmp	r3, #0
 80087be:	f040 8093 	bne.w	80088e8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80087c2:	687b      	ldr	r3, [r7, #4]
 80087c4:	2b00      	cmp	r3, #0
 80087c6:	d01d      	beq.n	8008804 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 80087c8:	2208      	movs	r2, #8
 80087ca:	687b      	ldr	r3, [r7, #4]
 80087cc:	4413      	add	r3, r2
 80087ce:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80087d0:	687b      	ldr	r3, [r7, #4]
 80087d2:	f003 0307 	and.w	r3, r3, #7
 80087d6:	2b00      	cmp	r3, #0
 80087d8:	d014      	beq.n	8008804 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80087da:	687b      	ldr	r3, [r7, #4]
 80087dc:	f023 0307 	bic.w	r3, r3, #7
 80087e0:	3308      	adds	r3, #8
 80087e2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80087e4:	687b      	ldr	r3, [r7, #4]
 80087e6:	f003 0307 	and.w	r3, r3, #7
 80087ea:	2b00      	cmp	r3, #0
 80087ec:	d00a      	beq.n	8008804 <pvPortMalloc+0x6c>
	__asm volatile
 80087ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80087f2:	f383 8811 	msr	BASEPRI, r3
 80087f6:	f3bf 8f6f 	isb	sy
 80087fa:	f3bf 8f4f 	dsb	sy
 80087fe:	617b      	str	r3, [r7, #20]
}
 8008800:	bf00      	nop
 8008802:	e7fe      	b.n	8008802 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8008804:	687b      	ldr	r3, [r7, #4]
 8008806:	2b00      	cmp	r3, #0
 8008808:	d06e      	beq.n	80088e8 <pvPortMalloc+0x150>
 800880a:	4b45      	ldr	r3, [pc, #276]	; (8008920 <pvPortMalloc+0x188>)
 800880c:	681b      	ldr	r3, [r3, #0]
 800880e:	687a      	ldr	r2, [r7, #4]
 8008810:	429a      	cmp	r2, r3
 8008812:	d869      	bhi.n	80088e8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8008814:	4b43      	ldr	r3, [pc, #268]	; (8008924 <pvPortMalloc+0x18c>)
 8008816:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8008818:	4b42      	ldr	r3, [pc, #264]	; (8008924 <pvPortMalloc+0x18c>)
 800881a:	681b      	ldr	r3, [r3, #0]
 800881c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800881e:	e004      	b.n	800882a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8008820:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008822:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8008824:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008826:	681b      	ldr	r3, [r3, #0]
 8008828:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800882a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800882c:	685b      	ldr	r3, [r3, #4]
 800882e:	687a      	ldr	r2, [r7, #4]
 8008830:	429a      	cmp	r2, r3
 8008832:	d903      	bls.n	800883c <pvPortMalloc+0xa4>
 8008834:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008836:	681b      	ldr	r3, [r3, #0]
 8008838:	2b00      	cmp	r3, #0
 800883a:	d1f1      	bne.n	8008820 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800883c:	4b36      	ldr	r3, [pc, #216]	; (8008918 <pvPortMalloc+0x180>)
 800883e:	681b      	ldr	r3, [r3, #0]
 8008840:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008842:	429a      	cmp	r2, r3
 8008844:	d050      	beq.n	80088e8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8008846:	6a3b      	ldr	r3, [r7, #32]
 8008848:	681b      	ldr	r3, [r3, #0]
 800884a:	2208      	movs	r2, #8
 800884c:	4413      	add	r3, r2
 800884e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8008850:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008852:	681a      	ldr	r2, [r3, #0]
 8008854:	6a3b      	ldr	r3, [r7, #32]
 8008856:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8008858:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800885a:	685a      	ldr	r2, [r3, #4]
 800885c:	687b      	ldr	r3, [r7, #4]
 800885e:	1ad2      	subs	r2, r2, r3
 8008860:	2308      	movs	r3, #8
 8008862:	005b      	lsls	r3, r3, #1
 8008864:	429a      	cmp	r2, r3
 8008866:	d91f      	bls.n	80088a8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8008868:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800886a:	687b      	ldr	r3, [r7, #4]
 800886c:	4413      	add	r3, r2
 800886e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008870:	69bb      	ldr	r3, [r7, #24]
 8008872:	f003 0307 	and.w	r3, r3, #7
 8008876:	2b00      	cmp	r3, #0
 8008878:	d00a      	beq.n	8008890 <pvPortMalloc+0xf8>
	__asm volatile
 800887a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800887e:	f383 8811 	msr	BASEPRI, r3
 8008882:	f3bf 8f6f 	isb	sy
 8008886:	f3bf 8f4f 	dsb	sy
 800888a:	613b      	str	r3, [r7, #16]
}
 800888c:	bf00      	nop
 800888e:	e7fe      	b.n	800888e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8008890:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008892:	685a      	ldr	r2, [r3, #4]
 8008894:	687b      	ldr	r3, [r7, #4]
 8008896:	1ad2      	subs	r2, r2, r3
 8008898:	69bb      	ldr	r3, [r7, #24]
 800889a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800889c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800889e:	687a      	ldr	r2, [r7, #4]
 80088a0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80088a2:	69b8      	ldr	r0, [r7, #24]
 80088a4:	f000 f908 	bl	8008ab8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80088a8:	4b1d      	ldr	r3, [pc, #116]	; (8008920 <pvPortMalloc+0x188>)
 80088aa:	681a      	ldr	r2, [r3, #0]
 80088ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80088ae:	685b      	ldr	r3, [r3, #4]
 80088b0:	1ad3      	subs	r3, r2, r3
 80088b2:	4a1b      	ldr	r2, [pc, #108]	; (8008920 <pvPortMalloc+0x188>)
 80088b4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80088b6:	4b1a      	ldr	r3, [pc, #104]	; (8008920 <pvPortMalloc+0x188>)
 80088b8:	681a      	ldr	r2, [r3, #0]
 80088ba:	4b1b      	ldr	r3, [pc, #108]	; (8008928 <pvPortMalloc+0x190>)
 80088bc:	681b      	ldr	r3, [r3, #0]
 80088be:	429a      	cmp	r2, r3
 80088c0:	d203      	bcs.n	80088ca <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80088c2:	4b17      	ldr	r3, [pc, #92]	; (8008920 <pvPortMalloc+0x188>)
 80088c4:	681b      	ldr	r3, [r3, #0]
 80088c6:	4a18      	ldr	r2, [pc, #96]	; (8008928 <pvPortMalloc+0x190>)
 80088c8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80088ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80088cc:	685a      	ldr	r2, [r3, #4]
 80088ce:	4b13      	ldr	r3, [pc, #76]	; (800891c <pvPortMalloc+0x184>)
 80088d0:	681b      	ldr	r3, [r3, #0]
 80088d2:	431a      	orrs	r2, r3
 80088d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80088d6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80088d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80088da:	2200      	movs	r2, #0
 80088dc:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 80088de:	4b13      	ldr	r3, [pc, #76]	; (800892c <pvPortMalloc+0x194>)
 80088e0:	681b      	ldr	r3, [r3, #0]
 80088e2:	3301      	adds	r3, #1
 80088e4:	4a11      	ldr	r2, [pc, #68]	; (800892c <pvPortMalloc+0x194>)
 80088e6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80088e8:	f7fe fb1e 	bl	8006f28 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80088ec:	69fb      	ldr	r3, [r7, #28]
 80088ee:	f003 0307 	and.w	r3, r3, #7
 80088f2:	2b00      	cmp	r3, #0
 80088f4:	d00a      	beq.n	800890c <pvPortMalloc+0x174>
	__asm volatile
 80088f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80088fa:	f383 8811 	msr	BASEPRI, r3
 80088fe:	f3bf 8f6f 	isb	sy
 8008902:	f3bf 8f4f 	dsb	sy
 8008906:	60fb      	str	r3, [r7, #12]
}
 8008908:	bf00      	nop
 800890a:	e7fe      	b.n	800890a <pvPortMalloc+0x172>
	return pvReturn;
 800890c:	69fb      	ldr	r3, [r7, #28]
}
 800890e:	4618      	mov	r0, r3
 8008910:	3728      	adds	r7, #40	; 0x28
 8008912:	46bd      	mov	sp, r7
 8008914:	bd80      	pop	{r7, pc}
 8008916:	bf00      	nop
 8008918:	20004b28 	.word	0x20004b28
 800891c:	20004b3c 	.word	0x20004b3c
 8008920:	20004b2c 	.word	0x20004b2c
 8008924:	20004b20 	.word	0x20004b20
 8008928:	20004b30 	.word	0x20004b30
 800892c:	20004b34 	.word	0x20004b34

08008930 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8008930:	b580      	push	{r7, lr}
 8008932:	b086      	sub	sp, #24
 8008934:	af00      	add	r7, sp, #0
 8008936:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8008938:	687b      	ldr	r3, [r7, #4]
 800893a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800893c:	687b      	ldr	r3, [r7, #4]
 800893e:	2b00      	cmp	r3, #0
 8008940:	d04d      	beq.n	80089de <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8008942:	2308      	movs	r3, #8
 8008944:	425b      	negs	r3, r3
 8008946:	697a      	ldr	r2, [r7, #20]
 8008948:	4413      	add	r3, r2
 800894a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800894c:	697b      	ldr	r3, [r7, #20]
 800894e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8008950:	693b      	ldr	r3, [r7, #16]
 8008952:	685a      	ldr	r2, [r3, #4]
 8008954:	4b24      	ldr	r3, [pc, #144]	; (80089e8 <vPortFree+0xb8>)
 8008956:	681b      	ldr	r3, [r3, #0]
 8008958:	4013      	ands	r3, r2
 800895a:	2b00      	cmp	r3, #0
 800895c:	d10a      	bne.n	8008974 <vPortFree+0x44>
	__asm volatile
 800895e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008962:	f383 8811 	msr	BASEPRI, r3
 8008966:	f3bf 8f6f 	isb	sy
 800896a:	f3bf 8f4f 	dsb	sy
 800896e:	60fb      	str	r3, [r7, #12]
}
 8008970:	bf00      	nop
 8008972:	e7fe      	b.n	8008972 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8008974:	693b      	ldr	r3, [r7, #16]
 8008976:	681b      	ldr	r3, [r3, #0]
 8008978:	2b00      	cmp	r3, #0
 800897a:	d00a      	beq.n	8008992 <vPortFree+0x62>
	__asm volatile
 800897c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008980:	f383 8811 	msr	BASEPRI, r3
 8008984:	f3bf 8f6f 	isb	sy
 8008988:	f3bf 8f4f 	dsb	sy
 800898c:	60bb      	str	r3, [r7, #8]
}
 800898e:	bf00      	nop
 8008990:	e7fe      	b.n	8008990 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8008992:	693b      	ldr	r3, [r7, #16]
 8008994:	685a      	ldr	r2, [r3, #4]
 8008996:	4b14      	ldr	r3, [pc, #80]	; (80089e8 <vPortFree+0xb8>)
 8008998:	681b      	ldr	r3, [r3, #0]
 800899a:	4013      	ands	r3, r2
 800899c:	2b00      	cmp	r3, #0
 800899e:	d01e      	beq.n	80089de <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80089a0:	693b      	ldr	r3, [r7, #16]
 80089a2:	681b      	ldr	r3, [r3, #0]
 80089a4:	2b00      	cmp	r3, #0
 80089a6:	d11a      	bne.n	80089de <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80089a8:	693b      	ldr	r3, [r7, #16]
 80089aa:	685a      	ldr	r2, [r3, #4]
 80089ac:	4b0e      	ldr	r3, [pc, #56]	; (80089e8 <vPortFree+0xb8>)
 80089ae:	681b      	ldr	r3, [r3, #0]
 80089b0:	43db      	mvns	r3, r3
 80089b2:	401a      	ands	r2, r3
 80089b4:	693b      	ldr	r3, [r7, #16]
 80089b6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80089b8:	f7fe faa8 	bl	8006f0c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80089bc:	693b      	ldr	r3, [r7, #16]
 80089be:	685a      	ldr	r2, [r3, #4]
 80089c0:	4b0a      	ldr	r3, [pc, #40]	; (80089ec <vPortFree+0xbc>)
 80089c2:	681b      	ldr	r3, [r3, #0]
 80089c4:	4413      	add	r3, r2
 80089c6:	4a09      	ldr	r2, [pc, #36]	; (80089ec <vPortFree+0xbc>)
 80089c8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80089ca:	6938      	ldr	r0, [r7, #16]
 80089cc:	f000 f874 	bl	8008ab8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 80089d0:	4b07      	ldr	r3, [pc, #28]	; (80089f0 <vPortFree+0xc0>)
 80089d2:	681b      	ldr	r3, [r3, #0]
 80089d4:	3301      	adds	r3, #1
 80089d6:	4a06      	ldr	r2, [pc, #24]	; (80089f0 <vPortFree+0xc0>)
 80089d8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 80089da:	f7fe faa5 	bl	8006f28 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80089de:	bf00      	nop
 80089e0:	3718      	adds	r7, #24
 80089e2:	46bd      	mov	sp, r7
 80089e4:	bd80      	pop	{r7, pc}
 80089e6:	bf00      	nop
 80089e8:	20004b3c 	.word	0x20004b3c
 80089ec:	20004b2c 	.word	0x20004b2c
 80089f0:	20004b38 	.word	0x20004b38

080089f4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80089f4:	b480      	push	{r7}
 80089f6:	b085      	sub	sp, #20
 80089f8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80089fa:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 80089fe:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8008a00:	4b27      	ldr	r3, [pc, #156]	; (8008aa0 <prvHeapInit+0xac>)
 8008a02:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8008a04:	68fb      	ldr	r3, [r7, #12]
 8008a06:	f003 0307 	and.w	r3, r3, #7
 8008a0a:	2b00      	cmp	r3, #0
 8008a0c:	d00c      	beq.n	8008a28 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8008a0e:	68fb      	ldr	r3, [r7, #12]
 8008a10:	3307      	adds	r3, #7
 8008a12:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008a14:	68fb      	ldr	r3, [r7, #12]
 8008a16:	f023 0307 	bic.w	r3, r3, #7
 8008a1a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8008a1c:	68ba      	ldr	r2, [r7, #8]
 8008a1e:	68fb      	ldr	r3, [r7, #12]
 8008a20:	1ad3      	subs	r3, r2, r3
 8008a22:	4a1f      	ldr	r2, [pc, #124]	; (8008aa0 <prvHeapInit+0xac>)
 8008a24:	4413      	add	r3, r2
 8008a26:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8008a28:	68fb      	ldr	r3, [r7, #12]
 8008a2a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8008a2c:	4a1d      	ldr	r2, [pc, #116]	; (8008aa4 <prvHeapInit+0xb0>)
 8008a2e:	687b      	ldr	r3, [r7, #4]
 8008a30:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8008a32:	4b1c      	ldr	r3, [pc, #112]	; (8008aa4 <prvHeapInit+0xb0>)
 8008a34:	2200      	movs	r2, #0
 8008a36:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8008a38:	687b      	ldr	r3, [r7, #4]
 8008a3a:	68ba      	ldr	r2, [r7, #8]
 8008a3c:	4413      	add	r3, r2
 8008a3e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8008a40:	2208      	movs	r2, #8
 8008a42:	68fb      	ldr	r3, [r7, #12]
 8008a44:	1a9b      	subs	r3, r3, r2
 8008a46:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008a48:	68fb      	ldr	r3, [r7, #12]
 8008a4a:	f023 0307 	bic.w	r3, r3, #7
 8008a4e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8008a50:	68fb      	ldr	r3, [r7, #12]
 8008a52:	4a15      	ldr	r2, [pc, #84]	; (8008aa8 <prvHeapInit+0xb4>)
 8008a54:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8008a56:	4b14      	ldr	r3, [pc, #80]	; (8008aa8 <prvHeapInit+0xb4>)
 8008a58:	681b      	ldr	r3, [r3, #0]
 8008a5a:	2200      	movs	r2, #0
 8008a5c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8008a5e:	4b12      	ldr	r3, [pc, #72]	; (8008aa8 <prvHeapInit+0xb4>)
 8008a60:	681b      	ldr	r3, [r3, #0]
 8008a62:	2200      	movs	r2, #0
 8008a64:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8008a66:	687b      	ldr	r3, [r7, #4]
 8008a68:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8008a6a:	683b      	ldr	r3, [r7, #0]
 8008a6c:	68fa      	ldr	r2, [r7, #12]
 8008a6e:	1ad2      	subs	r2, r2, r3
 8008a70:	683b      	ldr	r3, [r7, #0]
 8008a72:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8008a74:	4b0c      	ldr	r3, [pc, #48]	; (8008aa8 <prvHeapInit+0xb4>)
 8008a76:	681a      	ldr	r2, [r3, #0]
 8008a78:	683b      	ldr	r3, [r7, #0]
 8008a7a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008a7c:	683b      	ldr	r3, [r7, #0]
 8008a7e:	685b      	ldr	r3, [r3, #4]
 8008a80:	4a0a      	ldr	r2, [pc, #40]	; (8008aac <prvHeapInit+0xb8>)
 8008a82:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008a84:	683b      	ldr	r3, [r7, #0]
 8008a86:	685b      	ldr	r3, [r3, #4]
 8008a88:	4a09      	ldr	r2, [pc, #36]	; (8008ab0 <prvHeapInit+0xbc>)
 8008a8a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8008a8c:	4b09      	ldr	r3, [pc, #36]	; (8008ab4 <prvHeapInit+0xc0>)
 8008a8e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8008a92:	601a      	str	r2, [r3, #0]
}
 8008a94:	bf00      	nop
 8008a96:	3714      	adds	r7, #20
 8008a98:	46bd      	mov	sp, r7
 8008a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a9e:	4770      	bx	lr
 8008aa0:	20000f20 	.word	0x20000f20
 8008aa4:	20004b20 	.word	0x20004b20
 8008aa8:	20004b28 	.word	0x20004b28
 8008aac:	20004b30 	.word	0x20004b30
 8008ab0:	20004b2c 	.word	0x20004b2c
 8008ab4:	20004b3c 	.word	0x20004b3c

08008ab8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8008ab8:	b480      	push	{r7}
 8008aba:	b085      	sub	sp, #20
 8008abc:	af00      	add	r7, sp, #0
 8008abe:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8008ac0:	4b28      	ldr	r3, [pc, #160]	; (8008b64 <prvInsertBlockIntoFreeList+0xac>)
 8008ac2:	60fb      	str	r3, [r7, #12]
 8008ac4:	e002      	b.n	8008acc <prvInsertBlockIntoFreeList+0x14>
 8008ac6:	68fb      	ldr	r3, [r7, #12]
 8008ac8:	681b      	ldr	r3, [r3, #0]
 8008aca:	60fb      	str	r3, [r7, #12]
 8008acc:	68fb      	ldr	r3, [r7, #12]
 8008ace:	681b      	ldr	r3, [r3, #0]
 8008ad0:	687a      	ldr	r2, [r7, #4]
 8008ad2:	429a      	cmp	r2, r3
 8008ad4:	d8f7      	bhi.n	8008ac6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8008ad6:	68fb      	ldr	r3, [r7, #12]
 8008ad8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8008ada:	68fb      	ldr	r3, [r7, #12]
 8008adc:	685b      	ldr	r3, [r3, #4]
 8008ade:	68ba      	ldr	r2, [r7, #8]
 8008ae0:	4413      	add	r3, r2
 8008ae2:	687a      	ldr	r2, [r7, #4]
 8008ae4:	429a      	cmp	r2, r3
 8008ae6:	d108      	bne.n	8008afa <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8008ae8:	68fb      	ldr	r3, [r7, #12]
 8008aea:	685a      	ldr	r2, [r3, #4]
 8008aec:	687b      	ldr	r3, [r7, #4]
 8008aee:	685b      	ldr	r3, [r3, #4]
 8008af0:	441a      	add	r2, r3
 8008af2:	68fb      	ldr	r3, [r7, #12]
 8008af4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8008af6:	68fb      	ldr	r3, [r7, #12]
 8008af8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8008afa:	687b      	ldr	r3, [r7, #4]
 8008afc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8008afe:	687b      	ldr	r3, [r7, #4]
 8008b00:	685b      	ldr	r3, [r3, #4]
 8008b02:	68ba      	ldr	r2, [r7, #8]
 8008b04:	441a      	add	r2, r3
 8008b06:	68fb      	ldr	r3, [r7, #12]
 8008b08:	681b      	ldr	r3, [r3, #0]
 8008b0a:	429a      	cmp	r2, r3
 8008b0c:	d118      	bne.n	8008b40 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8008b0e:	68fb      	ldr	r3, [r7, #12]
 8008b10:	681a      	ldr	r2, [r3, #0]
 8008b12:	4b15      	ldr	r3, [pc, #84]	; (8008b68 <prvInsertBlockIntoFreeList+0xb0>)
 8008b14:	681b      	ldr	r3, [r3, #0]
 8008b16:	429a      	cmp	r2, r3
 8008b18:	d00d      	beq.n	8008b36 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8008b1a:	687b      	ldr	r3, [r7, #4]
 8008b1c:	685a      	ldr	r2, [r3, #4]
 8008b1e:	68fb      	ldr	r3, [r7, #12]
 8008b20:	681b      	ldr	r3, [r3, #0]
 8008b22:	685b      	ldr	r3, [r3, #4]
 8008b24:	441a      	add	r2, r3
 8008b26:	687b      	ldr	r3, [r7, #4]
 8008b28:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8008b2a:	68fb      	ldr	r3, [r7, #12]
 8008b2c:	681b      	ldr	r3, [r3, #0]
 8008b2e:	681a      	ldr	r2, [r3, #0]
 8008b30:	687b      	ldr	r3, [r7, #4]
 8008b32:	601a      	str	r2, [r3, #0]
 8008b34:	e008      	b.n	8008b48 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8008b36:	4b0c      	ldr	r3, [pc, #48]	; (8008b68 <prvInsertBlockIntoFreeList+0xb0>)
 8008b38:	681a      	ldr	r2, [r3, #0]
 8008b3a:	687b      	ldr	r3, [r7, #4]
 8008b3c:	601a      	str	r2, [r3, #0]
 8008b3e:	e003      	b.n	8008b48 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8008b40:	68fb      	ldr	r3, [r7, #12]
 8008b42:	681a      	ldr	r2, [r3, #0]
 8008b44:	687b      	ldr	r3, [r7, #4]
 8008b46:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8008b48:	68fa      	ldr	r2, [r7, #12]
 8008b4a:	687b      	ldr	r3, [r7, #4]
 8008b4c:	429a      	cmp	r2, r3
 8008b4e:	d002      	beq.n	8008b56 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8008b50:	68fb      	ldr	r3, [r7, #12]
 8008b52:	687a      	ldr	r2, [r7, #4]
 8008b54:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008b56:	bf00      	nop
 8008b58:	3714      	adds	r7, #20
 8008b5a:	46bd      	mov	sp, r7
 8008b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b60:	4770      	bx	lr
 8008b62:	bf00      	nop
 8008b64:	20004b20 	.word	0x20004b20
 8008b68:	20004b28 	.word	0x20004b28

08008b6c <__errno>:
 8008b6c:	4b01      	ldr	r3, [pc, #4]	; (8008b74 <__errno+0x8>)
 8008b6e:	6818      	ldr	r0, [r3, #0]
 8008b70:	4770      	bx	lr
 8008b72:	bf00      	nop
 8008b74:	2000001c 	.word	0x2000001c

08008b78 <__libc_init_array>:
 8008b78:	b570      	push	{r4, r5, r6, lr}
 8008b7a:	4d0d      	ldr	r5, [pc, #52]	; (8008bb0 <__libc_init_array+0x38>)
 8008b7c:	4c0d      	ldr	r4, [pc, #52]	; (8008bb4 <__libc_init_array+0x3c>)
 8008b7e:	1b64      	subs	r4, r4, r5
 8008b80:	10a4      	asrs	r4, r4, #2
 8008b82:	2600      	movs	r6, #0
 8008b84:	42a6      	cmp	r6, r4
 8008b86:	d109      	bne.n	8008b9c <__libc_init_array+0x24>
 8008b88:	4d0b      	ldr	r5, [pc, #44]	; (8008bb8 <__libc_init_array+0x40>)
 8008b8a:	4c0c      	ldr	r4, [pc, #48]	; (8008bbc <__libc_init_array+0x44>)
 8008b8c:	f001 fbf2 	bl	800a374 <_init>
 8008b90:	1b64      	subs	r4, r4, r5
 8008b92:	10a4      	asrs	r4, r4, #2
 8008b94:	2600      	movs	r6, #0
 8008b96:	42a6      	cmp	r6, r4
 8008b98:	d105      	bne.n	8008ba6 <__libc_init_array+0x2e>
 8008b9a:	bd70      	pop	{r4, r5, r6, pc}
 8008b9c:	f855 3b04 	ldr.w	r3, [r5], #4
 8008ba0:	4798      	blx	r3
 8008ba2:	3601      	adds	r6, #1
 8008ba4:	e7ee      	b.n	8008b84 <__libc_init_array+0xc>
 8008ba6:	f855 3b04 	ldr.w	r3, [r5], #4
 8008baa:	4798      	blx	r3
 8008bac:	3601      	adds	r6, #1
 8008bae:	e7f2      	b.n	8008b96 <__libc_init_array+0x1e>
 8008bb0:	0800a7c8 	.word	0x0800a7c8
 8008bb4:	0800a7c8 	.word	0x0800a7c8
 8008bb8:	0800a7c8 	.word	0x0800a7c8
 8008bbc:	0800a7cc 	.word	0x0800a7cc

08008bc0 <memcpy>:
 8008bc0:	440a      	add	r2, r1
 8008bc2:	4291      	cmp	r1, r2
 8008bc4:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8008bc8:	d100      	bne.n	8008bcc <memcpy+0xc>
 8008bca:	4770      	bx	lr
 8008bcc:	b510      	push	{r4, lr}
 8008bce:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008bd2:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008bd6:	4291      	cmp	r1, r2
 8008bd8:	d1f9      	bne.n	8008bce <memcpy+0xe>
 8008bda:	bd10      	pop	{r4, pc}

08008bdc <memset>:
 8008bdc:	4402      	add	r2, r0
 8008bde:	4603      	mov	r3, r0
 8008be0:	4293      	cmp	r3, r2
 8008be2:	d100      	bne.n	8008be6 <memset+0xa>
 8008be4:	4770      	bx	lr
 8008be6:	f803 1b01 	strb.w	r1, [r3], #1
 8008bea:	e7f9      	b.n	8008be0 <memset+0x4>

08008bec <iprintf>:
 8008bec:	b40f      	push	{r0, r1, r2, r3}
 8008bee:	4b0a      	ldr	r3, [pc, #40]	; (8008c18 <iprintf+0x2c>)
 8008bf0:	b513      	push	{r0, r1, r4, lr}
 8008bf2:	681c      	ldr	r4, [r3, #0]
 8008bf4:	b124      	cbz	r4, 8008c00 <iprintf+0x14>
 8008bf6:	69a3      	ldr	r3, [r4, #24]
 8008bf8:	b913      	cbnz	r3, 8008c00 <iprintf+0x14>
 8008bfa:	4620      	mov	r0, r4
 8008bfc:	f000 fa7e 	bl	80090fc <__sinit>
 8008c00:	ab05      	add	r3, sp, #20
 8008c02:	9a04      	ldr	r2, [sp, #16]
 8008c04:	68a1      	ldr	r1, [r4, #8]
 8008c06:	9301      	str	r3, [sp, #4]
 8008c08:	4620      	mov	r0, r4
 8008c0a:	f000 fde3 	bl	80097d4 <_vfiprintf_r>
 8008c0e:	b002      	add	sp, #8
 8008c10:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008c14:	b004      	add	sp, #16
 8008c16:	4770      	bx	lr
 8008c18:	2000001c 	.word	0x2000001c

08008c1c <_puts_r>:
 8008c1c:	b570      	push	{r4, r5, r6, lr}
 8008c1e:	460e      	mov	r6, r1
 8008c20:	4605      	mov	r5, r0
 8008c22:	b118      	cbz	r0, 8008c2c <_puts_r+0x10>
 8008c24:	6983      	ldr	r3, [r0, #24]
 8008c26:	b90b      	cbnz	r3, 8008c2c <_puts_r+0x10>
 8008c28:	f000 fa68 	bl	80090fc <__sinit>
 8008c2c:	69ab      	ldr	r3, [r5, #24]
 8008c2e:	68ac      	ldr	r4, [r5, #8]
 8008c30:	b913      	cbnz	r3, 8008c38 <_puts_r+0x1c>
 8008c32:	4628      	mov	r0, r5
 8008c34:	f000 fa62 	bl	80090fc <__sinit>
 8008c38:	4b2c      	ldr	r3, [pc, #176]	; (8008cec <_puts_r+0xd0>)
 8008c3a:	429c      	cmp	r4, r3
 8008c3c:	d120      	bne.n	8008c80 <_puts_r+0x64>
 8008c3e:	686c      	ldr	r4, [r5, #4]
 8008c40:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008c42:	07db      	lsls	r3, r3, #31
 8008c44:	d405      	bmi.n	8008c52 <_puts_r+0x36>
 8008c46:	89a3      	ldrh	r3, [r4, #12]
 8008c48:	0598      	lsls	r0, r3, #22
 8008c4a:	d402      	bmi.n	8008c52 <_puts_r+0x36>
 8008c4c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008c4e:	f000 faf3 	bl	8009238 <__retarget_lock_acquire_recursive>
 8008c52:	89a3      	ldrh	r3, [r4, #12]
 8008c54:	0719      	lsls	r1, r3, #28
 8008c56:	d51d      	bpl.n	8008c94 <_puts_r+0x78>
 8008c58:	6923      	ldr	r3, [r4, #16]
 8008c5a:	b1db      	cbz	r3, 8008c94 <_puts_r+0x78>
 8008c5c:	3e01      	subs	r6, #1
 8008c5e:	68a3      	ldr	r3, [r4, #8]
 8008c60:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8008c64:	3b01      	subs	r3, #1
 8008c66:	60a3      	str	r3, [r4, #8]
 8008c68:	bb39      	cbnz	r1, 8008cba <_puts_r+0x9e>
 8008c6a:	2b00      	cmp	r3, #0
 8008c6c:	da38      	bge.n	8008ce0 <_puts_r+0xc4>
 8008c6e:	4622      	mov	r2, r4
 8008c70:	210a      	movs	r1, #10
 8008c72:	4628      	mov	r0, r5
 8008c74:	f000 f868 	bl	8008d48 <__swbuf_r>
 8008c78:	3001      	adds	r0, #1
 8008c7a:	d011      	beq.n	8008ca0 <_puts_r+0x84>
 8008c7c:	250a      	movs	r5, #10
 8008c7e:	e011      	b.n	8008ca4 <_puts_r+0x88>
 8008c80:	4b1b      	ldr	r3, [pc, #108]	; (8008cf0 <_puts_r+0xd4>)
 8008c82:	429c      	cmp	r4, r3
 8008c84:	d101      	bne.n	8008c8a <_puts_r+0x6e>
 8008c86:	68ac      	ldr	r4, [r5, #8]
 8008c88:	e7da      	b.n	8008c40 <_puts_r+0x24>
 8008c8a:	4b1a      	ldr	r3, [pc, #104]	; (8008cf4 <_puts_r+0xd8>)
 8008c8c:	429c      	cmp	r4, r3
 8008c8e:	bf08      	it	eq
 8008c90:	68ec      	ldreq	r4, [r5, #12]
 8008c92:	e7d5      	b.n	8008c40 <_puts_r+0x24>
 8008c94:	4621      	mov	r1, r4
 8008c96:	4628      	mov	r0, r5
 8008c98:	f000 f8a8 	bl	8008dec <__swsetup_r>
 8008c9c:	2800      	cmp	r0, #0
 8008c9e:	d0dd      	beq.n	8008c5c <_puts_r+0x40>
 8008ca0:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8008ca4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008ca6:	07da      	lsls	r2, r3, #31
 8008ca8:	d405      	bmi.n	8008cb6 <_puts_r+0x9a>
 8008caa:	89a3      	ldrh	r3, [r4, #12]
 8008cac:	059b      	lsls	r3, r3, #22
 8008cae:	d402      	bmi.n	8008cb6 <_puts_r+0x9a>
 8008cb0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008cb2:	f000 fac2 	bl	800923a <__retarget_lock_release_recursive>
 8008cb6:	4628      	mov	r0, r5
 8008cb8:	bd70      	pop	{r4, r5, r6, pc}
 8008cba:	2b00      	cmp	r3, #0
 8008cbc:	da04      	bge.n	8008cc8 <_puts_r+0xac>
 8008cbe:	69a2      	ldr	r2, [r4, #24]
 8008cc0:	429a      	cmp	r2, r3
 8008cc2:	dc06      	bgt.n	8008cd2 <_puts_r+0xb6>
 8008cc4:	290a      	cmp	r1, #10
 8008cc6:	d004      	beq.n	8008cd2 <_puts_r+0xb6>
 8008cc8:	6823      	ldr	r3, [r4, #0]
 8008cca:	1c5a      	adds	r2, r3, #1
 8008ccc:	6022      	str	r2, [r4, #0]
 8008cce:	7019      	strb	r1, [r3, #0]
 8008cd0:	e7c5      	b.n	8008c5e <_puts_r+0x42>
 8008cd2:	4622      	mov	r2, r4
 8008cd4:	4628      	mov	r0, r5
 8008cd6:	f000 f837 	bl	8008d48 <__swbuf_r>
 8008cda:	3001      	adds	r0, #1
 8008cdc:	d1bf      	bne.n	8008c5e <_puts_r+0x42>
 8008cde:	e7df      	b.n	8008ca0 <_puts_r+0x84>
 8008ce0:	6823      	ldr	r3, [r4, #0]
 8008ce2:	250a      	movs	r5, #10
 8008ce4:	1c5a      	adds	r2, r3, #1
 8008ce6:	6022      	str	r2, [r4, #0]
 8008ce8:	701d      	strb	r5, [r3, #0]
 8008cea:	e7db      	b.n	8008ca4 <_puts_r+0x88>
 8008cec:	0800a73c 	.word	0x0800a73c
 8008cf0:	0800a75c 	.word	0x0800a75c
 8008cf4:	0800a71c 	.word	0x0800a71c

08008cf8 <puts>:
 8008cf8:	4b02      	ldr	r3, [pc, #8]	; (8008d04 <puts+0xc>)
 8008cfa:	4601      	mov	r1, r0
 8008cfc:	6818      	ldr	r0, [r3, #0]
 8008cfe:	f7ff bf8d 	b.w	8008c1c <_puts_r>
 8008d02:	bf00      	nop
 8008d04:	2000001c 	.word	0x2000001c

08008d08 <siprintf>:
 8008d08:	b40e      	push	{r1, r2, r3}
 8008d0a:	b500      	push	{lr}
 8008d0c:	b09c      	sub	sp, #112	; 0x70
 8008d0e:	ab1d      	add	r3, sp, #116	; 0x74
 8008d10:	9002      	str	r0, [sp, #8]
 8008d12:	9006      	str	r0, [sp, #24]
 8008d14:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8008d18:	4809      	ldr	r0, [pc, #36]	; (8008d40 <siprintf+0x38>)
 8008d1a:	9107      	str	r1, [sp, #28]
 8008d1c:	9104      	str	r1, [sp, #16]
 8008d1e:	4909      	ldr	r1, [pc, #36]	; (8008d44 <siprintf+0x3c>)
 8008d20:	f853 2b04 	ldr.w	r2, [r3], #4
 8008d24:	9105      	str	r1, [sp, #20]
 8008d26:	6800      	ldr	r0, [r0, #0]
 8008d28:	9301      	str	r3, [sp, #4]
 8008d2a:	a902      	add	r1, sp, #8
 8008d2c:	f000 fc28 	bl	8009580 <_svfiprintf_r>
 8008d30:	9b02      	ldr	r3, [sp, #8]
 8008d32:	2200      	movs	r2, #0
 8008d34:	701a      	strb	r2, [r3, #0]
 8008d36:	b01c      	add	sp, #112	; 0x70
 8008d38:	f85d eb04 	ldr.w	lr, [sp], #4
 8008d3c:	b003      	add	sp, #12
 8008d3e:	4770      	bx	lr
 8008d40:	2000001c 	.word	0x2000001c
 8008d44:	ffff0208 	.word	0xffff0208

08008d48 <__swbuf_r>:
 8008d48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008d4a:	460e      	mov	r6, r1
 8008d4c:	4614      	mov	r4, r2
 8008d4e:	4605      	mov	r5, r0
 8008d50:	b118      	cbz	r0, 8008d5a <__swbuf_r+0x12>
 8008d52:	6983      	ldr	r3, [r0, #24]
 8008d54:	b90b      	cbnz	r3, 8008d5a <__swbuf_r+0x12>
 8008d56:	f000 f9d1 	bl	80090fc <__sinit>
 8008d5a:	4b21      	ldr	r3, [pc, #132]	; (8008de0 <__swbuf_r+0x98>)
 8008d5c:	429c      	cmp	r4, r3
 8008d5e:	d12b      	bne.n	8008db8 <__swbuf_r+0x70>
 8008d60:	686c      	ldr	r4, [r5, #4]
 8008d62:	69a3      	ldr	r3, [r4, #24]
 8008d64:	60a3      	str	r3, [r4, #8]
 8008d66:	89a3      	ldrh	r3, [r4, #12]
 8008d68:	071a      	lsls	r2, r3, #28
 8008d6a:	d52f      	bpl.n	8008dcc <__swbuf_r+0x84>
 8008d6c:	6923      	ldr	r3, [r4, #16]
 8008d6e:	b36b      	cbz	r3, 8008dcc <__swbuf_r+0x84>
 8008d70:	6923      	ldr	r3, [r4, #16]
 8008d72:	6820      	ldr	r0, [r4, #0]
 8008d74:	1ac0      	subs	r0, r0, r3
 8008d76:	6963      	ldr	r3, [r4, #20]
 8008d78:	b2f6      	uxtb	r6, r6
 8008d7a:	4283      	cmp	r3, r0
 8008d7c:	4637      	mov	r7, r6
 8008d7e:	dc04      	bgt.n	8008d8a <__swbuf_r+0x42>
 8008d80:	4621      	mov	r1, r4
 8008d82:	4628      	mov	r0, r5
 8008d84:	f000 f926 	bl	8008fd4 <_fflush_r>
 8008d88:	bb30      	cbnz	r0, 8008dd8 <__swbuf_r+0x90>
 8008d8a:	68a3      	ldr	r3, [r4, #8]
 8008d8c:	3b01      	subs	r3, #1
 8008d8e:	60a3      	str	r3, [r4, #8]
 8008d90:	6823      	ldr	r3, [r4, #0]
 8008d92:	1c5a      	adds	r2, r3, #1
 8008d94:	6022      	str	r2, [r4, #0]
 8008d96:	701e      	strb	r6, [r3, #0]
 8008d98:	6963      	ldr	r3, [r4, #20]
 8008d9a:	3001      	adds	r0, #1
 8008d9c:	4283      	cmp	r3, r0
 8008d9e:	d004      	beq.n	8008daa <__swbuf_r+0x62>
 8008da0:	89a3      	ldrh	r3, [r4, #12]
 8008da2:	07db      	lsls	r3, r3, #31
 8008da4:	d506      	bpl.n	8008db4 <__swbuf_r+0x6c>
 8008da6:	2e0a      	cmp	r6, #10
 8008da8:	d104      	bne.n	8008db4 <__swbuf_r+0x6c>
 8008daa:	4621      	mov	r1, r4
 8008dac:	4628      	mov	r0, r5
 8008dae:	f000 f911 	bl	8008fd4 <_fflush_r>
 8008db2:	b988      	cbnz	r0, 8008dd8 <__swbuf_r+0x90>
 8008db4:	4638      	mov	r0, r7
 8008db6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008db8:	4b0a      	ldr	r3, [pc, #40]	; (8008de4 <__swbuf_r+0x9c>)
 8008dba:	429c      	cmp	r4, r3
 8008dbc:	d101      	bne.n	8008dc2 <__swbuf_r+0x7a>
 8008dbe:	68ac      	ldr	r4, [r5, #8]
 8008dc0:	e7cf      	b.n	8008d62 <__swbuf_r+0x1a>
 8008dc2:	4b09      	ldr	r3, [pc, #36]	; (8008de8 <__swbuf_r+0xa0>)
 8008dc4:	429c      	cmp	r4, r3
 8008dc6:	bf08      	it	eq
 8008dc8:	68ec      	ldreq	r4, [r5, #12]
 8008dca:	e7ca      	b.n	8008d62 <__swbuf_r+0x1a>
 8008dcc:	4621      	mov	r1, r4
 8008dce:	4628      	mov	r0, r5
 8008dd0:	f000 f80c 	bl	8008dec <__swsetup_r>
 8008dd4:	2800      	cmp	r0, #0
 8008dd6:	d0cb      	beq.n	8008d70 <__swbuf_r+0x28>
 8008dd8:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8008ddc:	e7ea      	b.n	8008db4 <__swbuf_r+0x6c>
 8008dde:	bf00      	nop
 8008de0:	0800a73c 	.word	0x0800a73c
 8008de4:	0800a75c 	.word	0x0800a75c
 8008de8:	0800a71c 	.word	0x0800a71c

08008dec <__swsetup_r>:
 8008dec:	4b32      	ldr	r3, [pc, #200]	; (8008eb8 <__swsetup_r+0xcc>)
 8008dee:	b570      	push	{r4, r5, r6, lr}
 8008df0:	681d      	ldr	r5, [r3, #0]
 8008df2:	4606      	mov	r6, r0
 8008df4:	460c      	mov	r4, r1
 8008df6:	b125      	cbz	r5, 8008e02 <__swsetup_r+0x16>
 8008df8:	69ab      	ldr	r3, [r5, #24]
 8008dfa:	b913      	cbnz	r3, 8008e02 <__swsetup_r+0x16>
 8008dfc:	4628      	mov	r0, r5
 8008dfe:	f000 f97d 	bl	80090fc <__sinit>
 8008e02:	4b2e      	ldr	r3, [pc, #184]	; (8008ebc <__swsetup_r+0xd0>)
 8008e04:	429c      	cmp	r4, r3
 8008e06:	d10f      	bne.n	8008e28 <__swsetup_r+0x3c>
 8008e08:	686c      	ldr	r4, [r5, #4]
 8008e0a:	89a3      	ldrh	r3, [r4, #12]
 8008e0c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008e10:	0719      	lsls	r1, r3, #28
 8008e12:	d42c      	bmi.n	8008e6e <__swsetup_r+0x82>
 8008e14:	06dd      	lsls	r5, r3, #27
 8008e16:	d411      	bmi.n	8008e3c <__swsetup_r+0x50>
 8008e18:	2309      	movs	r3, #9
 8008e1a:	6033      	str	r3, [r6, #0]
 8008e1c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8008e20:	81a3      	strh	r3, [r4, #12]
 8008e22:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008e26:	e03e      	b.n	8008ea6 <__swsetup_r+0xba>
 8008e28:	4b25      	ldr	r3, [pc, #148]	; (8008ec0 <__swsetup_r+0xd4>)
 8008e2a:	429c      	cmp	r4, r3
 8008e2c:	d101      	bne.n	8008e32 <__swsetup_r+0x46>
 8008e2e:	68ac      	ldr	r4, [r5, #8]
 8008e30:	e7eb      	b.n	8008e0a <__swsetup_r+0x1e>
 8008e32:	4b24      	ldr	r3, [pc, #144]	; (8008ec4 <__swsetup_r+0xd8>)
 8008e34:	429c      	cmp	r4, r3
 8008e36:	bf08      	it	eq
 8008e38:	68ec      	ldreq	r4, [r5, #12]
 8008e3a:	e7e6      	b.n	8008e0a <__swsetup_r+0x1e>
 8008e3c:	0758      	lsls	r0, r3, #29
 8008e3e:	d512      	bpl.n	8008e66 <__swsetup_r+0x7a>
 8008e40:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008e42:	b141      	cbz	r1, 8008e56 <__swsetup_r+0x6a>
 8008e44:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008e48:	4299      	cmp	r1, r3
 8008e4a:	d002      	beq.n	8008e52 <__swsetup_r+0x66>
 8008e4c:	4630      	mov	r0, r6
 8008e4e:	f000 fa5b 	bl	8009308 <_free_r>
 8008e52:	2300      	movs	r3, #0
 8008e54:	6363      	str	r3, [r4, #52]	; 0x34
 8008e56:	89a3      	ldrh	r3, [r4, #12]
 8008e58:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8008e5c:	81a3      	strh	r3, [r4, #12]
 8008e5e:	2300      	movs	r3, #0
 8008e60:	6063      	str	r3, [r4, #4]
 8008e62:	6923      	ldr	r3, [r4, #16]
 8008e64:	6023      	str	r3, [r4, #0]
 8008e66:	89a3      	ldrh	r3, [r4, #12]
 8008e68:	f043 0308 	orr.w	r3, r3, #8
 8008e6c:	81a3      	strh	r3, [r4, #12]
 8008e6e:	6923      	ldr	r3, [r4, #16]
 8008e70:	b94b      	cbnz	r3, 8008e86 <__swsetup_r+0x9a>
 8008e72:	89a3      	ldrh	r3, [r4, #12]
 8008e74:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8008e78:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008e7c:	d003      	beq.n	8008e86 <__swsetup_r+0x9a>
 8008e7e:	4621      	mov	r1, r4
 8008e80:	4630      	mov	r0, r6
 8008e82:	f000 fa01 	bl	8009288 <__smakebuf_r>
 8008e86:	89a0      	ldrh	r0, [r4, #12]
 8008e88:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008e8c:	f010 0301 	ands.w	r3, r0, #1
 8008e90:	d00a      	beq.n	8008ea8 <__swsetup_r+0xbc>
 8008e92:	2300      	movs	r3, #0
 8008e94:	60a3      	str	r3, [r4, #8]
 8008e96:	6963      	ldr	r3, [r4, #20]
 8008e98:	425b      	negs	r3, r3
 8008e9a:	61a3      	str	r3, [r4, #24]
 8008e9c:	6923      	ldr	r3, [r4, #16]
 8008e9e:	b943      	cbnz	r3, 8008eb2 <__swsetup_r+0xc6>
 8008ea0:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8008ea4:	d1ba      	bne.n	8008e1c <__swsetup_r+0x30>
 8008ea6:	bd70      	pop	{r4, r5, r6, pc}
 8008ea8:	0781      	lsls	r1, r0, #30
 8008eaa:	bf58      	it	pl
 8008eac:	6963      	ldrpl	r3, [r4, #20]
 8008eae:	60a3      	str	r3, [r4, #8]
 8008eb0:	e7f4      	b.n	8008e9c <__swsetup_r+0xb0>
 8008eb2:	2000      	movs	r0, #0
 8008eb4:	e7f7      	b.n	8008ea6 <__swsetup_r+0xba>
 8008eb6:	bf00      	nop
 8008eb8:	2000001c 	.word	0x2000001c
 8008ebc:	0800a73c 	.word	0x0800a73c
 8008ec0:	0800a75c 	.word	0x0800a75c
 8008ec4:	0800a71c 	.word	0x0800a71c

08008ec8 <__sflush_r>:
 8008ec8:	898a      	ldrh	r2, [r1, #12]
 8008eca:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008ece:	4605      	mov	r5, r0
 8008ed0:	0710      	lsls	r0, r2, #28
 8008ed2:	460c      	mov	r4, r1
 8008ed4:	d458      	bmi.n	8008f88 <__sflush_r+0xc0>
 8008ed6:	684b      	ldr	r3, [r1, #4]
 8008ed8:	2b00      	cmp	r3, #0
 8008eda:	dc05      	bgt.n	8008ee8 <__sflush_r+0x20>
 8008edc:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8008ede:	2b00      	cmp	r3, #0
 8008ee0:	dc02      	bgt.n	8008ee8 <__sflush_r+0x20>
 8008ee2:	2000      	movs	r0, #0
 8008ee4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008ee8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008eea:	2e00      	cmp	r6, #0
 8008eec:	d0f9      	beq.n	8008ee2 <__sflush_r+0x1a>
 8008eee:	2300      	movs	r3, #0
 8008ef0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8008ef4:	682f      	ldr	r7, [r5, #0]
 8008ef6:	602b      	str	r3, [r5, #0]
 8008ef8:	d032      	beq.n	8008f60 <__sflush_r+0x98>
 8008efa:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8008efc:	89a3      	ldrh	r3, [r4, #12]
 8008efe:	075a      	lsls	r2, r3, #29
 8008f00:	d505      	bpl.n	8008f0e <__sflush_r+0x46>
 8008f02:	6863      	ldr	r3, [r4, #4]
 8008f04:	1ac0      	subs	r0, r0, r3
 8008f06:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8008f08:	b10b      	cbz	r3, 8008f0e <__sflush_r+0x46>
 8008f0a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008f0c:	1ac0      	subs	r0, r0, r3
 8008f0e:	2300      	movs	r3, #0
 8008f10:	4602      	mov	r2, r0
 8008f12:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008f14:	6a21      	ldr	r1, [r4, #32]
 8008f16:	4628      	mov	r0, r5
 8008f18:	47b0      	blx	r6
 8008f1a:	1c43      	adds	r3, r0, #1
 8008f1c:	89a3      	ldrh	r3, [r4, #12]
 8008f1e:	d106      	bne.n	8008f2e <__sflush_r+0x66>
 8008f20:	6829      	ldr	r1, [r5, #0]
 8008f22:	291d      	cmp	r1, #29
 8008f24:	d82c      	bhi.n	8008f80 <__sflush_r+0xb8>
 8008f26:	4a2a      	ldr	r2, [pc, #168]	; (8008fd0 <__sflush_r+0x108>)
 8008f28:	40ca      	lsrs	r2, r1
 8008f2a:	07d6      	lsls	r6, r2, #31
 8008f2c:	d528      	bpl.n	8008f80 <__sflush_r+0xb8>
 8008f2e:	2200      	movs	r2, #0
 8008f30:	6062      	str	r2, [r4, #4]
 8008f32:	04d9      	lsls	r1, r3, #19
 8008f34:	6922      	ldr	r2, [r4, #16]
 8008f36:	6022      	str	r2, [r4, #0]
 8008f38:	d504      	bpl.n	8008f44 <__sflush_r+0x7c>
 8008f3a:	1c42      	adds	r2, r0, #1
 8008f3c:	d101      	bne.n	8008f42 <__sflush_r+0x7a>
 8008f3e:	682b      	ldr	r3, [r5, #0]
 8008f40:	b903      	cbnz	r3, 8008f44 <__sflush_r+0x7c>
 8008f42:	6560      	str	r0, [r4, #84]	; 0x54
 8008f44:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008f46:	602f      	str	r7, [r5, #0]
 8008f48:	2900      	cmp	r1, #0
 8008f4a:	d0ca      	beq.n	8008ee2 <__sflush_r+0x1a>
 8008f4c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008f50:	4299      	cmp	r1, r3
 8008f52:	d002      	beq.n	8008f5a <__sflush_r+0x92>
 8008f54:	4628      	mov	r0, r5
 8008f56:	f000 f9d7 	bl	8009308 <_free_r>
 8008f5a:	2000      	movs	r0, #0
 8008f5c:	6360      	str	r0, [r4, #52]	; 0x34
 8008f5e:	e7c1      	b.n	8008ee4 <__sflush_r+0x1c>
 8008f60:	6a21      	ldr	r1, [r4, #32]
 8008f62:	2301      	movs	r3, #1
 8008f64:	4628      	mov	r0, r5
 8008f66:	47b0      	blx	r6
 8008f68:	1c41      	adds	r1, r0, #1
 8008f6a:	d1c7      	bne.n	8008efc <__sflush_r+0x34>
 8008f6c:	682b      	ldr	r3, [r5, #0]
 8008f6e:	2b00      	cmp	r3, #0
 8008f70:	d0c4      	beq.n	8008efc <__sflush_r+0x34>
 8008f72:	2b1d      	cmp	r3, #29
 8008f74:	d001      	beq.n	8008f7a <__sflush_r+0xb2>
 8008f76:	2b16      	cmp	r3, #22
 8008f78:	d101      	bne.n	8008f7e <__sflush_r+0xb6>
 8008f7a:	602f      	str	r7, [r5, #0]
 8008f7c:	e7b1      	b.n	8008ee2 <__sflush_r+0x1a>
 8008f7e:	89a3      	ldrh	r3, [r4, #12]
 8008f80:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008f84:	81a3      	strh	r3, [r4, #12]
 8008f86:	e7ad      	b.n	8008ee4 <__sflush_r+0x1c>
 8008f88:	690f      	ldr	r7, [r1, #16]
 8008f8a:	2f00      	cmp	r7, #0
 8008f8c:	d0a9      	beq.n	8008ee2 <__sflush_r+0x1a>
 8008f8e:	0793      	lsls	r3, r2, #30
 8008f90:	680e      	ldr	r6, [r1, #0]
 8008f92:	bf08      	it	eq
 8008f94:	694b      	ldreq	r3, [r1, #20]
 8008f96:	600f      	str	r7, [r1, #0]
 8008f98:	bf18      	it	ne
 8008f9a:	2300      	movne	r3, #0
 8008f9c:	eba6 0807 	sub.w	r8, r6, r7
 8008fa0:	608b      	str	r3, [r1, #8]
 8008fa2:	f1b8 0f00 	cmp.w	r8, #0
 8008fa6:	dd9c      	ble.n	8008ee2 <__sflush_r+0x1a>
 8008fa8:	6a21      	ldr	r1, [r4, #32]
 8008faa:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8008fac:	4643      	mov	r3, r8
 8008fae:	463a      	mov	r2, r7
 8008fb0:	4628      	mov	r0, r5
 8008fb2:	47b0      	blx	r6
 8008fb4:	2800      	cmp	r0, #0
 8008fb6:	dc06      	bgt.n	8008fc6 <__sflush_r+0xfe>
 8008fb8:	89a3      	ldrh	r3, [r4, #12]
 8008fba:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008fbe:	81a3      	strh	r3, [r4, #12]
 8008fc0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008fc4:	e78e      	b.n	8008ee4 <__sflush_r+0x1c>
 8008fc6:	4407      	add	r7, r0
 8008fc8:	eba8 0800 	sub.w	r8, r8, r0
 8008fcc:	e7e9      	b.n	8008fa2 <__sflush_r+0xda>
 8008fce:	bf00      	nop
 8008fd0:	20400001 	.word	0x20400001

08008fd4 <_fflush_r>:
 8008fd4:	b538      	push	{r3, r4, r5, lr}
 8008fd6:	690b      	ldr	r3, [r1, #16]
 8008fd8:	4605      	mov	r5, r0
 8008fda:	460c      	mov	r4, r1
 8008fdc:	b913      	cbnz	r3, 8008fe4 <_fflush_r+0x10>
 8008fde:	2500      	movs	r5, #0
 8008fe0:	4628      	mov	r0, r5
 8008fe2:	bd38      	pop	{r3, r4, r5, pc}
 8008fe4:	b118      	cbz	r0, 8008fee <_fflush_r+0x1a>
 8008fe6:	6983      	ldr	r3, [r0, #24]
 8008fe8:	b90b      	cbnz	r3, 8008fee <_fflush_r+0x1a>
 8008fea:	f000 f887 	bl	80090fc <__sinit>
 8008fee:	4b14      	ldr	r3, [pc, #80]	; (8009040 <_fflush_r+0x6c>)
 8008ff0:	429c      	cmp	r4, r3
 8008ff2:	d11b      	bne.n	800902c <_fflush_r+0x58>
 8008ff4:	686c      	ldr	r4, [r5, #4]
 8008ff6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008ffa:	2b00      	cmp	r3, #0
 8008ffc:	d0ef      	beq.n	8008fde <_fflush_r+0xa>
 8008ffe:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8009000:	07d0      	lsls	r0, r2, #31
 8009002:	d404      	bmi.n	800900e <_fflush_r+0x3a>
 8009004:	0599      	lsls	r1, r3, #22
 8009006:	d402      	bmi.n	800900e <_fflush_r+0x3a>
 8009008:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800900a:	f000 f915 	bl	8009238 <__retarget_lock_acquire_recursive>
 800900e:	4628      	mov	r0, r5
 8009010:	4621      	mov	r1, r4
 8009012:	f7ff ff59 	bl	8008ec8 <__sflush_r>
 8009016:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009018:	07da      	lsls	r2, r3, #31
 800901a:	4605      	mov	r5, r0
 800901c:	d4e0      	bmi.n	8008fe0 <_fflush_r+0xc>
 800901e:	89a3      	ldrh	r3, [r4, #12]
 8009020:	059b      	lsls	r3, r3, #22
 8009022:	d4dd      	bmi.n	8008fe0 <_fflush_r+0xc>
 8009024:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009026:	f000 f908 	bl	800923a <__retarget_lock_release_recursive>
 800902a:	e7d9      	b.n	8008fe0 <_fflush_r+0xc>
 800902c:	4b05      	ldr	r3, [pc, #20]	; (8009044 <_fflush_r+0x70>)
 800902e:	429c      	cmp	r4, r3
 8009030:	d101      	bne.n	8009036 <_fflush_r+0x62>
 8009032:	68ac      	ldr	r4, [r5, #8]
 8009034:	e7df      	b.n	8008ff6 <_fflush_r+0x22>
 8009036:	4b04      	ldr	r3, [pc, #16]	; (8009048 <_fflush_r+0x74>)
 8009038:	429c      	cmp	r4, r3
 800903a:	bf08      	it	eq
 800903c:	68ec      	ldreq	r4, [r5, #12]
 800903e:	e7da      	b.n	8008ff6 <_fflush_r+0x22>
 8009040:	0800a73c 	.word	0x0800a73c
 8009044:	0800a75c 	.word	0x0800a75c
 8009048:	0800a71c 	.word	0x0800a71c

0800904c <std>:
 800904c:	2300      	movs	r3, #0
 800904e:	b510      	push	{r4, lr}
 8009050:	4604      	mov	r4, r0
 8009052:	e9c0 3300 	strd	r3, r3, [r0]
 8009056:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800905a:	6083      	str	r3, [r0, #8]
 800905c:	8181      	strh	r1, [r0, #12]
 800905e:	6643      	str	r3, [r0, #100]	; 0x64
 8009060:	81c2      	strh	r2, [r0, #14]
 8009062:	6183      	str	r3, [r0, #24]
 8009064:	4619      	mov	r1, r3
 8009066:	2208      	movs	r2, #8
 8009068:	305c      	adds	r0, #92	; 0x5c
 800906a:	f7ff fdb7 	bl	8008bdc <memset>
 800906e:	4b05      	ldr	r3, [pc, #20]	; (8009084 <std+0x38>)
 8009070:	6263      	str	r3, [r4, #36]	; 0x24
 8009072:	4b05      	ldr	r3, [pc, #20]	; (8009088 <std+0x3c>)
 8009074:	62a3      	str	r3, [r4, #40]	; 0x28
 8009076:	4b05      	ldr	r3, [pc, #20]	; (800908c <std+0x40>)
 8009078:	62e3      	str	r3, [r4, #44]	; 0x2c
 800907a:	4b05      	ldr	r3, [pc, #20]	; (8009090 <std+0x44>)
 800907c:	6224      	str	r4, [r4, #32]
 800907e:	6323      	str	r3, [r4, #48]	; 0x30
 8009080:	bd10      	pop	{r4, pc}
 8009082:	bf00      	nop
 8009084:	08009d7d 	.word	0x08009d7d
 8009088:	08009d9f 	.word	0x08009d9f
 800908c:	08009dd7 	.word	0x08009dd7
 8009090:	08009dfb 	.word	0x08009dfb

08009094 <_cleanup_r>:
 8009094:	4901      	ldr	r1, [pc, #4]	; (800909c <_cleanup_r+0x8>)
 8009096:	f000 b8af 	b.w	80091f8 <_fwalk_reent>
 800909a:	bf00      	nop
 800909c:	08008fd5 	.word	0x08008fd5

080090a0 <__sfmoreglue>:
 80090a0:	b570      	push	{r4, r5, r6, lr}
 80090a2:	2268      	movs	r2, #104	; 0x68
 80090a4:	1e4d      	subs	r5, r1, #1
 80090a6:	4355      	muls	r5, r2
 80090a8:	460e      	mov	r6, r1
 80090aa:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80090ae:	f000 f997 	bl	80093e0 <_malloc_r>
 80090b2:	4604      	mov	r4, r0
 80090b4:	b140      	cbz	r0, 80090c8 <__sfmoreglue+0x28>
 80090b6:	2100      	movs	r1, #0
 80090b8:	e9c0 1600 	strd	r1, r6, [r0]
 80090bc:	300c      	adds	r0, #12
 80090be:	60a0      	str	r0, [r4, #8]
 80090c0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80090c4:	f7ff fd8a 	bl	8008bdc <memset>
 80090c8:	4620      	mov	r0, r4
 80090ca:	bd70      	pop	{r4, r5, r6, pc}

080090cc <__sfp_lock_acquire>:
 80090cc:	4801      	ldr	r0, [pc, #4]	; (80090d4 <__sfp_lock_acquire+0x8>)
 80090ce:	f000 b8b3 	b.w	8009238 <__retarget_lock_acquire_recursive>
 80090d2:	bf00      	nop
 80090d4:	20004b41 	.word	0x20004b41

080090d8 <__sfp_lock_release>:
 80090d8:	4801      	ldr	r0, [pc, #4]	; (80090e0 <__sfp_lock_release+0x8>)
 80090da:	f000 b8ae 	b.w	800923a <__retarget_lock_release_recursive>
 80090de:	bf00      	nop
 80090e0:	20004b41 	.word	0x20004b41

080090e4 <__sinit_lock_acquire>:
 80090e4:	4801      	ldr	r0, [pc, #4]	; (80090ec <__sinit_lock_acquire+0x8>)
 80090e6:	f000 b8a7 	b.w	8009238 <__retarget_lock_acquire_recursive>
 80090ea:	bf00      	nop
 80090ec:	20004b42 	.word	0x20004b42

080090f0 <__sinit_lock_release>:
 80090f0:	4801      	ldr	r0, [pc, #4]	; (80090f8 <__sinit_lock_release+0x8>)
 80090f2:	f000 b8a2 	b.w	800923a <__retarget_lock_release_recursive>
 80090f6:	bf00      	nop
 80090f8:	20004b42 	.word	0x20004b42

080090fc <__sinit>:
 80090fc:	b510      	push	{r4, lr}
 80090fe:	4604      	mov	r4, r0
 8009100:	f7ff fff0 	bl	80090e4 <__sinit_lock_acquire>
 8009104:	69a3      	ldr	r3, [r4, #24]
 8009106:	b11b      	cbz	r3, 8009110 <__sinit+0x14>
 8009108:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800910c:	f7ff bff0 	b.w	80090f0 <__sinit_lock_release>
 8009110:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8009114:	6523      	str	r3, [r4, #80]	; 0x50
 8009116:	4b13      	ldr	r3, [pc, #76]	; (8009164 <__sinit+0x68>)
 8009118:	4a13      	ldr	r2, [pc, #76]	; (8009168 <__sinit+0x6c>)
 800911a:	681b      	ldr	r3, [r3, #0]
 800911c:	62a2      	str	r2, [r4, #40]	; 0x28
 800911e:	42a3      	cmp	r3, r4
 8009120:	bf04      	itt	eq
 8009122:	2301      	moveq	r3, #1
 8009124:	61a3      	streq	r3, [r4, #24]
 8009126:	4620      	mov	r0, r4
 8009128:	f000 f820 	bl	800916c <__sfp>
 800912c:	6060      	str	r0, [r4, #4]
 800912e:	4620      	mov	r0, r4
 8009130:	f000 f81c 	bl	800916c <__sfp>
 8009134:	60a0      	str	r0, [r4, #8]
 8009136:	4620      	mov	r0, r4
 8009138:	f000 f818 	bl	800916c <__sfp>
 800913c:	2200      	movs	r2, #0
 800913e:	60e0      	str	r0, [r4, #12]
 8009140:	2104      	movs	r1, #4
 8009142:	6860      	ldr	r0, [r4, #4]
 8009144:	f7ff ff82 	bl	800904c <std>
 8009148:	68a0      	ldr	r0, [r4, #8]
 800914a:	2201      	movs	r2, #1
 800914c:	2109      	movs	r1, #9
 800914e:	f7ff ff7d 	bl	800904c <std>
 8009152:	68e0      	ldr	r0, [r4, #12]
 8009154:	2202      	movs	r2, #2
 8009156:	2112      	movs	r1, #18
 8009158:	f7ff ff78 	bl	800904c <std>
 800915c:	2301      	movs	r3, #1
 800915e:	61a3      	str	r3, [r4, #24]
 8009160:	e7d2      	b.n	8009108 <__sinit+0xc>
 8009162:	bf00      	nop
 8009164:	0800a718 	.word	0x0800a718
 8009168:	08009095 	.word	0x08009095

0800916c <__sfp>:
 800916c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800916e:	4607      	mov	r7, r0
 8009170:	f7ff ffac 	bl	80090cc <__sfp_lock_acquire>
 8009174:	4b1e      	ldr	r3, [pc, #120]	; (80091f0 <__sfp+0x84>)
 8009176:	681e      	ldr	r6, [r3, #0]
 8009178:	69b3      	ldr	r3, [r6, #24]
 800917a:	b913      	cbnz	r3, 8009182 <__sfp+0x16>
 800917c:	4630      	mov	r0, r6
 800917e:	f7ff ffbd 	bl	80090fc <__sinit>
 8009182:	3648      	adds	r6, #72	; 0x48
 8009184:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8009188:	3b01      	subs	r3, #1
 800918a:	d503      	bpl.n	8009194 <__sfp+0x28>
 800918c:	6833      	ldr	r3, [r6, #0]
 800918e:	b30b      	cbz	r3, 80091d4 <__sfp+0x68>
 8009190:	6836      	ldr	r6, [r6, #0]
 8009192:	e7f7      	b.n	8009184 <__sfp+0x18>
 8009194:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8009198:	b9d5      	cbnz	r5, 80091d0 <__sfp+0x64>
 800919a:	4b16      	ldr	r3, [pc, #88]	; (80091f4 <__sfp+0x88>)
 800919c:	60e3      	str	r3, [r4, #12]
 800919e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80091a2:	6665      	str	r5, [r4, #100]	; 0x64
 80091a4:	f000 f847 	bl	8009236 <__retarget_lock_init_recursive>
 80091a8:	f7ff ff96 	bl	80090d8 <__sfp_lock_release>
 80091ac:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80091b0:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80091b4:	6025      	str	r5, [r4, #0]
 80091b6:	61a5      	str	r5, [r4, #24]
 80091b8:	2208      	movs	r2, #8
 80091ba:	4629      	mov	r1, r5
 80091bc:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80091c0:	f7ff fd0c 	bl	8008bdc <memset>
 80091c4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80091c8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80091cc:	4620      	mov	r0, r4
 80091ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80091d0:	3468      	adds	r4, #104	; 0x68
 80091d2:	e7d9      	b.n	8009188 <__sfp+0x1c>
 80091d4:	2104      	movs	r1, #4
 80091d6:	4638      	mov	r0, r7
 80091d8:	f7ff ff62 	bl	80090a0 <__sfmoreglue>
 80091dc:	4604      	mov	r4, r0
 80091de:	6030      	str	r0, [r6, #0]
 80091e0:	2800      	cmp	r0, #0
 80091e2:	d1d5      	bne.n	8009190 <__sfp+0x24>
 80091e4:	f7ff ff78 	bl	80090d8 <__sfp_lock_release>
 80091e8:	230c      	movs	r3, #12
 80091ea:	603b      	str	r3, [r7, #0]
 80091ec:	e7ee      	b.n	80091cc <__sfp+0x60>
 80091ee:	bf00      	nop
 80091f0:	0800a718 	.word	0x0800a718
 80091f4:	ffff0001 	.word	0xffff0001

080091f8 <_fwalk_reent>:
 80091f8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80091fc:	4606      	mov	r6, r0
 80091fe:	4688      	mov	r8, r1
 8009200:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8009204:	2700      	movs	r7, #0
 8009206:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800920a:	f1b9 0901 	subs.w	r9, r9, #1
 800920e:	d505      	bpl.n	800921c <_fwalk_reent+0x24>
 8009210:	6824      	ldr	r4, [r4, #0]
 8009212:	2c00      	cmp	r4, #0
 8009214:	d1f7      	bne.n	8009206 <_fwalk_reent+0xe>
 8009216:	4638      	mov	r0, r7
 8009218:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800921c:	89ab      	ldrh	r3, [r5, #12]
 800921e:	2b01      	cmp	r3, #1
 8009220:	d907      	bls.n	8009232 <_fwalk_reent+0x3a>
 8009222:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8009226:	3301      	adds	r3, #1
 8009228:	d003      	beq.n	8009232 <_fwalk_reent+0x3a>
 800922a:	4629      	mov	r1, r5
 800922c:	4630      	mov	r0, r6
 800922e:	47c0      	blx	r8
 8009230:	4307      	orrs	r7, r0
 8009232:	3568      	adds	r5, #104	; 0x68
 8009234:	e7e9      	b.n	800920a <_fwalk_reent+0x12>

08009236 <__retarget_lock_init_recursive>:
 8009236:	4770      	bx	lr

08009238 <__retarget_lock_acquire_recursive>:
 8009238:	4770      	bx	lr

0800923a <__retarget_lock_release_recursive>:
 800923a:	4770      	bx	lr

0800923c <__swhatbuf_r>:
 800923c:	b570      	push	{r4, r5, r6, lr}
 800923e:	460e      	mov	r6, r1
 8009240:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009244:	2900      	cmp	r1, #0
 8009246:	b096      	sub	sp, #88	; 0x58
 8009248:	4614      	mov	r4, r2
 800924a:	461d      	mov	r5, r3
 800924c:	da08      	bge.n	8009260 <__swhatbuf_r+0x24>
 800924e:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8009252:	2200      	movs	r2, #0
 8009254:	602a      	str	r2, [r5, #0]
 8009256:	061a      	lsls	r2, r3, #24
 8009258:	d410      	bmi.n	800927c <__swhatbuf_r+0x40>
 800925a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800925e:	e00e      	b.n	800927e <__swhatbuf_r+0x42>
 8009260:	466a      	mov	r2, sp
 8009262:	f000 fdf1 	bl	8009e48 <_fstat_r>
 8009266:	2800      	cmp	r0, #0
 8009268:	dbf1      	blt.n	800924e <__swhatbuf_r+0x12>
 800926a:	9a01      	ldr	r2, [sp, #4]
 800926c:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8009270:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8009274:	425a      	negs	r2, r3
 8009276:	415a      	adcs	r2, r3
 8009278:	602a      	str	r2, [r5, #0]
 800927a:	e7ee      	b.n	800925a <__swhatbuf_r+0x1e>
 800927c:	2340      	movs	r3, #64	; 0x40
 800927e:	2000      	movs	r0, #0
 8009280:	6023      	str	r3, [r4, #0]
 8009282:	b016      	add	sp, #88	; 0x58
 8009284:	bd70      	pop	{r4, r5, r6, pc}
	...

08009288 <__smakebuf_r>:
 8009288:	898b      	ldrh	r3, [r1, #12]
 800928a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800928c:	079d      	lsls	r5, r3, #30
 800928e:	4606      	mov	r6, r0
 8009290:	460c      	mov	r4, r1
 8009292:	d507      	bpl.n	80092a4 <__smakebuf_r+0x1c>
 8009294:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8009298:	6023      	str	r3, [r4, #0]
 800929a:	6123      	str	r3, [r4, #16]
 800929c:	2301      	movs	r3, #1
 800929e:	6163      	str	r3, [r4, #20]
 80092a0:	b002      	add	sp, #8
 80092a2:	bd70      	pop	{r4, r5, r6, pc}
 80092a4:	ab01      	add	r3, sp, #4
 80092a6:	466a      	mov	r2, sp
 80092a8:	f7ff ffc8 	bl	800923c <__swhatbuf_r>
 80092ac:	9900      	ldr	r1, [sp, #0]
 80092ae:	4605      	mov	r5, r0
 80092b0:	4630      	mov	r0, r6
 80092b2:	f000 f895 	bl	80093e0 <_malloc_r>
 80092b6:	b948      	cbnz	r0, 80092cc <__smakebuf_r+0x44>
 80092b8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80092bc:	059a      	lsls	r2, r3, #22
 80092be:	d4ef      	bmi.n	80092a0 <__smakebuf_r+0x18>
 80092c0:	f023 0303 	bic.w	r3, r3, #3
 80092c4:	f043 0302 	orr.w	r3, r3, #2
 80092c8:	81a3      	strh	r3, [r4, #12]
 80092ca:	e7e3      	b.n	8009294 <__smakebuf_r+0xc>
 80092cc:	4b0d      	ldr	r3, [pc, #52]	; (8009304 <__smakebuf_r+0x7c>)
 80092ce:	62b3      	str	r3, [r6, #40]	; 0x28
 80092d0:	89a3      	ldrh	r3, [r4, #12]
 80092d2:	6020      	str	r0, [r4, #0]
 80092d4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80092d8:	81a3      	strh	r3, [r4, #12]
 80092da:	9b00      	ldr	r3, [sp, #0]
 80092dc:	6163      	str	r3, [r4, #20]
 80092de:	9b01      	ldr	r3, [sp, #4]
 80092e0:	6120      	str	r0, [r4, #16]
 80092e2:	b15b      	cbz	r3, 80092fc <__smakebuf_r+0x74>
 80092e4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80092e8:	4630      	mov	r0, r6
 80092ea:	f000 fdbf 	bl	8009e6c <_isatty_r>
 80092ee:	b128      	cbz	r0, 80092fc <__smakebuf_r+0x74>
 80092f0:	89a3      	ldrh	r3, [r4, #12]
 80092f2:	f023 0303 	bic.w	r3, r3, #3
 80092f6:	f043 0301 	orr.w	r3, r3, #1
 80092fa:	81a3      	strh	r3, [r4, #12]
 80092fc:	89a0      	ldrh	r0, [r4, #12]
 80092fe:	4305      	orrs	r5, r0
 8009300:	81a5      	strh	r5, [r4, #12]
 8009302:	e7cd      	b.n	80092a0 <__smakebuf_r+0x18>
 8009304:	08009095 	.word	0x08009095

08009308 <_free_r>:
 8009308:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800930a:	2900      	cmp	r1, #0
 800930c:	d044      	beq.n	8009398 <_free_r+0x90>
 800930e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009312:	9001      	str	r0, [sp, #4]
 8009314:	2b00      	cmp	r3, #0
 8009316:	f1a1 0404 	sub.w	r4, r1, #4
 800931a:	bfb8      	it	lt
 800931c:	18e4      	addlt	r4, r4, r3
 800931e:	f000 fde1 	bl	8009ee4 <__malloc_lock>
 8009322:	4a1e      	ldr	r2, [pc, #120]	; (800939c <_free_r+0x94>)
 8009324:	9801      	ldr	r0, [sp, #4]
 8009326:	6813      	ldr	r3, [r2, #0]
 8009328:	b933      	cbnz	r3, 8009338 <_free_r+0x30>
 800932a:	6063      	str	r3, [r4, #4]
 800932c:	6014      	str	r4, [r2, #0]
 800932e:	b003      	add	sp, #12
 8009330:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009334:	f000 bddc 	b.w	8009ef0 <__malloc_unlock>
 8009338:	42a3      	cmp	r3, r4
 800933a:	d908      	bls.n	800934e <_free_r+0x46>
 800933c:	6825      	ldr	r5, [r4, #0]
 800933e:	1961      	adds	r1, r4, r5
 8009340:	428b      	cmp	r3, r1
 8009342:	bf01      	itttt	eq
 8009344:	6819      	ldreq	r1, [r3, #0]
 8009346:	685b      	ldreq	r3, [r3, #4]
 8009348:	1949      	addeq	r1, r1, r5
 800934a:	6021      	streq	r1, [r4, #0]
 800934c:	e7ed      	b.n	800932a <_free_r+0x22>
 800934e:	461a      	mov	r2, r3
 8009350:	685b      	ldr	r3, [r3, #4]
 8009352:	b10b      	cbz	r3, 8009358 <_free_r+0x50>
 8009354:	42a3      	cmp	r3, r4
 8009356:	d9fa      	bls.n	800934e <_free_r+0x46>
 8009358:	6811      	ldr	r1, [r2, #0]
 800935a:	1855      	adds	r5, r2, r1
 800935c:	42a5      	cmp	r5, r4
 800935e:	d10b      	bne.n	8009378 <_free_r+0x70>
 8009360:	6824      	ldr	r4, [r4, #0]
 8009362:	4421      	add	r1, r4
 8009364:	1854      	adds	r4, r2, r1
 8009366:	42a3      	cmp	r3, r4
 8009368:	6011      	str	r1, [r2, #0]
 800936a:	d1e0      	bne.n	800932e <_free_r+0x26>
 800936c:	681c      	ldr	r4, [r3, #0]
 800936e:	685b      	ldr	r3, [r3, #4]
 8009370:	6053      	str	r3, [r2, #4]
 8009372:	4421      	add	r1, r4
 8009374:	6011      	str	r1, [r2, #0]
 8009376:	e7da      	b.n	800932e <_free_r+0x26>
 8009378:	d902      	bls.n	8009380 <_free_r+0x78>
 800937a:	230c      	movs	r3, #12
 800937c:	6003      	str	r3, [r0, #0]
 800937e:	e7d6      	b.n	800932e <_free_r+0x26>
 8009380:	6825      	ldr	r5, [r4, #0]
 8009382:	1961      	adds	r1, r4, r5
 8009384:	428b      	cmp	r3, r1
 8009386:	bf04      	itt	eq
 8009388:	6819      	ldreq	r1, [r3, #0]
 800938a:	685b      	ldreq	r3, [r3, #4]
 800938c:	6063      	str	r3, [r4, #4]
 800938e:	bf04      	itt	eq
 8009390:	1949      	addeq	r1, r1, r5
 8009392:	6021      	streq	r1, [r4, #0]
 8009394:	6054      	str	r4, [r2, #4]
 8009396:	e7ca      	b.n	800932e <_free_r+0x26>
 8009398:	b003      	add	sp, #12
 800939a:	bd30      	pop	{r4, r5, pc}
 800939c:	20004b44 	.word	0x20004b44

080093a0 <sbrk_aligned>:
 80093a0:	b570      	push	{r4, r5, r6, lr}
 80093a2:	4e0e      	ldr	r6, [pc, #56]	; (80093dc <sbrk_aligned+0x3c>)
 80093a4:	460c      	mov	r4, r1
 80093a6:	6831      	ldr	r1, [r6, #0]
 80093a8:	4605      	mov	r5, r0
 80093aa:	b911      	cbnz	r1, 80093b2 <sbrk_aligned+0x12>
 80093ac:	f000 fcd6 	bl	8009d5c <_sbrk_r>
 80093b0:	6030      	str	r0, [r6, #0]
 80093b2:	4621      	mov	r1, r4
 80093b4:	4628      	mov	r0, r5
 80093b6:	f000 fcd1 	bl	8009d5c <_sbrk_r>
 80093ba:	1c43      	adds	r3, r0, #1
 80093bc:	d00a      	beq.n	80093d4 <sbrk_aligned+0x34>
 80093be:	1cc4      	adds	r4, r0, #3
 80093c0:	f024 0403 	bic.w	r4, r4, #3
 80093c4:	42a0      	cmp	r0, r4
 80093c6:	d007      	beq.n	80093d8 <sbrk_aligned+0x38>
 80093c8:	1a21      	subs	r1, r4, r0
 80093ca:	4628      	mov	r0, r5
 80093cc:	f000 fcc6 	bl	8009d5c <_sbrk_r>
 80093d0:	3001      	adds	r0, #1
 80093d2:	d101      	bne.n	80093d8 <sbrk_aligned+0x38>
 80093d4:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 80093d8:	4620      	mov	r0, r4
 80093da:	bd70      	pop	{r4, r5, r6, pc}
 80093dc:	20004b48 	.word	0x20004b48

080093e0 <_malloc_r>:
 80093e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80093e4:	1ccd      	adds	r5, r1, #3
 80093e6:	f025 0503 	bic.w	r5, r5, #3
 80093ea:	3508      	adds	r5, #8
 80093ec:	2d0c      	cmp	r5, #12
 80093ee:	bf38      	it	cc
 80093f0:	250c      	movcc	r5, #12
 80093f2:	2d00      	cmp	r5, #0
 80093f4:	4607      	mov	r7, r0
 80093f6:	db01      	blt.n	80093fc <_malloc_r+0x1c>
 80093f8:	42a9      	cmp	r1, r5
 80093fa:	d905      	bls.n	8009408 <_malloc_r+0x28>
 80093fc:	230c      	movs	r3, #12
 80093fe:	603b      	str	r3, [r7, #0]
 8009400:	2600      	movs	r6, #0
 8009402:	4630      	mov	r0, r6
 8009404:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009408:	4e2e      	ldr	r6, [pc, #184]	; (80094c4 <_malloc_r+0xe4>)
 800940a:	f000 fd6b 	bl	8009ee4 <__malloc_lock>
 800940e:	6833      	ldr	r3, [r6, #0]
 8009410:	461c      	mov	r4, r3
 8009412:	bb34      	cbnz	r4, 8009462 <_malloc_r+0x82>
 8009414:	4629      	mov	r1, r5
 8009416:	4638      	mov	r0, r7
 8009418:	f7ff ffc2 	bl	80093a0 <sbrk_aligned>
 800941c:	1c43      	adds	r3, r0, #1
 800941e:	4604      	mov	r4, r0
 8009420:	d14d      	bne.n	80094be <_malloc_r+0xde>
 8009422:	6834      	ldr	r4, [r6, #0]
 8009424:	4626      	mov	r6, r4
 8009426:	2e00      	cmp	r6, #0
 8009428:	d140      	bne.n	80094ac <_malloc_r+0xcc>
 800942a:	6823      	ldr	r3, [r4, #0]
 800942c:	4631      	mov	r1, r6
 800942e:	4638      	mov	r0, r7
 8009430:	eb04 0803 	add.w	r8, r4, r3
 8009434:	f000 fc92 	bl	8009d5c <_sbrk_r>
 8009438:	4580      	cmp	r8, r0
 800943a:	d13a      	bne.n	80094b2 <_malloc_r+0xd2>
 800943c:	6821      	ldr	r1, [r4, #0]
 800943e:	3503      	adds	r5, #3
 8009440:	1a6d      	subs	r5, r5, r1
 8009442:	f025 0503 	bic.w	r5, r5, #3
 8009446:	3508      	adds	r5, #8
 8009448:	2d0c      	cmp	r5, #12
 800944a:	bf38      	it	cc
 800944c:	250c      	movcc	r5, #12
 800944e:	4629      	mov	r1, r5
 8009450:	4638      	mov	r0, r7
 8009452:	f7ff ffa5 	bl	80093a0 <sbrk_aligned>
 8009456:	3001      	adds	r0, #1
 8009458:	d02b      	beq.n	80094b2 <_malloc_r+0xd2>
 800945a:	6823      	ldr	r3, [r4, #0]
 800945c:	442b      	add	r3, r5
 800945e:	6023      	str	r3, [r4, #0]
 8009460:	e00e      	b.n	8009480 <_malloc_r+0xa0>
 8009462:	6822      	ldr	r2, [r4, #0]
 8009464:	1b52      	subs	r2, r2, r5
 8009466:	d41e      	bmi.n	80094a6 <_malloc_r+0xc6>
 8009468:	2a0b      	cmp	r2, #11
 800946a:	d916      	bls.n	800949a <_malloc_r+0xba>
 800946c:	1961      	adds	r1, r4, r5
 800946e:	42a3      	cmp	r3, r4
 8009470:	6025      	str	r5, [r4, #0]
 8009472:	bf18      	it	ne
 8009474:	6059      	strne	r1, [r3, #4]
 8009476:	6863      	ldr	r3, [r4, #4]
 8009478:	bf08      	it	eq
 800947a:	6031      	streq	r1, [r6, #0]
 800947c:	5162      	str	r2, [r4, r5]
 800947e:	604b      	str	r3, [r1, #4]
 8009480:	4638      	mov	r0, r7
 8009482:	f104 060b 	add.w	r6, r4, #11
 8009486:	f000 fd33 	bl	8009ef0 <__malloc_unlock>
 800948a:	f026 0607 	bic.w	r6, r6, #7
 800948e:	1d23      	adds	r3, r4, #4
 8009490:	1af2      	subs	r2, r6, r3
 8009492:	d0b6      	beq.n	8009402 <_malloc_r+0x22>
 8009494:	1b9b      	subs	r3, r3, r6
 8009496:	50a3      	str	r3, [r4, r2]
 8009498:	e7b3      	b.n	8009402 <_malloc_r+0x22>
 800949a:	6862      	ldr	r2, [r4, #4]
 800949c:	42a3      	cmp	r3, r4
 800949e:	bf0c      	ite	eq
 80094a0:	6032      	streq	r2, [r6, #0]
 80094a2:	605a      	strne	r2, [r3, #4]
 80094a4:	e7ec      	b.n	8009480 <_malloc_r+0xa0>
 80094a6:	4623      	mov	r3, r4
 80094a8:	6864      	ldr	r4, [r4, #4]
 80094aa:	e7b2      	b.n	8009412 <_malloc_r+0x32>
 80094ac:	4634      	mov	r4, r6
 80094ae:	6876      	ldr	r6, [r6, #4]
 80094b0:	e7b9      	b.n	8009426 <_malloc_r+0x46>
 80094b2:	230c      	movs	r3, #12
 80094b4:	603b      	str	r3, [r7, #0]
 80094b6:	4638      	mov	r0, r7
 80094b8:	f000 fd1a 	bl	8009ef0 <__malloc_unlock>
 80094bc:	e7a1      	b.n	8009402 <_malloc_r+0x22>
 80094be:	6025      	str	r5, [r4, #0]
 80094c0:	e7de      	b.n	8009480 <_malloc_r+0xa0>
 80094c2:	bf00      	nop
 80094c4:	20004b44 	.word	0x20004b44

080094c8 <__ssputs_r>:
 80094c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80094cc:	688e      	ldr	r6, [r1, #8]
 80094ce:	429e      	cmp	r6, r3
 80094d0:	4682      	mov	sl, r0
 80094d2:	460c      	mov	r4, r1
 80094d4:	4690      	mov	r8, r2
 80094d6:	461f      	mov	r7, r3
 80094d8:	d838      	bhi.n	800954c <__ssputs_r+0x84>
 80094da:	898a      	ldrh	r2, [r1, #12]
 80094dc:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80094e0:	d032      	beq.n	8009548 <__ssputs_r+0x80>
 80094e2:	6825      	ldr	r5, [r4, #0]
 80094e4:	6909      	ldr	r1, [r1, #16]
 80094e6:	eba5 0901 	sub.w	r9, r5, r1
 80094ea:	6965      	ldr	r5, [r4, #20]
 80094ec:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80094f0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80094f4:	3301      	adds	r3, #1
 80094f6:	444b      	add	r3, r9
 80094f8:	106d      	asrs	r5, r5, #1
 80094fa:	429d      	cmp	r5, r3
 80094fc:	bf38      	it	cc
 80094fe:	461d      	movcc	r5, r3
 8009500:	0553      	lsls	r3, r2, #21
 8009502:	d531      	bpl.n	8009568 <__ssputs_r+0xa0>
 8009504:	4629      	mov	r1, r5
 8009506:	f7ff ff6b 	bl	80093e0 <_malloc_r>
 800950a:	4606      	mov	r6, r0
 800950c:	b950      	cbnz	r0, 8009524 <__ssputs_r+0x5c>
 800950e:	230c      	movs	r3, #12
 8009510:	f8ca 3000 	str.w	r3, [sl]
 8009514:	89a3      	ldrh	r3, [r4, #12]
 8009516:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800951a:	81a3      	strh	r3, [r4, #12]
 800951c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009520:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009524:	6921      	ldr	r1, [r4, #16]
 8009526:	464a      	mov	r2, r9
 8009528:	f7ff fb4a 	bl	8008bc0 <memcpy>
 800952c:	89a3      	ldrh	r3, [r4, #12]
 800952e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8009532:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009536:	81a3      	strh	r3, [r4, #12]
 8009538:	6126      	str	r6, [r4, #16]
 800953a:	6165      	str	r5, [r4, #20]
 800953c:	444e      	add	r6, r9
 800953e:	eba5 0509 	sub.w	r5, r5, r9
 8009542:	6026      	str	r6, [r4, #0]
 8009544:	60a5      	str	r5, [r4, #8]
 8009546:	463e      	mov	r6, r7
 8009548:	42be      	cmp	r6, r7
 800954a:	d900      	bls.n	800954e <__ssputs_r+0x86>
 800954c:	463e      	mov	r6, r7
 800954e:	6820      	ldr	r0, [r4, #0]
 8009550:	4632      	mov	r2, r6
 8009552:	4641      	mov	r1, r8
 8009554:	f000 fcac 	bl	8009eb0 <memmove>
 8009558:	68a3      	ldr	r3, [r4, #8]
 800955a:	1b9b      	subs	r3, r3, r6
 800955c:	60a3      	str	r3, [r4, #8]
 800955e:	6823      	ldr	r3, [r4, #0]
 8009560:	4433      	add	r3, r6
 8009562:	6023      	str	r3, [r4, #0]
 8009564:	2000      	movs	r0, #0
 8009566:	e7db      	b.n	8009520 <__ssputs_r+0x58>
 8009568:	462a      	mov	r2, r5
 800956a:	f000 fcc7 	bl	8009efc <_realloc_r>
 800956e:	4606      	mov	r6, r0
 8009570:	2800      	cmp	r0, #0
 8009572:	d1e1      	bne.n	8009538 <__ssputs_r+0x70>
 8009574:	6921      	ldr	r1, [r4, #16]
 8009576:	4650      	mov	r0, sl
 8009578:	f7ff fec6 	bl	8009308 <_free_r>
 800957c:	e7c7      	b.n	800950e <__ssputs_r+0x46>
	...

08009580 <_svfiprintf_r>:
 8009580:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009584:	4698      	mov	r8, r3
 8009586:	898b      	ldrh	r3, [r1, #12]
 8009588:	061b      	lsls	r3, r3, #24
 800958a:	b09d      	sub	sp, #116	; 0x74
 800958c:	4607      	mov	r7, r0
 800958e:	460d      	mov	r5, r1
 8009590:	4614      	mov	r4, r2
 8009592:	d50e      	bpl.n	80095b2 <_svfiprintf_r+0x32>
 8009594:	690b      	ldr	r3, [r1, #16]
 8009596:	b963      	cbnz	r3, 80095b2 <_svfiprintf_r+0x32>
 8009598:	2140      	movs	r1, #64	; 0x40
 800959a:	f7ff ff21 	bl	80093e0 <_malloc_r>
 800959e:	6028      	str	r0, [r5, #0]
 80095a0:	6128      	str	r0, [r5, #16]
 80095a2:	b920      	cbnz	r0, 80095ae <_svfiprintf_r+0x2e>
 80095a4:	230c      	movs	r3, #12
 80095a6:	603b      	str	r3, [r7, #0]
 80095a8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80095ac:	e0d1      	b.n	8009752 <_svfiprintf_r+0x1d2>
 80095ae:	2340      	movs	r3, #64	; 0x40
 80095b0:	616b      	str	r3, [r5, #20]
 80095b2:	2300      	movs	r3, #0
 80095b4:	9309      	str	r3, [sp, #36]	; 0x24
 80095b6:	2320      	movs	r3, #32
 80095b8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80095bc:	f8cd 800c 	str.w	r8, [sp, #12]
 80095c0:	2330      	movs	r3, #48	; 0x30
 80095c2:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800976c <_svfiprintf_r+0x1ec>
 80095c6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80095ca:	f04f 0901 	mov.w	r9, #1
 80095ce:	4623      	mov	r3, r4
 80095d0:	469a      	mov	sl, r3
 80095d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80095d6:	b10a      	cbz	r2, 80095dc <_svfiprintf_r+0x5c>
 80095d8:	2a25      	cmp	r2, #37	; 0x25
 80095da:	d1f9      	bne.n	80095d0 <_svfiprintf_r+0x50>
 80095dc:	ebba 0b04 	subs.w	fp, sl, r4
 80095e0:	d00b      	beq.n	80095fa <_svfiprintf_r+0x7a>
 80095e2:	465b      	mov	r3, fp
 80095e4:	4622      	mov	r2, r4
 80095e6:	4629      	mov	r1, r5
 80095e8:	4638      	mov	r0, r7
 80095ea:	f7ff ff6d 	bl	80094c8 <__ssputs_r>
 80095ee:	3001      	adds	r0, #1
 80095f0:	f000 80aa 	beq.w	8009748 <_svfiprintf_r+0x1c8>
 80095f4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80095f6:	445a      	add	r2, fp
 80095f8:	9209      	str	r2, [sp, #36]	; 0x24
 80095fa:	f89a 3000 	ldrb.w	r3, [sl]
 80095fe:	2b00      	cmp	r3, #0
 8009600:	f000 80a2 	beq.w	8009748 <_svfiprintf_r+0x1c8>
 8009604:	2300      	movs	r3, #0
 8009606:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800960a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800960e:	f10a 0a01 	add.w	sl, sl, #1
 8009612:	9304      	str	r3, [sp, #16]
 8009614:	9307      	str	r3, [sp, #28]
 8009616:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800961a:	931a      	str	r3, [sp, #104]	; 0x68
 800961c:	4654      	mov	r4, sl
 800961e:	2205      	movs	r2, #5
 8009620:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009624:	4851      	ldr	r0, [pc, #324]	; (800976c <_svfiprintf_r+0x1ec>)
 8009626:	f7f6 fde3 	bl	80001f0 <memchr>
 800962a:	9a04      	ldr	r2, [sp, #16]
 800962c:	b9d8      	cbnz	r0, 8009666 <_svfiprintf_r+0xe6>
 800962e:	06d0      	lsls	r0, r2, #27
 8009630:	bf44      	itt	mi
 8009632:	2320      	movmi	r3, #32
 8009634:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009638:	0711      	lsls	r1, r2, #28
 800963a:	bf44      	itt	mi
 800963c:	232b      	movmi	r3, #43	; 0x2b
 800963e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009642:	f89a 3000 	ldrb.w	r3, [sl]
 8009646:	2b2a      	cmp	r3, #42	; 0x2a
 8009648:	d015      	beq.n	8009676 <_svfiprintf_r+0xf6>
 800964a:	9a07      	ldr	r2, [sp, #28]
 800964c:	4654      	mov	r4, sl
 800964e:	2000      	movs	r0, #0
 8009650:	f04f 0c0a 	mov.w	ip, #10
 8009654:	4621      	mov	r1, r4
 8009656:	f811 3b01 	ldrb.w	r3, [r1], #1
 800965a:	3b30      	subs	r3, #48	; 0x30
 800965c:	2b09      	cmp	r3, #9
 800965e:	d94e      	bls.n	80096fe <_svfiprintf_r+0x17e>
 8009660:	b1b0      	cbz	r0, 8009690 <_svfiprintf_r+0x110>
 8009662:	9207      	str	r2, [sp, #28]
 8009664:	e014      	b.n	8009690 <_svfiprintf_r+0x110>
 8009666:	eba0 0308 	sub.w	r3, r0, r8
 800966a:	fa09 f303 	lsl.w	r3, r9, r3
 800966e:	4313      	orrs	r3, r2
 8009670:	9304      	str	r3, [sp, #16]
 8009672:	46a2      	mov	sl, r4
 8009674:	e7d2      	b.n	800961c <_svfiprintf_r+0x9c>
 8009676:	9b03      	ldr	r3, [sp, #12]
 8009678:	1d19      	adds	r1, r3, #4
 800967a:	681b      	ldr	r3, [r3, #0]
 800967c:	9103      	str	r1, [sp, #12]
 800967e:	2b00      	cmp	r3, #0
 8009680:	bfbb      	ittet	lt
 8009682:	425b      	neglt	r3, r3
 8009684:	f042 0202 	orrlt.w	r2, r2, #2
 8009688:	9307      	strge	r3, [sp, #28]
 800968a:	9307      	strlt	r3, [sp, #28]
 800968c:	bfb8      	it	lt
 800968e:	9204      	strlt	r2, [sp, #16]
 8009690:	7823      	ldrb	r3, [r4, #0]
 8009692:	2b2e      	cmp	r3, #46	; 0x2e
 8009694:	d10c      	bne.n	80096b0 <_svfiprintf_r+0x130>
 8009696:	7863      	ldrb	r3, [r4, #1]
 8009698:	2b2a      	cmp	r3, #42	; 0x2a
 800969a:	d135      	bne.n	8009708 <_svfiprintf_r+0x188>
 800969c:	9b03      	ldr	r3, [sp, #12]
 800969e:	1d1a      	adds	r2, r3, #4
 80096a0:	681b      	ldr	r3, [r3, #0]
 80096a2:	9203      	str	r2, [sp, #12]
 80096a4:	2b00      	cmp	r3, #0
 80096a6:	bfb8      	it	lt
 80096a8:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 80096ac:	3402      	adds	r4, #2
 80096ae:	9305      	str	r3, [sp, #20]
 80096b0:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800977c <_svfiprintf_r+0x1fc>
 80096b4:	7821      	ldrb	r1, [r4, #0]
 80096b6:	2203      	movs	r2, #3
 80096b8:	4650      	mov	r0, sl
 80096ba:	f7f6 fd99 	bl	80001f0 <memchr>
 80096be:	b140      	cbz	r0, 80096d2 <_svfiprintf_r+0x152>
 80096c0:	2340      	movs	r3, #64	; 0x40
 80096c2:	eba0 000a 	sub.w	r0, r0, sl
 80096c6:	fa03 f000 	lsl.w	r0, r3, r0
 80096ca:	9b04      	ldr	r3, [sp, #16]
 80096cc:	4303      	orrs	r3, r0
 80096ce:	3401      	adds	r4, #1
 80096d0:	9304      	str	r3, [sp, #16]
 80096d2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80096d6:	4826      	ldr	r0, [pc, #152]	; (8009770 <_svfiprintf_r+0x1f0>)
 80096d8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80096dc:	2206      	movs	r2, #6
 80096de:	f7f6 fd87 	bl	80001f0 <memchr>
 80096e2:	2800      	cmp	r0, #0
 80096e4:	d038      	beq.n	8009758 <_svfiprintf_r+0x1d8>
 80096e6:	4b23      	ldr	r3, [pc, #140]	; (8009774 <_svfiprintf_r+0x1f4>)
 80096e8:	bb1b      	cbnz	r3, 8009732 <_svfiprintf_r+0x1b2>
 80096ea:	9b03      	ldr	r3, [sp, #12]
 80096ec:	3307      	adds	r3, #7
 80096ee:	f023 0307 	bic.w	r3, r3, #7
 80096f2:	3308      	adds	r3, #8
 80096f4:	9303      	str	r3, [sp, #12]
 80096f6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80096f8:	4433      	add	r3, r6
 80096fa:	9309      	str	r3, [sp, #36]	; 0x24
 80096fc:	e767      	b.n	80095ce <_svfiprintf_r+0x4e>
 80096fe:	fb0c 3202 	mla	r2, ip, r2, r3
 8009702:	460c      	mov	r4, r1
 8009704:	2001      	movs	r0, #1
 8009706:	e7a5      	b.n	8009654 <_svfiprintf_r+0xd4>
 8009708:	2300      	movs	r3, #0
 800970a:	3401      	adds	r4, #1
 800970c:	9305      	str	r3, [sp, #20]
 800970e:	4619      	mov	r1, r3
 8009710:	f04f 0c0a 	mov.w	ip, #10
 8009714:	4620      	mov	r0, r4
 8009716:	f810 2b01 	ldrb.w	r2, [r0], #1
 800971a:	3a30      	subs	r2, #48	; 0x30
 800971c:	2a09      	cmp	r2, #9
 800971e:	d903      	bls.n	8009728 <_svfiprintf_r+0x1a8>
 8009720:	2b00      	cmp	r3, #0
 8009722:	d0c5      	beq.n	80096b0 <_svfiprintf_r+0x130>
 8009724:	9105      	str	r1, [sp, #20]
 8009726:	e7c3      	b.n	80096b0 <_svfiprintf_r+0x130>
 8009728:	fb0c 2101 	mla	r1, ip, r1, r2
 800972c:	4604      	mov	r4, r0
 800972e:	2301      	movs	r3, #1
 8009730:	e7f0      	b.n	8009714 <_svfiprintf_r+0x194>
 8009732:	ab03      	add	r3, sp, #12
 8009734:	9300      	str	r3, [sp, #0]
 8009736:	462a      	mov	r2, r5
 8009738:	4b0f      	ldr	r3, [pc, #60]	; (8009778 <_svfiprintf_r+0x1f8>)
 800973a:	a904      	add	r1, sp, #16
 800973c:	4638      	mov	r0, r7
 800973e:	f3af 8000 	nop.w
 8009742:	1c42      	adds	r2, r0, #1
 8009744:	4606      	mov	r6, r0
 8009746:	d1d6      	bne.n	80096f6 <_svfiprintf_r+0x176>
 8009748:	89ab      	ldrh	r3, [r5, #12]
 800974a:	065b      	lsls	r3, r3, #25
 800974c:	f53f af2c 	bmi.w	80095a8 <_svfiprintf_r+0x28>
 8009750:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009752:	b01d      	add	sp, #116	; 0x74
 8009754:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009758:	ab03      	add	r3, sp, #12
 800975a:	9300      	str	r3, [sp, #0]
 800975c:	462a      	mov	r2, r5
 800975e:	4b06      	ldr	r3, [pc, #24]	; (8009778 <_svfiprintf_r+0x1f8>)
 8009760:	a904      	add	r1, sp, #16
 8009762:	4638      	mov	r0, r7
 8009764:	f000 f9d4 	bl	8009b10 <_printf_i>
 8009768:	e7eb      	b.n	8009742 <_svfiprintf_r+0x1c2>
 800976a:	bf00      	nop
 800976c:	0800a77c 	.word	0x0800a77c
 8009770:	0800a786 	.word	0x0800a786
 8009774:	00000000 	.word	0x00000000
 8009778:	080094c9 	.word	0x080094c9
 800977c:	0800a782 	.word	0x0800a782

08009780 <__sfputc_r>:
 8009780:	6893      	ldr	r3, [r2, #8]
 8009782:	3b01      	subs	r3, #1
 8009784:	2b00      	cmp	r3, #0
 8009786:	b410      	push	{r4}
 8009788:	6093      	str	r3, [r2, #8]
 800978a:	da08      	bge.n	800979e <__sfputc_r+0x1e>
 800978c:	6994      	ldr	r4, [r2, #24]
 800978e:	42a3      	cmp	r3, r4
 8009790:	db01      	blt.n	8009796 <__sfputc_r+0x16>
 8009792:	290a      	cmp	r1, #10
 8009794:	d103      	bne.n	800979e <__sfputc_r+0x1e>
 8009796:	f85d 4b04 	ldr.w	r4, [sp], #4
 800979a:	f7ff bad5 	b.w	8008d48 <__swbuf_r>
 800979e:	6813      	ldr	r3, [r2, #0]
 80097a0:	1c58      	adds	r0, r3, #1
 80097a2:	6010      	str	r0, [r2, #0]
 80097a4:	7019      	strb	r1, [r3, #0]
 80097a6:	4608      	mov	r0, r1
 80097a8:	f85d 4b04 	ldr.w	r4, [sp], #4
 80097ac:	4770      	bx	lr

080097ae <__sfputs_r>:
 80097ae:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80097b0:	4606      	mov	r6, r0
 80097b2:	460f      	mov	r7, r1
 80097b4:	4614      	mov	r4, r2
 80097b6:	18d5      	adds	r5, r2, r3
 80097b8:	42ac      	cmp	r4, r5
 80097ba:	d101      	bne.n	80097c0 <__sfputs_r+0x12>
 80097bc:	2000      	movs	r0, #0
 80097be:	e007      	b.n	80097d0 <__sfputs_r+0x22>
 80097c0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80097c4:	463a      	mov	r2, r7
 80097c6:	4630      	mov	r0, r6
 80097c8:	f7ff ffda 	bl	8009780 <__sfputc_r>
 80097cc:	1c43      	adds	r3, r0, #1
 80097ce:	d1f3      	bne.n	80097b8 <__sfputs_r+0xa>
 80097d0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080097d4 <_vfiprintf_r>:
 80097d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80097d8:	460d      	mov	r5, r1
 80097da:	b09d      	sub	sp, #116	; 0x74
 80097dc:	4614      	mov	r4, r2
 80097de:	4698      	mov	r8, r3
 80097e0:	4606      	mov	r6, r0
 80097e2:	b118      	cbz	r0, 80097ec <_vfiprintf_r+0x18>
 80097e4:	6983      	ldr	r3, [r0, #24]
 80097e6:	b90b      	cbnz	r3, 80097ec <_vfiprintf_r+0x18>
 80097e8:	f7ff fc88 	bl	80090fc <__sinit>
 80097ec:	4b89      	ldr	r3, [pc, #548]	; (8009a14 <_vfiprintf_r+0x240>)
 80097ee:	429d      	cmp	r5, r3
 80097f0:	d11b      	bne.n	800982a <_vfiprintf_r+0x56>
 80097f2:	6875      	ldr	r5, [r6, #4]
 80097f4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80097f6:	07d9      	lsls	r1, r3, #31
 80097f8:	d405      	bmi.n	8009806 <_vfiprintf_r+0x32>
 80097fa:	89ab      	ldrh	r3, [r5, #12]
 80097fc:	059a      	lsls	r2, r3, #22
 80097fe:	d402      	bmi.n	8009806 <_vfiprintf_r+0x32>
 8009800:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009802:	f7ff fd19 	bl	8009238 <__retarget_lock_acquire_recursive>
 8009806:	89ab      	ldrh	r3, [r5, #12]
 8009808:	071b      	lsls	r3, r3, #28
 800980a:	d501      	bpl.n	8009810 <_vfiprintf_r+0x3c>
 800980c:	692b      	ldr	r3, [r5, #16]
 800980e:	b9eb      	cbnz	r3, 800984c <_vfiprintf_r+0x78>
 8009810:	4629      	mov	r1, r5
 8009812:	4630      	mov	r0, r6
 8009814:	f7ff faea 	bl	8008dec <__swsetup_r>
 8009818:	b1c0      	cbz	r0, 800984c <_vfiprintf_r+0x78>
 800981a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800981c:	07dc      	lsls	r4, r3, #31
 800981e:	d50e      	bpl.n	800983e <_vfiprintf_r+0x6a>
 8009820:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009824:	b01d      	add	sp, #116	; 0x74
 8009826:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800982a:	4b7b      	ldr	r3, [pc, #492]	; (8009a18 <_vfiprintf_r+0x244>)
 800982c:	429d      	cmp	r5, r3
 800982e:	d101      	bne.n	8009834 <_vfiprintf_r+0x60>
 8009830:	68b5      	ldr	r5, [r6, #8]
 8009832:	e7df      	b.n	80097f4 <_vfiprintf_r+0x20>
 8009834:	4b79      	ldr	r3, [pc, #484]	; (8009a1c <_vfiprintf_r+0x248>)
 8009836:	429d      	cmp	r5, r3
 8009838:	bf08      	it	eq
 800983a:	68f5      	ldreq	r5, [r6, #12]
 800983c:	e7da      	b.n	80097f4 <_vfiprintf_r+0x20>
 800983e:	89ab      	ldrh	r3, [r5, #12]
 8009840:	0598      	lsls	r0, r3, #22
 8009842:	d4ed      	bmi.n	8009820 <_vfiprintf_r+0x4c>
 8009844:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009846:	f7ff fcf8 	bl	800923a <__retarget_lock_release_recursive>
 800984a:	e7e9      	b.n	8009820 <_vfiprintf_r+0x4c>
 800984c:	2300      	movs	r3, #0
 800984e:	9309      	str	r3, [sp, #36]	; 0x24
 8009850:	2320      	movs	r3, #32
 8009852:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009856:	f8cd 800c 	str.w	r8, [sp, #12]
 800985a:	2330      	movs	r3, #48	; 0x30
 800985c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8009a20 <_vfiprintf_r+0x24c>
 8009860:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009864:	f04f 0901 	mov.w	r9, #1
 8009868:	4623      	mov	r3, r4
 800986a:	469a      	mov	sl, r3
 800986c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009870:	b10a      	cbz	r2, 8009876 <_vfiprintf_r+0xa2>
 8009872:	2a25      	cmp	r2, #37	; 0x25
 8009874:	d1f9      	bne.n	800986a <_vfiprintf_r+0x96>
 8009876:	ebba 0b04 	subs.w	fp, sl, r4
 800987a:	d00b      	beq.n	8009894 <_vfiprintf_r+0xc0>
 800987c:	465b      	mov	r3, fp
 800987e:	4622      	mov	r2, r4
 8009880:	4629      	mov	r1, r5
 8009882:	4630      	mov	r0, r6
 8009884:	f7ff ff93 	bl	80097ae <__sfputs_r>
 8009888:	3001      	adds	r0, #1
 800988a:	f000 80aa 	beq.w	80099e2 <_vfiprintf_r+0x20e>
 800988e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009890:	445a      	add	r2, fp
 8009892:	9209      	str	r2, [sp, #36]	; 0x24
 8009894:	f89a 3000 	ldrb.w	r3, [sl]
 8009898:	2b00      	cmp	r3, #0
 800989a:	f000 80a2 	beq.w	80099e2 <_vfiprintf_r+0x20e>
 800989e:	2300      	movs	r3, #0
 80098a0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80098a4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80098a8:	f10a 0a01 	add.w	sl, sl, #1
 80098ac:	9304      	str	r3, [sp, #16]
 80098ae:	9307      	str	r3, [sp, #28]
 80098b0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80098b4:	931a      	str	r3, [sp, #104]	; 0x68
 80098b6:	4654      	mov	r4, sl
 80098b8:	2205      	movs	r2, #5
 80098ba:	f814 1b01 	ldrb.w	r1, [r4], #1
 80098be:	4858      	ldr	r0, [pc, #352]	; (8009a20 <_vfiprintf_r+0x24c>)
 80098c0:	f7f6 fc96 	bl	80001f0 <memchr>
 80098c4:	9a04      	ldr	r2, [sp, #16]
 80098c6:	b9d8      	cbnz	r0, 8009900 <_vfiprintf_r+0x12c>
 80098c8:	06d1      	lsls	r1, r2, #27
 80098ca:	bf44      	itt	mi
 80098cc:	2320      	movmi	r3, #32
 80098ce:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80098d2:	0713      	lsls	r3, r2, #28
 80098d4:	bf44      	itt	mi
 80098d6:	232b      	movmi	r3, #43	; 0x2b
 80098d8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80098dc:	f89a 3000 	ldrb.w	r3, [sl]
 80098e0:	2b2a      	cmp	r3, #42	; 0x2a
 80098e2:	d015      	beq.n	8009910 <_vfiprintf_r+0x13c>
 80098e4:	9a07      	ldr	r2, [sp, #28]
 80098e6:	4654      	mov	r4, sl
 80098e8:	2000      	movs	r0, #0
 80098ea:	f04f 0c0a 	mov.w	ip, #10
 80098ee:	4621      	mov	r1, r4
 80098f0:	f811 3b01 	ldrb.w	r3, [r1], #1
 80098f4:	3b30      	subs	r3, #48	; 0x30
 80098f6:	2b09      	cmp	r3, #9
 80098f8:	d94e      	bls.n	8009998 <_vfiprintf_r+0x1c4>
 80098fa:	b1b0      	cbz	r0, 800992a <_vfiprintf_r+0x156>
 80098fc:	9207      	str	r2, [sp, #28]
 80098fe:	e014      	b.n	800992a <_vfiprintf_r+0x156>
 8009900:	eba0 0308 	sub.w	r3, r0, r8
 8009904:	fa09 f303 	lsl.w	r3, r9, r3
 8009908:	4313      	orrs	r3, r2
 800990a:	9304      	str	r3, [sp, #16]
 800990c:	46a2      	mov	sl, r4
 800990e:	e7d2      	b.n	80098b6 <_vfiprintf_r+0xe2>
 8009910:	9b03      	ldr	r3, [sp, #12]
 8009912:	1d19      	adds	r1, r3, #4
 8009914:	681b      	ldr	r3, [r3, #0]
 8009916:	9103      	str	r1, [sp, #12]
 8009918:	2b00      	cmp	r3, #0
 800991a:	bfbb      	ittet	lt
 800991c:	425b      	neglt	r3, r3
 800991e:	f042 0202 	orrlt.w	r2, r2, #2
 8009922:	9307      	strge	r3, [sp, #28]
 8009924:	9307      	strlt	r3, [sp, #28]
 8009926:	bfb8      	it	lt
 8009928:	9204      	strlt	r2, [sp, #16]
 800992a:	7823      	ldrb	r3, [r4, #0]
 800992c:	2b2e      	cmp	r3, #46	; 0x2e
 800992e:	d10c      	bne.n	800994a <_vfiprintf_r+0x176>
 8009930:	7863      	ldrb	r3, [r4, #1]
 8009932:	2b2a      	cmp	r3, #42	; 0x2a
 8009934:	d135      	bne.n	80099a2 <_vfiprintf_r+0x1ce>
 8009936:	9b03      	ldr	r3, [sp, #12]
 8009938:	1d1a      	adds	r2, r3, #4
 800993a:	681b      	ldr	r3, [r3, #0]
 800993c:	9203      	str	r2, [sp, #12]
 800993e:	2b00      	cmp	r3, #0
 8009940:	bfb8      	it	lt
 8009942:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8009946:	3402      	adds	r4, #2
 8009948:	9305      	str	r3, [sp, #20]
 800994a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8009a30 <_vfiprintf_r+0x25c>
 800994e:	7821      	ldrb	r1, [r4, #0]
 8009950:	2203      	movs	r2, #3
 8009952:	4650      	mov	r0, sl
 8009954:	f7f6 fc4c 	bl	80001f0 <memchr>
 8009958:	b140      	cbz	r0, 800996c <_vfiprintf_r+0x198>
 800995a:	2340      	movs	r3, #64	; 0x40
 800995c:	eba0 000a 	sub.w	r0, r0, sl
 8009960:	fa03 f000 	lsl.w	r0, r3, r0
 8009964:	9b04      	ldr	r3, [sp, #16]
 8009966:	4303      	orrs	r3, r0
 8009968:	3401      	adds	r4, #1
 800996a:	9304      	str	r3, [sp, #16]
 800996c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009970:	482c      	ldr	r0, [pc, #176]	; (8009a24 <_vfiprintf_r+0x250>)
 8009972:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009976:	2206      	movs	r2, #6
 8009978:	f7f6 fc3a 	bl	80001f0 <memchr>
 800997c:	2800      	cmp	r0, #0
 800997e:	d03f      	beq.n	8009a00 <_vfiprintf_r+0x22c>
 8009980:	4b29      	ldr	r3, [pc, #164]	; (8009a28 <_vfiprintf_r+0x254>)
 8009982:	bb1b      	cbnz	r3, 80099cc <_vfiprintf_r+0x1f8>
 8009984:	9b03      	ldr	r3, [sp, #12]
 8009986:	3307      	adds	r3, #7
 8009988:	f023 0307 	bic.w	r3, r3, #7
 800998c:	3308      	adds	r3, #8
 800998e:	9303      	str	r3, [sp, #12]
 8009990:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009992:	443b      	add	r3, r7
 8009994:	9309      	str	r3, [sp, #36]	; 0x24
 8009996:	e767      	b.n	8009868 <_vfiprintf_r+0x94>
 8009998:	fb0c 3202 	mla	r2, ip, r2, r3
 800999c:	460c      	mov	r4, r1
 800999e:	2001      	movs	r0, #1
 80099a0:	e7a5      	b.n	80098ee <_vfiprintf_r+0x11a>
 80099a2:	2300      	movs	r3, #0
 80099a4:	3401      	adds	r4, #1
 80099a6:	9305      	str	r3, [sp, #20]
 80099a8:	4619      	mov	r1, r3
 80099aa:	f04f 0c0a 	mov.w	ip, #10
 80099ae:	4620      	mov	r0, r4
 80099b0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80099b4:	3a30      	subs	r2, #48	; 0x30
 80099b6:	2a09      	cmp	r2, #9
 80099b8:	d903      	bls.n	80099c2 <_vfiprintf_r+0x1ee>
 80099ba:	2b00      	cmp	r3, #0
 80099bc:	d0c5      	beq.n	800994a <_vfiprintf_r+0x176>
 80099be:	9105      	str	r1, [sp, #20]
 80099c0:	e7c3      	b.n	800994a <_vfiprintf_r+0x176>
 80099c2:	fb0c 2101 	mla	r1, ip, r1, r2
 80099c6:	4604      	mov	r4, r0
 80099c8:	2301      	movs	r3, #1
 80099ca:	e7f0      	b.n	80099ae <_vfiprintf_r+0x1da>
 80099cc:	ab03      	add	r3, sp, #12
 80099ce:	9300      	str	r3, [sp, #0]
 80099d0:	462a      	mov	r2, r5
 80099d2:	4b16      	ldr	r3, [pc, #88]	; (8009a2c <_vfiprintf_r+0x258>)
 80099d4:	a904      	add	r1, sp, #16
 80099d6:	4630      	mov	r0, r6
 80099d8:	f3af 8000 	nop.w
 80099dc:	4607      	mov	r7, r0
 80099de:	1c78      	adds	r0, r7, #1
 80099e0:	d1d6      	bne.n	8009990 <_vfiprintf_r+0x1bc>
 80099e2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80099e4:	07d9      	lsls	r1, r3, #31
 80099e6:	d405      	bmi.n	80099f4 <_vfiprintf_r+0x220>
 80099e8:	89ab      	ldrh	r3, [r5, #12]
 80099ea:	059a      	lsls	r2, r3, #22
 80099ec:	d402      	bmi.n	80099f4 <_vfiprintf_r+0x220>
 80099ee:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80099f0:	f7ff fc23 	bl	800923a <__retarget_lock_release_recursive>
 80099f4:	89ab      	ldrh	r3, [r5, #12]
 80099f6:	065b      	lsls	r3, r3, #25
 80099f8:	f53f af12 	bmi.w	8009820 <_vfiprintf_r+0x4c>
 80099fc:	9809      	ldr	r0, [sp, #36]	; 0x24
 80099fe:	e711      	b.n	8009824 <_vfiprintf_r+0x50>
 8009a00:	ab03      	add	r3, sp, #12
 8009a02:	9300      	str	r3, [sp, #0]
 8009a04:	462a      	mov	r2, r5
 8009a06:	4b09      	ldr	r3, [pc, #36]	; (8009a2c <_vfiprintf_r+0x258>)
 8009a08:	a904      	add	r1, sp, #16
 8009a0a:	4630      	mov	r0, r6
 8009a0c:	f000 f880 	bl	8009b10 <_printf_i>
 8009a10:	e7e4      	b.n	80099dc <_vfiprintf_r+0x208>
 8009a12:	bf00      	nop
 8009a14:	0800a73c 	.word	0x0800a73c
 8009a18:	0800a75c 	.word	0x0800a75c
 8009a1c:	0800a71c 	.word	0x0800a71c
 8009a20:	0800a77c 	.word	0x0800a77c
 8009a24:	0800a786 	.word	0x0800a786
 8009a28:	00000000 	.word	0x00000000
 8009a2c:	080097af 	.word	0x080097af
 8009a30:	0800a782 	.word	0x0800a782

08009a34 <_printf_common>:
 8009a34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009a38:	4616      	mov	r6, r2
 8009a3a:	4699      	mov	r9, r3
 8009a3c:	688a      	ldr	r2, [r1, #8]
 8009a3e:	690b      	ldr	r3, [r1, #16]
 8009a40:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8009a44:	4293      	cmp	r3, r2
 8009a46:	bfb8      	it	lt
 8009a48:	4613      	movlt	r3, r2
 8009a4a:	6033      	str	r3, [r6, #0]
 8009a4c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8009a50:	4607      	mov	r7, r0
 8009a52:	460c      	mov	r4, r1
 8009a54:	b10a      	cbz	r2, 8009a5a <_printf_common+0x26>
 8009a56:	3301      	adds	r3, #1
 8009a58:	6033      	str	r3, [r6, #0]
 8009a5a:	6823      	ldr	r3, [r4, #0]
 8009a5c:	0699      	lsls	r1, r3, #26
 8009a5e:	bf42      	ittt	mi
 8009a60:	6833      	ldrmi	r3, [r6, #0]
 8009a62:	3302      	addmi	r3, #2
 8009a64:	6033      	strmi	r3, [r6, #0]
 8009a66:	6825      	ldr	r5, [r4, #0]
 8009a68:	f015 0506 	ands.w	r5, r5, #6
 8009a6c:	d106      	bne.n	8009a7c <_printf_common+0x48>
 8009a6e:	f104 0a19 	add.w	sl, r4, #25
 8009a72:	68e3      	ldr	r3, [r4, #12]
 8009a74:	6832      	ldr	r2, [r6, #0]
 8009a76:	1a9b      	subs	r3, r3, r2
 8009a78:	42ab      	cmp	r3, r5
 8009a7a:	dc26      	bgt.n	8009aca <_printf_common+0x96>
 8009a7c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8009a80:	1e13      	subs	r3, r2, #0
 8009a82:	6822      	ldr	r2, [r4, #0]
 8009a84:	bf18      	it	ne
 8009a86:	2301      	movne	r3, #1
 8009a88:	0692      	lsls	r2, r2, #26
 8009a8a:	d42b      	bmi.n	8009ae4 <_printf_common+0xb0>
 8009a8c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009a90:	4649      	mov	r1, r9
 8009a92:	4638      	mov	r0, r7
 8009a94:	47c0      	blx	r8
 8009a96:	3001      	adds	r0, #1
 8009a98:	d01e      	beq.n	8009ad8 <_printf_common+0xa4>
 8009a9a:	6823      	ldr	r3, [r4, #0]
 8009a9c:	68e5      	ldr	r5, [r4, #12]
 8009a9e:	6832      	ldr	r2, [r6, #0]
 8009aa0:	f003 0306 	and.w	r3, r3, #6
 8009aa4:	2b04      	cmp	r3, #4
 8009aa6:	bf08      	it	eq
 8009aa8:	1aad      	subeq	r5, r5, r2
 8009aaa:	68a3      	ldr	r3, [r4, #8]
 8009aac:	6922      	ldr	r2, [r4, #16]
 8009aae:	bf0c      	ite	eq
 8009ab0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009ab4:	2500      	movne	r5, #0
 8009ab6:	4293      	cmp	r3, r2
 8009ab8:	bfc4      	itt	gt
 8009aba:	1a9b      	subgt	r3, r3, r2
 8009abc:	18ed      	addgt	r5, r5, r3
 8009abe:	2600      	movs	r6, #0
 8009ac0:	341a      	adds	r4, #26
 8009ac2:	42b5      	cmp	r5, r6
 8009ac4:	d11a      	bne.n	8009afc <_printf_common+0xc8>
 8009ac6:	2000      	movs	r0, #0
 8009ac8:	e008      	b.n	8009adc <_printf_common+0xa8>
 8009aca:	2301      	movs	r3, #1
 8009acc:	4652      	mov	r2, sl
 8009ace:	4649      	mov	r1, r9
 8009ad0:	4638      	mov	r0, r7
 8009ad2:	47c0      	blx	r8
 8009ad4:	3001      	adds	r0, #1
 8009ad6:	d103      	bne.n	8009ae0 <_printf_common+0xac>
 8009ad8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009adc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009ae0:	3501      	adds	r5, #1
 8009ae2:	e7c6      	b.n	8009a72 <_printf_common+0x3e>
 8009ae4:	18e1      	adds	r1, r4, r3
 8009ae6:	1c5a      	adds	r2, r3, #1
 8009ae8:	2030      	movs	r0, #48	; 0x30
 8009aea:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8009aee:	4422      	add	r2, r4
 8009af0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8009af4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8009af8:	3302      	adds	r3, #2
 8009afa:	e7c7      	b.n	8009a8c <_printf_common+0x58>
 8009afc:	2301      	movs	r3, #1
 8009afe:	4622      	mov	r2, r4
 8009b00:	4649      	mov	r1, r9
 8009b02:	4638      	mov	r0, r7
 8009b04:	47c0      	blx	r8
 8009b06:	3001      	adds	r0, #1
 8009b08:	d0e6      	beq.n	8009ad8 <_printf_common+0xa4>
 8009b0a:	3601      	adds	r6, #1
 8009b0c:	e7d9      	b.n	8009ac2 <_printf_common+0x8e>
	...

08009b10 <_printf_i>:
 8009b10:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009b14:	7e0f      	ldrb	r7, [r1, #24]
 8009b16:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8009b18:	2f78      	cmp	r7, #120	; 0x78
 8009b1a:	4691      	mov	r9, r2
 8009b1c:	4680      	mov	r8, r0
 8009b1e:	460c      	mov	r4, r1
 8009b20:	469a      	mov	sl, r3
 8009b22:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8009b26:	d807      	bhi.n	8009b38 <_printf_i+0x28>
 8009b28:	2f62      	cmp	r7, #98	; 0x62
 8009b2a:	d80a      	bhi.n	8009b42 <_printf_i+0x32>
 8009b2c:	2f00      	cmp	r7, #0
 8009b2e:	f000 80d8 	beq.w	8009ce2 <_printf_i+0x1d2>
 8009b32:	2f58      	cmp	r7, #88	; 0x58
 8009b34:	f000 80a3 	beq.w	8009c7e <_printf_i+0x16e>
 8009b38:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009b3c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8009b40:	e03a      	b.n	8009bb8 <_printf_i+0xa8>
 8009b42:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8009b46:	2b15      	cmp	r3, #21
 8009b48:	d8f6      	bhi.n	8009b38 <_printf_i+0x28>
 8009b4a:	a101      	add	r1, pc, #4	; (adr r1, 8009b50 <_printf_i+0x40>)
 8009b4c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8009b50:	08009ba9 	.word	0x08009ba9
 8009b54:	08009bbd 	.word	0x08009bbd
 8009b58:	08009b39 	.word	0x08009b39
 8009b5c:	08009b39 	.word	0x08009b39
 8009b60:	08009b39 	.word	0x08009b39
 8009b64:	08009b39 	.word	0x08009b39
 8009b68:	08009bbd 	.word	0x08009bbd
 8009b6c:	08009b39 	.word	0x08009b39
 8009b70:	08009b39 	.word	0x08009b39
 8009b74:	08009b39 	.word	0x08009b39
 8009b78:	08009b39 	.word	0x08009b39
 8009b7c:	08009cc9 	.word	0x08009cc9
 8009b80:	08009bed 	.word	0x08009bed
 8009b84:	08009cab 	.word	0x08009cab
 8009b88:	08009b39 	.word	0x08009b39
 8009b8c:	08009b39 	.word	0x08009b39
 8009b90:	08009ceb 	.word	0x08009ceb
 8009b94:	08009b39 	.word	0x08009b39
 8009b98:	08009bed 	.word	0x08009bed
 8009b9c:	08009b39 	.word	0x08009b39
 8009ba0:	08009b39 	.word	0x08009b39
 8009ba4:	08009cb3 	.word	0x08009cb3
 8009ba8:	682b      	ldr	r3, [r5, #0]
 8009baa:	1d1a      	adds	r2, r3, #4
 8009bac:	681b      	ldr	r3, [r3, #0]
 8009bae:	602a      	str	r2, [r5, #0]
 8009bb0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009bb4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009bb8:	2301      	movs	r3, #1
 8009bba:	e0a3      	b.n	8009d04 <_printf_i+0x1f4>
 8009bbc:	6820      	ldr	r0, [r4, #0]
 8009bbe:	6829      	ldr	r1, [r5, #0]
 8009bc0:	0606      	lsls	r6, r0, #24
 8009bc2:	f101 0304 	add.w	r3, r1, #4
 8009bc6:	d50a      	bpl.n	8009bde <_printf_i+0xce>
 8009bc8:	680e      	ldr	r6, [r1, #0]
 8009bca:	602b      	str	r3, [r5, #0]
 8009bcc:	2e00      	cmp	r6, #0
 8009bce:	da03      	bge.n	8009bd8 <_printf_i+0xc8>
 8009bd0:	232d      	movs	r3, #45	; 0x2d
 8009bd2:	4276      	negs	r6, r6
 8009bd4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009bd8:	485e      	ldr	r0, [pc, #376]	; (8009d54 <_printf_i+0x244>)
 8009bda:	230a      	movs	r3, #10
 8009bdc:	e019      	b.n	8009c12 <_printf_i+0x102>
 8009bde:	680e      	ldr	r6, [r1, #0]
 8009be0:	602b      	str	r3, [r5, #0]
 8009be2:	f010 0f40 	tst.w	r0, #64	; 0x40
 8009be6:	bf18      	it	ne
 8009be8:	b236      	sxthne	r6, r6
 8009bea:	e7ef      	b.n	8009bcc <_printf_i+0xbc>
 8009bec:	682b      	ldr	r3, [r5, #0]
 8009bee:	6820      	ldr	r0, [r4, #0]
 8009bf0:	1d19      	adds	r1, r3, #4
 8009bf2:	6029      	str	r1, [r5, #0]
 8009bf4:	0601      	lsls	r1, r0, #24
 8009bf6:	d501      	bpl.n	8009bfc <_printf_i+0xec>
 8009bf8:	681e      	ldr	r6, [r3, #0]
 8009bfa:	e002      	b.n	8009c02 <_printf_i+0xf2>
 8009bfc:	0646      	lsls	r6, r0, #25
 8009bfe:	d5fb      	bpl.n	8009bf8 <_printf_i+0xe8>
 8009c00:	881e      	ldrh	r6, [r3, #0]
 8009c02:	4854      	ldr	r0, [pc, #336]	; (8009d54 <_printf_i+0x244>)
 8009c04:	2f6f      	cmp	r7, #111	; 0x6f
 8009c06:	bf0c      	ite	eq
 8009c08:	2308      	moveq	r3, #8
 8009c0a:	230a      	movne	r3, #10
 8009c0c:	2100      	movs	r1, #0
 8009c0e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8009c12:	6865      	ldr	r5, [r4, #4]
 8009c14:	60a5      	str	r5, [r4, #8]
 8009c16:	2d00      	cmp	r5, #0
 8009c18:	bfa2      	ittt	ge
 8009c1a:	6821      	ldrge	r1, [r4, #0]
 8009c1c:	f021 0104 	bicge.w	r1, r1, #4
 8009c20:	6021      	strge	r1, [r4, #0]
 8009c22:	b90e      	cbnz	r6, 8009c28 <_printf_i+0x118>
 8009c24:	2d00      	cmp	r5, #0
 8009c26:	d04d      	beq.n	8009cc4 <_printf_i+0x1b4>
 8009c28:	4615      	mov	r5, r2
 8009c2a:	fbb6 f1f3 	udiv	r1, r6, r3
 8009c2e:	fb03 6711 	mls	r7, r3, r1, r6
 8009c32:	5dc7      	ldrb	r7, [r0, r7]
 8009c34:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8009c38:	4637      	mov	r7, r6
 8009c3a:	42bb      	cmp	r3, r7
 8009c3c:	460e      	mov	r6, r1
 8009c3e:	d9f4      	bls.n	8009c2a <_printf_i+0x11a>
 8009c40:	2b08      	cmp	r3, #8
 8009c42:	d10b      	bne.n	8009c5c <_printf_i+0x14c>
 8009c44:	6823      	ldr	r3, [r4, #0]
 8009c46:	07de      	lsls	r6, r3, #31
 8009c48:	d508      	bpl.n	8009c5c <_printf_i+0x14c>
 8009c4a:	6923      	ldr	r3, [r4, #16]
 8009c4c:	6861      	ldr	r1, [r4, #4]
 8009c4e:	4299      	cmp	r1, r3
 8009c50:	bfde      	ittt	le
 8009c52:	2330      	movle	r3, #48	; 0x30
 8009c54:	f805 3c01 	strble.w	r3, [r5, #-1]
 8009c58:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8009c5c:	1b52      	subs	r2, r2, r5
 8009c5e:	6122      	str	r2, [r4, #16]
 8009c60:	f8cd a000 	str.w	sl, [sp]
 8009c64:	464b      	mov	r3, r9
 8009c66:	aa03      	add	r2, sp, #12
 8009c68:	4621      	mov	r1, r4
 8009c6a:	4640      	mov	r0, r8
 8009c6c:	f7ff fee2 	bl	8009a34 <_printf_common>
 8009c70:	3001      	adds	r0, #1
 8009c72:	d14c      	bne.n	8009d0e <_printf_i+0x1fe>
 8009c74:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009c78:	b004      	add	sp, #16
 8009c7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009c7e:	4835      	ldr	r0, [pc, #212]	; (8009d54 <_printf_i+0x244>)
 8009c80:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8009c84:	6829      	ldr	r1, [r5, #0]
 8009c86:	6823      	ldr	r3, [r4, #0]
 8009c88:	f851 6b04 	ldr.w	r6, [r1], #4
 8009c8c:	6029      	str	r1, [r5, #0]
 8009c8e:	061d      	lsls	r5, r3, #24
 8009c90:	d514      	bpl.n	8009cbc <_printf_i+0x1ac>
 8009c92:	07df      	lsls	r7, r3, #31
 8009c94:	bf44      	itt	mi
 8009c96:	f043 0320 	orrmi.w	r3, r3, #32
 8009c9a:	6023      	strmi	r3, [r4, #0]
 8009c9c:	b91e      	cbnz	r6, 8009ca6 <_printf_i+0x196>
 8009c9e:	6823      	ldr	r3, [r4, #0]
 8009ca0:	f023 0320 	bic.w	r3, r3, #32
 8009ca4:	6023      	str	r3, [r4, #0]
 8009ca6:	2310      	movs	r3, #16
 8009ca8:	e7b0      	b.n	8009c0c <_printf_i+0xfc>
 8009caa:	6823      	ldr	r3, [r4, #0]
 8009cac:	f043 0320 	orr.w	r3, r3, #32
 8009cb0:	6023      	str	r3, [r4, #0]
 8009cb2:	2378      	movs	r3, #120	; 0x78
 8009cb4:	4828      	ldr	r0, [pc, #160]	; (8009d58 <_printf_i+0x248>)
 8009cb6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8009cba:	e7e3      	b.n	8009c84 <_printf_i+0x174>
 8009cbc:	0659      	lsls	r1, r3, #25
 8009cbe:	bf48      	it	mi
 8009cc0:	b2b6      	uxthmi	r6, r6
 8009cc2:	e7e6      	b.n	8009c92 <_printf_i+0x182>
 8009cc4:	4615      	mov	r5, r2
 8009cc6:	e7bb      	b.n	8009c40 <_printf_i+0x130>
 8009cc8:	682b      	ldr	r3, [r5, #0]
 8009cca:	6826      	ldr	r6, [r4, #0]
 8009ccc:	6961      	ldr	r1, [r4, #20]
 8009cce:	1d18      	adds	r0, r3, #4
 8009cd0:	6028      	str	r0, [r5, #0]
 8009cd2:	0635      	lsls	r5, r6, #24
 8009cd4:	681b      	ldr	r3, [r3, #0]
 8009cd6:	d501      	bpl.n	8009cdc <_printf_i+0x1cc>
 8009cd8:	6019      	str	r1, [r3, #0]
 8009cda:	e002      	b.n	8009ce2 <_printf_i+0x1d2>
 8009cdc:	0670      	lsls	r0, r6, #25
 8009cde:	d5fb      	bpl.n	8009cd8 <_printf_i+0x1c8>
 8009ce0:	8019      	strh	r1, [r3, #0]
 8009ce2:	2300      	movs	r3, #0
 8009ce4:	6123      	str	r3, [r4, #16]
 8009ce6:	4615      	mov	r5, r2
 8009ce8:	e7ba      	b.n	8009c60 <_printf_i+0x150>
 8009cea:	682b      	ldr	r3, [r5, #0]
 8009cec:	1d1a      	adds	r2, r3, #4
 8009cee:	602a      	str	r2, [r5, #0]
 8009cf0:	681d      	ldr	r5, [r3, #0]
 8009cf2:	6862      	ldr	r2, [r4, #4]
 8009cf4:	2100      	movs	r1, #0
 8009cf6:	4628      	mov	r0, r5
 8009cf8:	f7f6 fa7a 	bl	80001f0 <memchr>
 8009cfc:	b108      	cbz	r0, 8009d02 <_printf_i+0x1f2>
 8009cfe:	1b40      	subs	r0, r0, r5
 8009d00:	6060      	str	r0, [r4, #4]
 8009d02:	6863      	ldr	r3, [r4, #4]
 8009d04:	6123      	str	r3, [r4, #16]
 8009d06:	2300      	movs	r3, #0
 8009d08:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009d0c:	e7a8      	b.n	8009c60 <_printf_i+0x150>
 8009d0e:	6923      	ldr	r3, [r4, #16]
 8009d10:	462a      	mov	r2, r5
 8009d12:	4649      	mov	r1, r9
 8009d14:	4640      	mov	r0, r8
 8009d16:	47d0      	blx	sl
 8009d18:	3001      	adds	r0, #1
 8009d1a:	d0ab      	beq.n	8009c74 <_printf_i+0x164>
 8009d1c:	6823      	ldr	r3, [r4, #0]
 8009d1e:	079b      	lsls	r3, r3, #30
 8009d20:	d413      	bmi.n	8009d4a <_printf_i+0x23a>
 8009d22:	68e0      	ldr	r0, [r4, #12]
 8009d24:	9b03      	ldr	r3, [sp, #12]
 8009d26:	4298      	cmp	r0, r3
 8009d28:	bfb8      	it	lt
 8009d2a:	4618      	movlt	r0, r3
 8009d2c:	e7a4      	b.n	8009c78 <_printf_i+0x168>
 8009d2e:	2301      	movs	r3, #1
 8009d30:	4632      	mov	r2, r6
 8009d32:	4649      	mov	r1, r9
 8009d34:	4640      	mov	r0, r8
 8009d36:	47d0      	blx	sl
 8009d38:	3001      	adds	r0, #1
 8009d3a:	d09b      	beq.n	8009c74 <_printf_i+0x164>
 8009d3c:	3501      	adds	r5, #1
 8009d3e:	68e3      	ldr	r3, [r4, #12]
 8009d40:	9903      	ldr	r1, [sp, #12]
 8009d42:	1a5b      	subs	r3, r3, r1
 8009d44:	42ab      	cmp	r3, r5
 8009d46:	dcf2      	bgt.n	8009d2e <_printf_i+0x21e>
 8009d48:	e7eb      	b.n	8009d22 <_printf_i+0x212>
 8009d4a:	2500      	movs	r5, #0
 8009d4c:	f104 0619 	add.w	r6, r4, #25
 8009d50:	e7f5      	b.n	8009d3e <_printf_i+0x22e>
 8009d52:	bf00      	nop
 8009d54:	0800a78d 	.word	0x0800a78d
 8009d58:	0800a79e 	.word	0x0800a79e

08009d5c <_sbrk_r>:
 8009d5c:	b538      	push	{r3, r4, r5, lr}
 8009d5e:	4d06      	ldr	r5, [pc, #24]	; (8009d78 <_sbrk_r+0x1c>)
 8009d60:	2300      	movs	r3, #0
 8009d62:	4604      	mov	r4, r0
 8009d64:	4608      	mov	r0, r1
 8009d66:	602b      	str	r3, [r5, #0]
 8009d68:	f7f8 f8be 	bl	8001ee8 <_sbrk>
 8009d6c:	1c43      	adds	r3, r0, #1
 8009d6e:	d102      	bne.n	8009d76 <_sbrk_r+0x1a>
 8009d70:	682b      	ldr	r3, [r5, #0]
 8009d72:	b103      	cbz	r3, 8009d76 <_sbrk_r+0x1a>
 8009d74:	6023      	str	r3, [r4, #0]
 8009d76:	bd38      	pop	{r3, r4, r5, pc}
 8009d78:	20004b4c 	.word	0x20004b4c

08009d7c <__sread>:
 8009d7c:	b510      	push	{r4, lr}
 8009d7e:	460c      	mov	r4, r1
 8009d80:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009d84:	f000 f8ea 	bl	8009f5c <_read_r>
 8009d88:	2800      	cmp	r0, #0
 8009d8a:	bfab      	itete	ge
 8009d8c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8009d8e:	89a3      	ldrhlt	r3, [r4, #12]
 8009d90:	181b      	addge	r3, r3, r0
 8009d92:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8009d96:	bfac      	ite	ge
 8009d98:	6563      	strge	r3, [r4, #84]	; 0x54
 8009d9a:	81a3      	strhlt	r3, [r4, #12]
 8009d9c:	bd10      	pop	{r4, pc}

08009d9e <__swrite>:
 8009d9e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009da2:	461f      	mov	r7, r3
 8009da4:	898b      	ldrh	r3, [r1, #12]
 8009da6:	05db      	lsls	r3, r3, #23
 8009da8:	4605      	mov	r5, r0
 8009daa:	460c      	mov	r4, r1
 8009dac:	4616      	mov	r6, r2
 8009dae:	d505      	bpl.n	8009dbc <__swrite+0x1e>
 8009db0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009db4:	2302      	movs	r3, #2
 8009db6:	2200      	movs	r2, #0
 8009db8:	f000 f868 	bl	8009e8c <_lseek_r>
 8009dbc:	89a3      	ldrh	r3, [r4, #12]
 8009dbe:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009dc2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009dc6:	81a3      	strh	r3, [r4, #12]
 8009dc8:	4632      	mov	r2, r6
 8009dca:	463b      	mov	r3, r7
 8009dcc:	4628      	mov	r0, r5
 8009dce:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009dd2:	f000 b817 	b.w	8009e04 <_write_r>

08009dd6 <__sseek>:
 8009dd6:	b510      	push	{r4, lr}
 8009dd8:	460c      	mov	r4, r1
 8009dda:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009dde:	f000 f855 	bl	8009e8c <_lseek_r>
 8009de2:	1c43      	adds	r3, r0, #1
 8009de4:	89a3      	ldrh	r3, [r4, #12]
 8009de6:	bf15      	itete	ne
 8009de8:	6560      	strne	r0, [r4, #84]	; 0x54
 8009dea:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8009dee:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8009df2:	81a3      	strheq	r3, [r4, #12]
 8009df4:	bf18      	it	ne
 8009df6:	81a3      	strhne	r3, [r4, #12]
 8009df8:	bd10      	pop	{r4, pc}

08009dfa <__sclose>:
 8009dfa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009dfe:	f000 b813 	b.w	8009e28 <_close_r>
	...

08009e04 <_write_r>:
 8009e04:	b538      	push	{r3, r4, r5, lr}
 8009e06:	4d07      	ldr	r5, [pc, #28]	; (8009e24 <_write_r+0x20>)
 8009e08:	4604      	mov	r4, r0
 8009e0a:	4608      	mov	r0, r1
 8009e0c:	4611      	mov	r1, r2
 8009e0e:	2200      	movs	r2, #0
 8009e10:	602a      	str	r2, [r5, #0]
 8009e12:	461a      	mov	r2, r3
 8009e14:	f7f7 fa42 	bl	800129c <_write>
 8009e18:	1c43      	adds	r3, r0, #1
 8009e1a:	d102      	bne.n	8009e22 <_write_r+0x1e>
 8009e1c:	682b      	ldr	r3, [r5, #0]
 8009e1e:	b103      	cbz	r3, 8009e22 <_write_r+0x1e>
 8009e20:	6023      	str	r3, [r4, #0]
 8009e22:	bd38      	pop	{r3, r4, r5, pc}
 8009e24:	20004b4c 	.word	0x20004b4c

08009e28 <_close_r>:
 8009e28:	b538      	push	{r3, r4, r5, lr}
 8009e2a:	4d06      	ldr	r5, [pc, #24]	; (8009e44 <_close_r+0x1c>)
 8009e2c:	2300      	movs	r3, #0
 8009e2e:	4604      	mov	r4, r0
 8009e30:	4608      	mov	r0, r1
 8009e32:	602b      	str	r3, [r5, #0]
 8009e34:	f7f8 f823 	bl	8001e7e <_close>
 8009e38:	1c43      	adds	r3, r0, #1
 8009e3a:	d102      	bne.n	8009e42 <_close_r+0x1a>
 8009e3c:	682b      	ldr	r3, [r5, #0]
 8009e3e:	b103      	cbz	r3, 8009e42 <_close_r+0x1a>
 8009e40:	6023      	str	r3, [r4, #0]
 8009e42:	bd38      	pop	{r3, r4, r5, pc}
 8009e44:	20004b4c 	.word	0x20004b4c

08009e48 <_fstat_r>:
 8009e48:	b538      	push	{r3, r4, r5, lr}
 8009e4a:	4d07      	ldr	r5, [pc, #28]	; (8009e68 <_fstat_r+0x20>)
 8009e4c:	2300      	movs	r3, #0
 8009e4e:	4604      	mov	r4, r0
 8009e50:	4608      	mov	r0, r1
 8009e52:	4611      	mov	r1, r2
 8009e54:	602b      	str	r3, [r5, #0]
 8009e56:	f7f8 f81e 	bl	8001e96 <_fstat>
 8009e5a:	1c43      	adds	r3, r0, #1
 8009e5c:	d102      	bne.n	8009e64 <_fstat_r+0x1c>
 8009e5e:	682b      	ldr	r3, [r5, #0]
 8009e60:	b103      	cbz	r3, 8009e64 <_fstat_r+0x1c>
 8009e62:	6023      	str	r3, [r4, #0]
 8009e64:	bd38      	pop	{r3, r4, r5, pc}
 8009e66:	bf00      	nop
 8009e68:	20004b4c 	.word	0x20004b4c

08009e6c <_isatty_r>:
 8009e6c:	b538      	push	{r3, r4, r5, lr}
 8009e6e:	4d06      	ldr	r5, [pc, #24]	; (8009e88 <_isatty_r+0x1c>)
 8009e70:	2300      	movs	r3, #0
 8009e72:	4604      	mov	r4, r0
 8009e74:	4608      	mov	r0, r1
 8009e76:	602b      	str	r3, [r5, #0]
 8009e78:	f7f8 f81d 	bl	8001eb6 <_isatty>
 8009e7c:	1c43      	adds	r3, r0, #1
 8009e7e:	d102      	bne.n	8009e86 <_isatty_r+0x1a>
 8009e80:	682b      	ldr	r3, [r5, #0]
 8009e82:	b103      	cbz	r3, 8009e86 <_isatty_r+0x1a>
 8009e84:	6023      	str	r3, [r4, #0]
 8009e86:	bd38      	pop	{r3, r4, r5, pc}
 8009e88:	20004b4c 	.word	0x20004b4c

08009e8c <_lseek_r>:
 8009e8c:	b538      	push	{r3, r4, r5, lr}
 8009e8e:	4d07      	ldr	r5, [pc, #28]	; (8009eac <_lseek_r+0x20>)
 8009e90:	4604      	mov	r4, r0
 8009e92:	4608      	mov	r0, r1
 8009e94:	4611      	mov	r1, r2
 8009e96:	2200      	movs	r2, #0
 8009e98:	602a      	str	r2, [r5, #0]
 8009e9a:	461a      	mov	r2, r3
 8009e9c:	f7f8 f816 	bl	8001ecc <_lseek>
 8009ea0:	1c43      	adds	r3, r0, #1
 8009ea2:	d102      	bne.n	8009eaa <_lseek_r+0x1e>
 8009ea4:	682b      	ldr	r3, [r5, #0]
 8009ea6:	b103      	cbz	r3, 8009eaa <_lseek_r+0x1e>
 8009ea8:	6023      	str	r3, [r4, #0]
 8009eaa:	bd38      	pop	{r3, r4, r5, pc}
 8009eac:	20004b4c 	.word	0x20004b4c

08009eb0 <memmove>:
 8009eb0:	4288      	cmp	r0, r1
 8009eb2:	b510      	push	{r4, lr}
 8009eb4:	eb01 0402 	add.w	r4, r1, r2
 8009eb8:	d902      	bls.n	8009ec0 <memmove+0x10>
 8009eba:	4284      	cmp	r4, r0
 8009ebc:	4623      	mov	r3, r4
 8009ebe:	d807      	bhi.n	8009ed0 <memmove+0x20>
 8009ec0:	1e43      	subs	r3, r0, #1
 8009ec2:	42a1      	cmp	r1, r4
 8009ec4:	d008      	beq.n	8009ed8 <memmove+0x28>
 8009ec6:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009eca:	f803 2f01 	strb.w	r2, [r3, #1]!
 8009ece:	e7f8      	b.n	8009ec2 <memmove+0x12>
 8009ed0:	4402      	add	r2, r0
 8009ed2:	4601      	mov	r1, r0
 8009ed4:	428a      	cmp	r2, r1
 8009ed6:	d100      	bne.n	8009eda <memmove+0x2a>
 8009ed8:	bd10      	pop	{r4, pc}
 8009eda:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8009ede:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8009ee2:	e7f7      	b.n	8009ed4 <memmove+0x24>

08009ee4 <__malloc_lock>:
 8009ee4:	4801      	ldr	r0, [pc, #4]	; (8009eec <__malloc_lock+0x8>)
 8009ee6:	f7ff b9a7 	b.w	8009238 <__retarget_lock_acquire_recursive>
 8009eea:	bf00      	nop
 8009eec:	20004b40 	.word	0x20004b40

08009ef0 <__malloc_unlock>:
 8009ef0:	4801      	ldr	r0, [pc, #4]	; (8009ef8 <__malloc_unlock+0x8>)
 8009ef2:	f7ff b9a2 	b.w	800923a <__retarget_lock_release_recursive>
 8009ef6:	bf00      	nop
 8009ef8:	20004b40 	.word	0x20004b40

08009efc <_realloc_r>:
 8009efc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009f00:	4680      	mov	r8, r0
 8009f02:	4614      	mov	r4, r2
 8009f04:	460e      	mov	r6, r1
 8009f06:	b921      	cbnz	r1, 8009f12 <_realloc_r+0x16>
 8009f08:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009f0c:	4611      	mov	r1, r2
 8009f0e:	f7ff ba67 	b.w	80093e0 <_malloc_r>
 8009f12:	b92a      	cbnz	r2, 8009f20 <_realloc_r+0x24>
 8009f14:	f7ff f9f8 	bl	8009308 <_free_r>
 8009f18:	4625      	mov	r5, r4
 8009f1a:	4628      	mov	r0, r5
 8009f1c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009f20:	f000 f82e 	bl	8009f80 <_malloc_usable_size_r>
 8009f24:	4284      	cmp	r4, r0
 8009f26:	4607      	mov	r7, r0
 8009f28:	d802      	bhi.n	8009f30 <_realloc_r+0x34>
 8009f2a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8009f2e:	d812      	bhi.n	8009f56 <_realloc_r+0x5a>
 8009f30:	4621      	mov	r1, r4
 8009f32:	4640      	mov	r0, r8
 8009f34:	f7ff fa54 	bl	80093e0 <_malloc_r>
 8009f38:	4605      	mov	r5, r0
 8009f3a:	2800      	cmp	r0, #0
 8009f3c:	d0ed      	beq.n	8009f1a <_realloc_r+0x1e>
 8009f3e:	42bc      	cmp	r4, r7
 8009f40:	4622      	mov	r2, r4
 8009f42:	4631      	mov	r1, r6
 8009f44:	bf28      	it	cs
 8009f46:	463a      	movcs	r2, r7
 8009f48:	f7fe fe3a 	bl	8008bc0 <memcpy>
 8009f4c:	4631      	mov	r1, r6
 8009f4e:	4640      	mov	r0, r8
 8009f50:	f7ff f9da 	bl	8009308 <_free_r>
 8009f54:	e7e1      	b.n	8009f1a <_realloc_r+0x1e>
 8009f56:	4635      	mov	r5, r6
 8009f58:	e7df      	b.n	8009f1a <_realloc_r+0x1e>
	...

08009f5c <_read_r>:
 8009f5c:	b538      	push	{r3, r4, r5, lr}
 8009f5e:	4d07      	ldr	r5, [pc, #28]	; (8009f7c <_read_r+0x20>)
 8009f60:	4604      	mov	r4, r0
 8009f62:	4608      	mov	r0, r1
 8009f64:	4611      	mov	r1, r2
 8009f66:	2200      	movs	r2, #0
 8009f68:	602a      	str	r2, [r5, #0]
 8009f6a:	461a      	mov	r2, r3
 8009f6c:	f7f7 ff6a 	bl	8001e44 <_read>
 8009f70:	1c43      	adds	r3, r0, #1
 8009f72:	d102      	bne.n	8009f7a <_read_r+0x1e>
 8009f74:	682b      	ldr	r3, [r5, #0]
 8009f76:	b103      	cbz	r3, 8009f7a <_read_r+0x1e>
 8009f78:	6023      	str	r3, [r4, #0]
 8009f7a:	bd38      	pop	{r3, r4, r5, pc}
 8009f7c:	20004b4c 	.word	0x20004b4c

08009f80 <_malloc_usable_size_r>:
 8009f80:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009f84:	1f18      	subs	r0, r3, #4
 8009f86:	2b00      	cmp	r3, #0
 8009f88:	bfbc      	itt	lt
 8009f8a:	580b      	ldrlt	r3, [r1, r0]
 8009f8c:	18c0      	addlt	r0, r0, r3
 8009f8e:	4770      	bx	lr

08009f90 <floor>:
 8009f90:	ec51 0b10 	vmov	r0, r1, d0
 8009f94:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009f98:	f3c1 570a 	ubfx	r7, r1, #20, #11
 8009f9c:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 8009fa0:	2e13      	cmp	r6, #19
 8009fa2:	ee10 5a10 	vmov	r5, s0
 8009fa6:	ee10 8a10 	vmov	r8, s0
 8009faa:	460c      	mov	r4, r1
 8009fac:	dc32      	bgt.n	800a014 <floor+0x84>
 8009fae:	2e00      	cmp	r6, #0
 8009fb0:	da14      	bge.n	8009fdc <floor+0x4c>
 8009fb2:	a333      	add	r3, pc, #204	; (adr r3, 800a080 <floor+0xf0>)
 8009fb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009fb8:	f7f6 f970 	bl	800029c <__adddf3>
 8009fbc:	2200      	movs	r2, #0
 8009fbe:	2300      	movs	r3, #0
 8009fc0:	f7f6 fdb2 	bl	8000b28 <__aeabi_dcmpgt>
 8009fc4:	b138      	cbz	r0, 8009fd6 <floor+0x46>
 8009fc6:	2c00      	cmp	r4, #0
 8009fc8:	da57      	bge.n	800a07a <floor+0xea>
 8009fca:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 8009fce:	431d      	orrs	r5, r3
 8009fd0:	d001      	beq.n	8009fd6 <floor+0x46>
 8009fd2:	4c2d      	ldr	r4, [pc, #180]	; (800a088 <floor+0xf8>)
 8009fd4:	2500      	movs	r5, #0
 8009fd6:	4621      	mov	r1, r4
 8009fd8:	4628      	mov	r0, r5
 8009fda:	e025      	b.n	800a028 <floor+0x98>
 8009fdc:	4f2b      	ldr	r7, [pc, #172]	; (800a08c <floor+0xfc>)
 8009fde:	4137      	asrs	r7, r6
 8009fe0:	ea01 0307 	and.w	r3, r1, r7
 8009fe4:	4303      	orrs	r3, r0
 8009fe6:	d01f      	beq.n	800a028 <floor+0x98>
 8009fe8:	a325      	add	r3, pc, #148	; (adr r3, 800a080 <floor+0xf0>)
 8009fea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009fee:	f7f6 f955 	bl	800029c <__adddf3>
 8009ff2:	2200      	movs	r2, #0
 8009ff4:	2300      	movs	r3, #0
 8009ff6:	f7f6 fd97 	bl	8000b28 <__aeabi_dcmpgt>
 8009ffa:	2800      	cmp	r0, #0
 8009ffc:	d0eb      	beq.n	8009fd6 <floor+0x46>
 8009ffe:	2c00      	cmp	r4, #0
 800a000:	bfbe      	ittt	lt
 800a002:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 800a006:	fa43 f606 	asrlt.w	r6, r3, r6
 800a00a:	19a4      	addlt	r4, r4, r6
 800a00c:	ea24 0407 	bic.w	r4, r4, r7
 800a010:	2500      	movs	r5, #0
 800a012:	e7e0      	b.n	8009fd6 <floor+0x46>
 800a014:	2e33      	cmp	r6, #51	; 0x33
 800a016:	dd0b      	ble.n	800a030 <floor+0xa0>
 800a018:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800a01c:	d104      	bne.n	800a028 <floor+0x98>
 800a01e:	ee10 2a10 	vmov	r2, s0
 800a022:	460b      	mov	r3, r1
 800a024:	f7f6 f93a 	bl	800029c <__adddf3>
 800a028:	ec41 0b10 	vmov	d0, r0, r1
 800a02c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a030:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 800a034:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800a038:	fa23 f707 	lsr.w	r7, r3, r7
 800a03c:	4207      	tst	r7, r0
 800a03e:	d0f3      	beq.n	800a028 <floor+0x98>
 800a040:	a30f      	add	r3, pc, #60	; (adr r3, 800a080 <floor+0xf0>)
 800a042:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a046:	f7f6 f929 	bl	800029c <__adddf3>
 800a04a:	2200      	movs	r2, #0
 800a04c:	2300      	movs	r3, #0
 800a04e:	f7f6 fd6b 	bl	8000b28 <__aeabi_dcmpgt>
 800a052:	2800      	cmp	r0, #0
 800a054:	d0bf      	beq.n	8009fd6 <floor+0x46>
 800a056:	2c00      	cmp	r4, #0
 800a058:	da02      	bge.n	800a060 <floor+0xd0>
 800a05a:	2e14      	cmp	r6, #20
 800a05c:	d103      	bne.n	800a066 <floor+0xd6>
 800a05e:	3401      	adds	r4, #1
 800a060:	ea25 0507 	bic.w	r5, r5, r7
 800a064:	e7b7      	b.n	8009fd6 <floor+0x46>
 800a066:	2301      	movs	r3, #1
 800a068:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 800a06c:	fa03 f606 	lsl.w	r6, r3, r6
 800a070:	4435      	add	r5, r6
 800a072:	4545      	cmp	r5, r8
 800a074:	bf38      	it	cc
 800a076:	18e4      	addcc	r4, r4, r3
 800a078:	e7f2      	b.n	800a060 <floor+0xd0>
 800a07a:	2500      	movs	r5, #0
 800a07c:	462c      	mov	r4, r5
 800a07e:	e7aa      	b.n	8009fd6 <floor+0x46>
 800a080:	8800759c 	.word	0x8800759c
 800a084:	7e37e43c 	.word	0x7e37e43c
 800a088:	bff00000 	.word	0xbff00000
 800a08c:	000fffff 	.word	0x000fffff

0800a090 <trunc>:
 800a090:	ec51 0b10 	vmov	r0, r1, d0
 800a094:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800a098:	f2a2 33ff 	subw	r3, r2, #1023	; 0x3ff
 800a09c:	2b13      	cmp	r3, #19
 800a09e:	b5d0      	push	{r4, r6, r7, lr}
 800a0a0:	460c      	mov	r4, r1
 800a0a2:	dc10      	bgt.n	800a0c6 <trunc+0x36>
 800a0a4:	2b00      	cmp	r3, #0
 800a0a6:	bfa5      	ittet	ge
 800a0a8:	4a11      	ldrge	r2, [pc, #68]	; (800a0f0 <trunc+0x60>)
 800a0aa:	fa42 f303 	asrge.w	r3, r2, r3
 800a0ae:	2100      	movlt	r1, #0
 800a0b0:	2100      	movge	r1, #0
 800a0b2:	bfb9      	ittee	lt
 800a0b4:	2000      	movlt	r0, #0
 800a0b6:	f004 4100 	andlt.w	r1, r4, #2147483648	; 0x80000000
 800a0ba:	2000      	movge	r0, #0
 800a0bc:	ea24 0103 	bicge.w	r1, r4, r3
 800a0c0:	ec41 0b10 	vmov	d0, r0, r1
 800a0c4:	bdd0      	pop	{r4, r6, r7, pc}
 800a0c6:	2b33      	cmp	r3, #51	; 0x33
 800a0c8:	dd08      	ble.n	800a0dc <trunc+0x4c>
 800a0ca:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a0ce:	d1f7      	bne.n	800a0c0 <trunc+0x30>
 800a0d0:	ee10 2a10 	vmov	r2, s0
 800a0d4:	460b      	mov	r3, r1
 800a0d6:	f7f6 f8e1 	bl	800029c <__adddf3>
 800a0da:	e7f1      	b.n	800a0c0 <trunc+0x30>
 800a0dc:	f2a2 4213 	subw	r2, r2, #1043	; 0x413
 800a0e0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800a0e4:	fa23 f202 	lsr.w	r2, r3, r2
 800a0e8:	ea20 0602 	bic.w	r6, r0, r2
 800a0ec:	4630      	mov	r0, r6
 800a0ee:	e7e7      	b.n	800a0c0 <trunc+0x30>
 800a0f0:	000fffff 	.word	0x000fffff

0800a0f4 <fmod>:
 800a0f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a0f6:	ed2d 8b02 	vpush	{d8}
 800a0fa:	ec57 6b10 	vmov	r6, r7, d0
 800a0fe:	ec55 4b11 	vmov	r4, r5, d1
 800a102:	f000 f825 	bl	800a150 <__ieee754_fmod>
 800a106:	4622      	mov	r2, r4
 800a108:	462b      	mov	r3, r5
 800a10a:	4630      	mov	r0, r6
 800a10c:	4639      	mov	r1, r7
 800a10e:	eeb0 8a40 	vmov.f32	s16, s0
 800a112:	eef0 8a60 	vmov.f32	s17, s1
 800a116:	f7f6 fd11 	bl	8000b3c <__aeabi_dcmpun>
 800a11a:	b990      	cbnz	r0, 800a142 <fmod+0x4e>
 800a11c:	2200      	movs	r2, #0
 800a11e:	2300      	movs	r3, #0
 800a120:	4620      	mov	r0, r4
 800a122:	4629      	mov	r1, r5
 800a124:	f7f6 fcd8 	bl	8000ad8 <__aeabi_dcmpeq>
 800a128:	b158      	cbz	r0, 800a142 <fmod+0x4e>
 800a12a:	f7fe fd1f 	bl	8008b6c <__errno>
 800a12e:	2321      	movs	r3, #33	; 0x21
 800a130:	6003      	str	r3, [r0, #0]
 800a132:	2200      	movs	r2, #0
 800a134:	2300      	movs	r3, #0
 800a136:	4610      	mov	r0, r2
 800a138:	4619      	mov	r1, r3
 800a13a:	f7f6 fb8f 	bl	800085c <__aeabi_ddiv>
 800a13e:	ec41 0b18 	vmov	d8, r0, r1
 800a142:	eeb0 0a48 	vmov.f32	s0, s16
 800a146:	eef0 0a68 	vmov.f32	s1, s17
 800a14a:	ecbd 8b02 	vpop	{d8}
 800a14e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800a150 <__ieee754_fmod>:
 800a150:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a154:	ec53 2b11 	vmov	r2, r3, d1
 800a158:	f023 4e00 	bic.w	lr, r3, #2147483648	; 0x80000000
 800a15c:	ea5e 0402 	orrs.w	r4, lr, r2
 800a160:	ec51 0b10 	vmov	r0, r1, d0
 800a164:	ee11 7a10 	vmov	r7, s2
 800a168:	ee11 ca10 	vmov	ip, s2
 800a16c:	461e      	mov	r6, r3
 800a16e:	d00d      	beq.n	800a18c <__ieee754_fmod+0x3c>
 800a170:	4c7a      	ldr	r4, [pc, #488]	; (800a35c <__ieee754_fmod+0x20c>)
 800a172:	f021 4800 	bic.w	r8, r1, #2147483648	; 0x80000000
 800a176:	45a0      	cmp	r8, r4
 800a178:	4689      	mov	r9, r1
 800a17a:	dc07      	bgt.n	800a18c <__ieee754_fmod+0x3c>
 800a17c:	4254      	negs	r4, r2
 800a17e:	f8df b1e8 	ldr.w	fp, [pc, #488]	; 800a368 <__ieee754_fmod+0x218>
 800a182:	4314      	orrs	r4, r2
 800a184:	ea4e 74d4 	orr.w	r4, lr, r4, lsr #31
 800a188:	455c      	cmp	r4, fp
 800a18a:	d909      	bls.n	800a1a0 <__ieee754_fmod+0x50>
 800a18c:	f7f6 fa3c 	bl	8000608 <__aeabi_dmul>
 800a190:	4602      	mov	r2, r0
 800a192:	460b      	mov	r3, r1
 800a194:	f7f6 fb62 	bl	800085c <__aeabi_ddiv>
 800a198:	ec41 0b10 	vmov	d0, r0, r1
 800a19c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a1a0:	45f0      	cmp	r8, lr
 800a1a2:	ee10 aa10 	vmov	sl, s0
 800a1a6:	ee10 4a10 	vmov	r4, s0
 800a1aa:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800a1ae:	dc09      	bgt.n	800a1c4 <__ieee754_fmod+0x74>
 800a1b0:	dbf2      	blt.n	800a198 <__ieee754_fmod+0x48>
 800a1b2:	4290      	cmp	r0, r2
 800a1b4:	d3f0      	bcc.n	800a198 <__ieee754_fmod+0x48>
 800a1b6:	d105      	bne.n	800a1c4 <__ieee754_fmod+0x74>
 800a1b8:	4b69      	ldr	r3, [pc, #420]	; (800a360 <__ieee754_fmod+0x210>)
 800a1ba:	eb03 7515 	add.w	r5, r3, r5, lsr #28
 800a1be:	e9d5 0100 	ldrd	r0, r1, [r5]
 800a1c2:	e7e9      	b.n	800a198 <__ieee754_fmod+0x48>
 800a1c4:	ea19 0f0b 	tst.w	r9, fp
 800a1c8:	d14a      	bne.n	800a260 <__ieee754_fmod+0x110>
 800a1ca:	f1b8 0f00 	cmp.w	r8, #0
 800a1ce:	d13f      	bne.n	800a250 <__ieee754_fmod+0x100>
 800a1d0:	4964      	ldr	r1, [pc, #400]	; (800a364 <__ieee754_fmod+0x214>)
 800a1d2:	4653      	mov	r3, sl
 800a1d4:	2b00      	cmp	r3, #0
 800a1d6:	dc38      	bgt.n	800a24a <__ieee754_fmod+0xfa>
 800a1d8:	4b63      	ldr	r3, [pc, #396]	; (800a368 <__ieee754_fmod+0x218>)
 800a1da:	4033      	ands	r3, r6
 800a1dc:	2b00      	cmp	r3, #0
 800a1de:	d14f      	bne.n	800a280 <__ieee754_fmod+0x130>
 800a1e0:	f1be 0f00 	cmp.w	lr, #0
 800a1e4:	d144      	bne.n	800a270 <__ieee754_fmod+0x120>
 800a1e6:	4a5f      	ldr	r2, [pc, #380]	; (800a364 <__ieee754_fmod+0x214>)
 800a1e8:	463b      	mov	r3, r7
 800a1ea:	2b00      	cmp	r3, #0
 800a1ec:	dc3d      	bgt.n	800a26a <__ieee754_fmod+0x11a>
 800a1ee:	4b5f      	ldr	r3, [pc, #380]	; (800a36c <__ieee754_fmod+0x21c>)
 800a1f0:	4299      	cmp	r1, r3
 800a1f2:	db4a      	blt.n	800a28a <__ieee754_fmod+0x13a>
 800a1f4:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800a1f8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800a1fc:	485b      	ldr	r0, [pc, #364]	; (800a36c <__ieee754_fmod+0x21c>)
 800a1fe:	4282      	cmp	r2, r0
 800a200:	db57      	blt.n	800a2b2 <__ieee754_fmod+0x162>
 800a202:	f3c6 0613 	ubfx	r6, r6, #0, #20
 800a206:	f446 1680 	orr.w	r6, r6, #1048576	; 0x100000
 800a20a:	1a89      	subs	r1, r1, r2
 800a20c:	1b98      	subs	r0, r3, r6
 800a20e:	eba4 070c 	sub.w	r7, r4, ip
 800a212:	2900      	cmp	r1, #0
 800a214:	d164      	bne.n	800a2e0 <__ieee754_fmod+0x190>
 800a216:	4564      	cmp	r4, ip
 800a218:	bf38      	it	cc
 800a21a:	f100 30ff 	addcc.w	r0, r0, #4294967295	; 0xffffffff
 800a21e:	2800      	cmp	r0, #0
 800a220:	bfa4      	itt	ge
 800a222:	463c      	movge	r4, r7
 800a224:	4603      	movge	r3, r0
 800a226:	ea53 0104 	orrs.w	r1, r3, r4
 800a22a:	d0c5      	beq.n	800a1b8 <__ieee754_fmod+0x68>
 800a22c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a230:	db6b      	blt.n	800a30a <__ieee754_fmod+0x1ba>
 800a232:	494e      	ldr	r1, [pc, #312]	; (800a36c <__ieee754_fmod+0x21c>)
 800a234:	428a      	cmp	r2, r1
 800a236:	db6e      	blt.n	800a316 <__ieee754_fmod+0x1c6>
 800a238:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800a23c:	431d      	orrs	r5, r3
 800a23e:	f202 32ff 	addw	r2, r2, #1023	; 0x3ff
 800a242:	ea45 5102 	orr.w	r1, r5, r2, lsl #20
 800a246:	4620      	mov	r0, r4
 800a248:	e7a6      	b.n	800a198 <__ieee754_fmod+0x48>
 800a24a:	3901      	subs	r1, #1
 800a24c:	005b      	lsls	r3, r3, #1
 800a24e:	e7c1      	b.n	800a1d4 <__ieee754_fmod+0x84>
 800a250:	4946      	ldr	r1, [pc, #280]	; (800a36c <__ieee754_fmod+0x21c>)
 800a252:	ea4f 23c8 	mov.w	r3, r8, lsl #11
 800a256:	2b00      	cmp	r3, #0
 800a258:	ddbe      	ble.n	800a1d8 <__ieee754_fmod+0x88>
 800a25a:	3901      	subs	r1, #1
 800a25c:	005b      	lsls	r3, r3, #1
 800a25e:	e7fa      	b.n	800a256 <__ieee754_fmod+0x106>
 800a260:	ea4f 5128 	mov.w	r1, r8, asr #20
 800a264:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 800a268:	e7b6      	b.n	800a1d8 <__ieee754_fmod+0x88>
 800a26a:	3a01      	subs	r2, #1
 800a26c:	005b      	lsls	r3, r3, #1
 800a26e:	e7bc      	b.n	800a1ea <__ieee754_fmod+0x9a>
 800a270:	4a3e      	ldr	r2, [pc, #248]	; (800a36c <__ieee754_fmod+0x21c>)
 800a272:	ea4f 23ce 	mov.w	r3, lr, lsl #11
 800a276:	2b00      	cmp	r3, #0
 800a278:	ddb9      	ble.n	800a1ee <__ieee754_fmod+0x9e>
 800a27a:	3a01      	subs	r2, #1
 800a27c:	005b      	lsls	r3, r3, #1
 800a27e:	e7fa      	b.n	800a276 <__ieee754_fmod+0x126>
 800a280:	ea4f 522e 	mov.w	r2, lr, asr #20
 800a284:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 800a288:	e7b1      	b.n	800a1ee <__ieee754_fmod+0x9e>
 800a28a:	1a5c      	subs	r4, r3, r1
 800a28c:	2c1f      	cmp	r4, #31
 800a28e:	dc0a      	bgt.n	800a2a6 <__ieee754_fmod+0x156>
 800a290:	f201 431e 	addw	r3, r1, #1054	; 0x41e
 800a294:	fa08 f804 	lsl.w	r8, r8, r4
 800a298:	fa2a f303 	lsr.w	r3, sl, r3
 800a29c:	ea43 0308 	orr.w	r3, r3, r8
 800a2a0:	fa0a f404 	lsl.w	r4, sl, r4
 800a2a4:	e7aa      	b.n	800a1fc <__ieee754_fmod+0xac>
 800a2a6:	4b32      	ldr	r3, [pc, #200]	; (800a370 <__ieee754_fmod+0x220>)
 800a2a8:	1a5b      	subs	r3, r3, r1
 800a2aa:	fa0a f303 	lsl.w	r3, sl, r3
 800a2ae:	2400      	movs	r4, #0
 800a2b0:	e7a4      	b.n	800a1fc <__ieee754_fmod+0xac>
 800a2b2:	eba0 0c02 	sub.w	ip, r0, r2
 800a2b6:	f1bc 0f1f 	cmp.w	ip, #31
 800a2ba:	dc0a      	bgt.n	800a2d2 <__ieee754_fmod+0x182>
 800a2bc:	f202 461e 	addw	r6, r2, #1054	; 0x41e
 800a2c0:	fa0e fe0c 	lsl.w	lr, lr, ip
 800a2c4:	fa27 f606 	lsr.w	r6, r7, r6
 800a2c8:	ea46 060e 	orr.w	r6, r6, lr
 800a2cc:	fa07 fc0c 	lsl.w	ip, r7, ip
 800a2d0:	e79b      	b.n	800a20a <__ieee754_fmod+0xba>
 800a2d2:	4e27      	ldr	r6, [pc, #156]	; (800a370 <__ieee754_fmod+0x220>)
 800a2d4:	1ab6      	subs	r6, r6, r2
 800a2d6:	fa07 f606 	lsl.w	r6, r7, r6
 800a2da:	f04f 0c00 	mov.w	ip, #0
 800a2de:	e794      	b.n	800a20a <__ieee754_fmod+0xba>
 800a2e0:	4564      	cmp	r4, ip
 800a2e2:	bf38      	it	cc
 800a2e4:	f100 30ff 	addcc.w	r0, r0, #4294967295	; 0xffffffff
 800a2e8:	2800      	cmp	r0, #0
 800a2ea:	da05      	bge.n	800a2f8 <__ieee754_fmod+0x1a8>
 800a2ec:	0fe0      	lsrs	r0, r4, #31
 800a2ee:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 800a2f2:	0064      	lsls	r4, r4, #1
 800a2f4:	3901      	subs	r1, #1
 800a2f6:	e789      	b.n	800a20c <__ieee754_fmod+0xbc>
 800a2f8:	ea50 0307 	orrs.w	r3, r0, r7
 800a2fc:	f43f af5c 	beq.w	800a1b8 <__ieee754_fmod+0x68>
 800a300:	0ffb      	lsrs	r3, r7, #31
 800a302:	eb03 0340 	add.w	r3, r3, r0, lsl #1
 800a306:	007c      	lsls	r4, r7, #1
 800a308:	e7f4      	b.n	800a2f4 <__ieee754_fmod+0x1a4>
 800a30a:	0fe1      	lsrs	r1, r4, #31
 800a30c:	eb01 0343 	add.w	r3, r1, r3, lsl #1
 800a310:	0064      	lsls	r4, r4, #1
 800a312:	3a01      	subs	r2, #1
 800a314:	e78a      	b.n	800a22c <__ieee754_fmod+0xdc>
 800a316:	1a89      	subs	r1, r1, r2
 800a318:	2914      	cmp	r1, #20
 800a31a:	dc0a      	bgt.n	800a332 <__ieee754_fmod+0x1e2>
 800a31c:	f202 421e 	addw	r2, r2, #1054	; 0x41e
 800a320:	fa03 f202 	lsl.w	r2, r3, r2
 800a324:	40cc      	lsrs	r4, r1
 800a326:	4322      	orrs	r2, r4
 800a328:	410b      	asrs	r3, r1
 800a32a:	ea43 0105 	orr.w	r1, r3, r5
 800a32e:	4610      	mov	r0, r2
 800a330:	e732      	b.n	800a198 <__ieee754_fmod+0x48>
 800a332:	291f      	cmp	r1, #31
 800a334:	dc07      	bgt.n	800a346 <__ieee754_fmod+0x1f6>
 800a336:	f202 421e 	addw	r2, r2, #1054	; 0x41e
 800a33a:	40cc      	lsrs	r4, r1
 800a33c:	fa03 f202 	lsl.w	r2, r3, r2
 800a340:	4322      	orrs	r2, r4
 800a342:	462b      	mov	r3, r5
 800a344:	e7f1      	b.n	800a32a <__ieee754_fmod+0x1da>
 800a346:	f1c2 427f 	rsb	r2, r2, #4278190080	; 0xff000000
 800a34a:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800a34e:	f502 427b 	add.w	r2, r2, #64256	; 0xfb00
 800a352:	32e2      	adds	r2, #226	; 0xe2
 800a354:	fa43 f202 	asr.w	r2, r3, r2
 800a358:	e7f3      	b.n	800a342 <__ieee754_fmod+0x1f2>
 800a35a:	bf00      	nop
 800a35c:	7fefffff 	.word	0x7fefffff
 800a360:	0800a7b0 	.word	0x0800a7b0
 800a364:	fffffbed 	.word	0xfffffbed
 800a368:	7ff00000 	.word	0x7ff00000
 800a36c:	fffffc02 	.word	0xfffffc02
 800a370:	fffffbe2 	.word	0xfffffbe2

0800a374 <_init>:
 800a374:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a376:	bf00      	nop
 800a378:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a37a:	bc08      	pop	{r3}
 800a37c:	469e      	mov	lr, r3
 800a37e:	4770      	bx	lr

0800a380 <_fini>:
 800a380:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a382:	bf00      	nop
 800a384:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a386:	bc08      	pop	{r3}
 800a388:	469e      	mov	lr, r3
 800a38a:	4770      	bx	lr
